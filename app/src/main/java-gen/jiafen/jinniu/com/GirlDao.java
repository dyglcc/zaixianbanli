package jiafen.jinniu.com;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GIRL".
*/
public class GirlDao extends AbstractDao<Girl, Void> {

    public static final String TABLENAME = "GIRL";

    /**
     * Properties of entity Girl.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property IconUrl = new Property(0, String.class, "iconUrl", false, "ICON_URL");
        public final static Property MediumUrl = new Property(1, String.class, "mediumUrl", false, "MEDIUM_URL");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Height = new Property(3, int.class, "height", false, "HEIGHT");
        public final static Property Width = new Property(4, int.class, "width", false, "WIDTH");
    };


    public GirlDao(DaoConfig config) {
        super(config);
    }
    
    public GirlDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GIRL\" (" + //
                "\"ICON_URL\" TEXT NOT NULL ," + // 0: iconUrl
                "\"MEDIUM_URL\" TEXT NOT NULL ," + // 1: mediumUrl
                "\"NAME\" TEXT NOT NULL ," + // 2: name
                "\"HEIGHT\" INTEGER NOT NULL ," + // 3: height
                "\"WIDTH\" INTEGER NOT NULL );"); // 4: width
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GIRL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Girl entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getIconUrl());
        stmt.bindString(2, entity.getMediumUrl());
        stmt.bindString(3, entity.getName());
        stmt.bindLong(4, entity.getHeight());
        stmt.bindLong(5, entity.getWidth());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Girl entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getIconUrl());
        stmt.bindString(2, entity.getMediumUrl());
        stmt.bindString(3, entity.getName());
        stmt.bindLong(4, entity.getHeight());
        stmt.bindLong(5, entity.getWidth());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Girl readEntity(Cursor cursor, int offset) {
        Girl entity = new Girl( //
            cursor.getString(offset + 0), // iconUrl
            cursor.getString(offset + 1), // mediumUrl
            cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3), // height
            cursor.getInt(offset + 4) // width
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Girl entity, int offset) {
        entity.setIconUrl(cursor.getString(offset + 0));
        entity.setMediumUrl(cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setHeight(cursor.getInt(offset + 3));
        entity.setWidth(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Girl entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Girl entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
