package qfpay.wxshop.ui.view;import java.io.File;import java.util.ArrayList;import java.util.List;import java.util.Map;import jiafen.jinniu.com.R;import qfpay.wxshop.activity.SSNPublishActivity;import qfpay.wxshop.data.beans.SsnContentBean;import qfpay.wxshop.listener.onScrollviewFocusListener;import qfpay.wxshop.utils.QMMAlert;import qfpay.wxshop.utils.QMMAlert.OnAlertSelectId;import qfpay.wxshop.utils.Toaster;import android.annotation.SuppressLint;import android.content.Context;import android.content.res.TypedArray;import android.text.Editable;import android.text.TextWatcher;import android.util.AttributeSet;import android.util.TypedValue;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.EditText;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.LinearLayout;import com.adhoc.pic.Picasso;import com.google.gson.Gson;@SuppressLint("NewApi")public class EditorView extends LinearLayout {	private static final int EMPTY_END_LINE = 5;	private static final int TEXT = 0;	private static final int IMAGE = 1;	private Context mContext;	private final int defaultCount = 10;	private static final boolean EDITTET_CONTENT = true;	private static final boolean IMAGE_CONTENT = false;	private static final float PIC_SCALE = 1.5f;	public static final int defaultPicSize = 600;	public EditorView(Context context, AttributeSet attrs, int defStyle) {		super(context, attrs, defStyle);		this.mContext = context;		init(attrs);	}	public EditorView(Context context, AttributeSet attrs) {		super(context, attrs);		this.mContext = context;		init(attrs);	}	private LayoutInflater mInfraInflater;	private int MARGIN_BEETWEEN_LINE;	private ArrayList<String> delList = new ArrayList<String>();	private void init(AttributeSet attrs) {		TypedArray a = mContext.obtainStyledAttributes(attrs,				R.styleable.EditScrollview);		MARGIN_BEETWEEN_LINE = a.getDimensionPixelSize(				R.styleable.EditScrollview_vertical_space, 20);		a.recycle();		mInfraInflater = LayoutInflater.from(mContext);		this.setOrientation(LinearLayout.VERTICAL);	}	public void init() {		for (int i = 0; i < defaultCount; i++) {			addEditView(i);		}	}	public void init(List<SsnContentBean> list) {		for (int i = 0; i < list.size(); i++) {			SsnContentBean scb = list.get(i);			if (scb.getType().equals(FLAG_PIC)) {				addpic(scb, i);			} else {				addEditView(i, scb);			}		}	}	private View mFocuView;	private int measuredWidth;	@SuppressWarnings("deprecation")	private EditText addEditView(int i) {		// adjust id		final EditText editText = new EditText(mContext);		editText.setOnFocusChangeListener(new OnFocusChangeListener() {			@Override			public void onFocusChange(View view, boolean focus) {				if (focus) {					// focus监听					if (listener != null) {						listener.onfocus();					}					// 如果有被选中的待删除图片的话，清除					clearPicSelectStatus();					// 清楚hint					clearHint();					mFocuView = view;					int currentCount = EditorView.this.getChildCount();					int pos = view.getId();					int needAddCount = EMPTY_END_LINE - (currentCount - pos);					// ((EditText) mFocuView).setHint("");					if (needAddCount > 0) {						for (int j = currentCount; j < currentCount								+ needAddCount; j++) {							// 继续添加view							addEditView(j);						}					}				}			}		});		editText.setBackgroundDrawable(null);		editText.setId(i);		editText.setLineSpacing(10f, 1f);		if (i == 0) {			editText.setTextSize(TypedValue.COMPLEX_UNIT_PX, getResources()					.getDimension(R.dimen.text_size_small));			editText.setHint(R.string.suisuinian_content);			// editText.setTextSize(TypedValue.COMPLEX_UNIT_PX, getResources()			// .getDimension(R.dimen.text_size_small));		}		editText.addTextChangedListener(new TextWatcherChangeTextSize(editText));		editText.setTextColor(getResources().getColor(R.color.text_color));		LinearLayout.LayoutParams para = new LinearLayout.LayoutParams(				LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);		// 第一个位置向上margin		if (i != 0) {			para.topMargin = -MARGIN_BEETWEEN_LINE;		}		this.addView(editText, i, para);		return editText;	}	@SuppressWarnings("deprecation")	private EditText addEditView(int i, String str) {		EditText edittext = addEditView(i);		edittext.setText(str);		return edittext;	}	private void addEditView(int i, SsnContentBean scb) {		EditText addEditView = addEditView(i);		addEditView.setText(scb.getContent());	}	// 清楚这里面hint	protected void clearHint() {		for (int i = 0; i < getChildCount(); i++) {			View view = getChildAt(i);			if (view instanceof EditText) {				((EditText) view).setHint("");			}		}	}	protected void clearPicSelectStatus() {		for (int i = 0; i < getChildCount(); i++) {			View view = getChildAt(i);			if (view instanceof FrameLayout) {				ImageView iv = (ImageView) view.findViewById(R.id.imageView1);				Object obj = iv.getTag();				if (obj != null) {					View viewChild = view.findViewById(11);					// 删除灰色的蒙层					((ViewGroup) view).removeView(viewChild);				}			}		}	}	// 设置设置id	private void adjustId() {		for (int i = 0; i < this.getChildCount(); i++) {			View view = this.getChildAt(i);			view.setId(i);		}	}	// public 添加的时候使用	public View addpic(String dir) {		if (mFocuView == null) {			Toaster.l(mContext, "请选择添加的位置！");			return null;		}		String picSizeStr = SSNPublishActivity.getPicSizeStr(dir);		String[] strs = picSizeStr.split(SSNPublishActivity.FENGEFU_PIC_SIZE);		int widthPic = defaultPicSize, heightPic = defaultPicSize;		if (strs != null && strs.length == 2) {			widthPic = Integer.parseInt(strs[0]);			heightPic = Integer.parseInt(strs[1]);			if (widthPic != 0) {				heightPic = measuredWidth * heightPic / widthPic;			}		}		int index = mFocuView.getId();		// 如果光标处是空字符串在		EditText edittext = (EditText) mFocuView;		boolean emptyString = edittext.getText().toString().equals("") ? true				: false;		final FrameLayout layout = (FrameLayout) mInfraInflater.inflate(				R.layout.item_suisuinian_imageview, null);		setImageViewListener(layout, dir);		LinearLayout.LayoutParams paras = new android.widget.LinearLayout.LayoutParams(				measuredWidth, heightPic);		paras.bottomMargin = MARGIN_BEETWEEN_LINE;		if (emptyString) {			this.addView(layout, index, paras);			removeViewFunc(edittext);		} else {			// 空字符串就显示插入imageview 删除当前edittext			String strall = edittext.getText().toString();			int selection = edittext.getSelectionEnd();			// 光标在末尾，加到下一个位置			if (selection == strall.length()) {				this.addView(layout, index + 1, paras);				// 光标在最开始位置加入图片			} else if (selection == 0) {				addView(layout, index, paras);				// 光标在文字中间，那么会加入新的edittext 加入图片，原来的edittext 设置文字后半句。			} else if (selection > 0 && selection < strall.length()) {				// add edittext				String str1 = strall.substring(0, selection);				String str2 = strall.substring(selection);				addEditView(index, str1);				addView(layout, index + 1, paras);				// add pic				edittext.setText(str2);			}		}		adjustId();//		checkViewPara();		return layout;	}	private void removeViewFunc(View edittext) {		this.removeView(edittext);		checkViewPara();	}	private void checkViewPara() {		for(int i=0;i<getChildCount();i++){			View view = getChildAt(i);			LinearLayout.LayoutParams layoutParams = (LayoutParams) view.getLayoutParams();			if(view instanceof EditText){				if(i != 0 ){					layoutParams.topMargin = - MARGIN_BEETWEEN_LINE;				}else{					layoutParams.topMargin = 0;				}			}		}	}	private void setImageViewListener(final FrameLayout layout, String dir) {		ImageView iv = (ImageView) layout.findViewById(R.id.imageView1);//		Picasso.with(mContext).load(new File(dir)).centerCrop()//		.placeholder(R.drawable.list_item_default).error(R.drawable.list_item_default).into(iv);		Picasso.with(mContext).load(new File(dir)).resize(measuredWidth == 0 ? 800:measuredWidth,0).into(iv);//		aquery.id(iv).image(new File(dir),0);		iv.setOnLongClickListener(onLongClick);		iv.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View imageView) {				clickImageView(layout, imageView.getWidth(),						imageView.getHeight());				// 添加灰色蒙层				imageView.setTag("readyDel");			}		});	}	private void clickImageView(final FrameLayout layout, int width, int height) {		final View view = mInfraInflater.inflate(				R.layout.item_suisuinian_img_menu, null);		FrameLayout.LayoutParams paras = new android.widget.FrameLayout.LayoutParams(				width, height);		layout.addView(view, paras);		// 通过添加tag 判断		view.setId(11);		Button del = (Button) view.findViewById(R.id.btn_image_del);		EditText et_request_focus = (EditText) view				.findViewById(R.id.et_request_focus);		et_request_focus.requestFocus();		View spacing = view.findViewById(R.id.view_spacing);		del.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View arg0) {//				EditorView.this.removeView(layout);				removeViewFunc(layout);				adjustId();				view.setVisibility(View.GONE);			}		});		spacing.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View arg0) {				// TODO Auto-generated method stub				view.setVisibility(View.GONE);				layout.removeView(view);				ImageView iv = (ImageView) layout.findViewById(R.id.imageView1);				iv.setTag(null);			}		});	}	// 编辑初始化imageview	public View addpic(final SsnContentBean scb, int pos) {		final FrameLayout layout = (FrameLayout) mInfraInflater.inflate(				R.layout.item_suisuinian_imageview, null);		ImageView iv = (ImageView) layout.findViewById(R.id.imageView1);		iv.setOnLongClickListener(onLongClick);		iv.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View imageView) {				clickImageView(layout, imageView.getWidth(),						imageView.getHeight(), scb.getId());				// 添加灰色蒙层				imageView.setTag("readyDel");			}		});		String width_height = scb.getAttach();		String[] strs = width_height.split(SSNPublishActivity.FENGEFU_PIC_SIZE);		int height = defaultPicSize, width = defaultPicSize;		if (strs != null && strs.length == 2) {			width = Integer.parseInt(strs[0]);			height = Integer.parseInt(strs[1]);			if (width != 0) {				height = measuredWidth * height / width;			}		}		LinearLayout.LayoutParams paras = new android.widget.LinearLayout.LayoutParams(				measuredWidth, height);		paras.bottomMargin = MARGIN_BEETWEEN_LINE;		this.addView(layout, pos, paras);		layout.setTag(scb.getContent());				//		aquery.id(iv).image(qfpay.wxshop.utils.Utils.getThumblePic(scb.getContent(),//				measuredWidth / PIC_SCALE, height / PIC_SCALE));//				Picasso.with(mContext).load(qfpay.wxshop.utils.Utils.getThumblePic(scb.getContent(),				(int)(measuredWidth / PIC_SCALE), (int)(height / PIC_SCALE))).resize(measuredWidth, height).centerCrop().into(iv);						//		Glide.with(mContext)//				.load(qfpay.wxshop.utils.Utils.getThumblePic(scb.getContent(),//						measuredWidth / PIC_SCALE, height / PIC_SCALE))//				.fitCenter().placeholder(R.drawable.list_item_default)//				.error(R.drawable.list_item_default).crossFade().into(iv);		return layout;	}	@Override	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {		setMeasuredDimension(getDefaultSize(0, widthMeasureSpec),				getDefaultSize(0, heightMeasureSpec));		measuredWidth = getMeasuredWidth();		super.onMeasure(widthMeasureSpec, heightMeasureSpec);	}	private void clickImageView(final FrameLayout layout, int width,			int height, final String mMidDel) {		clickImageView(layout, width, height);		// final View view = layout.findViewById(R.id.layout_mengceng);		Button del = (Button) layout.findViewById(R.id.btn_image_del);		del.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View arg0) {				EditorView.this.removeView(layout);				adjustId();				// view.setVisibility(View.GONE);				// Toaster.l(mContext, "add del mid" + mMidDel);s				if (mMidDel != null && !mMidDel.equals("")) {					delList.add(mMidDel);				}			}		});	};	private OnLongClickListener onLongClick = new OnLongClickListener() {		@Override		public boolean onLongClick(final View arg0) {			String[] items = new String[] { "删除图片" };			QMMAlert.showAlertCenterMenu(mContext, "干什么", items, null,					new OnAlertSelectId() {						@Override						public void onClick(int whichButton) {							switch (whichButton) {							case 0:								EditorView.this.removeView(arg0);								adjustId();								break;							default:								break;							}						}					});			return false;		}	};	@Override	public boolean dispatchKeyEvent(KeyEvent event) {		if (event.getAction() == KeyEvent.ACTION_DOWN				&& event.getKeyCode() == 67) {// 删除键			if ((((EditText) mFocuView).getText().toString().equals(""))) {				go2LastEditText();			}		}		return super.dispatchKeyEvent(event);	}	private void go2LastEditText() {		if (mFocuView.getId() == 0) {			return;		}		View childAt = this.getChildAt(mFocuView.getId() - 1);		if (childAt instanceof EditText) {			this.removeView(mFocuView);			adjustId();			childAt.requestFocus();			EditText mEdittext = (EditText) childAt;			mEdittext.setSelection(mEdittext.getText().length());		}	}	// 合并成为json串	public String getContent(Map<String, String> mapFileSize) {		List<SsnContentBean> list = new ArrayList<SsnContentBean>();		StringBuilder builder = new StringBuilder();		for (int i = 0; i < this.getChildCount(); i++) {			View view = this.getChildAt(i);			if (view instanceof EditText) {				String str = ((EditText) view).getText().toString();				if (str.equals("")) {					builder.append("\n");				} else {					builder.append(str);				}				int checkNextType = checkNextType(i);				if (checkNextType == IMAGE || checkNextType == -1) {					setContentBean(null, builder.toString(), list,							EDITTET_CONTENT);				}			} else {				// imageview 中得到url				String url = (String) view.getTag();				builder = new StringBuilder();				setContentBean(mapFileSize.get(url), url, list, IMAGE_CONTENT);			}		}		Gson gson = new Gson();		// 清除最后一长串的\n		if (list.size() > 0) {			SsnContentBean scb = list.get(list.size() - 1);			if (scb.getType().equals(FLAG_EDIT)) {				String replaceContent = scb.getContent().replaceAll("\\n+$",						"\n");				scb.setContent(replaceContent);			}		}		return gson.toJson(list);	}	private int checkNextType(int i) {		if (i < 0 || i >= this.getChildCount()) {			return -1;		}		View view = this.getChildAt(i);		View view2 = this.getChildAt(i + 1);		if (view instanceof EditText && view2 instanceof EditText) {			return TEXT;		} else if (view instanceof FrameLayout && view2 instanceof FrameLayout) {			return IMAGE;		}		return -1;	}	public static final String FLAG_EDIT = "0";	public static final String FLAG_PIC = "1";	private void setContentBean(String attach, String string,			List<SsnContentBean> list, boolean isEdittext) {		SsnContentBean ccb = new SsnContentBean();		if (isEdittext) {			ccb.setType(FLAG_EDIT);		} else {			ccb.setType(FLAG_PIC);			ccb.setAttach(attach);		}		ccb.setContent(string);		list.add(ccb);	}	// 判断正在传送图片（隐藏问题，有可能图片上传失败，这个失败是三次重试之后还是失败）	public boolean checkUploadSuccess() {		boolean success = true;		for (int i = 0; i < this.getChildCount(); i++) {			View view = this.getChildAt(i);			if (view instanceof FrameLayout) {				if (view.getTag() == null) {					success = false;					break;				}			}		}		return success;	}	public String getImageUrl() {		String image_url = null;		for (int i = 0; i < this.getChildCount(); i++) {			View view = this.getChildAt(i);			if (view instanceof FrameLayout) {				if (view.getTag() != null) {					image_url = (String) view.getTag();					break;				}			}		}		return image_url;	}	class TextWatcherChangeTextSize implements TextWatcher {		EditText editText;		public TextWatcherChangeTextSize(EditText text) {			this.editText = text;		}		@Override		public void onTextChanged(CharSequence arg0, int arg1, int arg2,				int arg3) {			if (editText.getText().toString().length() == 0) {				editText.setTextSize(TypedValue.COMPLEX_UNIT_PX, getResources()						.getDimension(R.dimen.text_size_small));			} else {				editText.setTextSize(TypedValue.COMPLEX_UNIT_PX, getResources()						.getDimension(R.dimen.text_size_normal));			}		}		@Override		public void beforeTextChanged(CharSequence arg0, int arg1, int arg2,				int arg3) {			// TODO Auto-generated method stub		}		@Override		public void afterTextChanged(Editable arg0) {			// TODO Auto-generated method stub		}	};	public boolean isEmpty() {		boolean isEmpty = true;		for (int i = 0; i < getChildCount(); i++) {			View view = getChildAt(i);			if (view instanceof EditText) {				EditText et = (EditText) view;				if (!et.getText().toString().equals("")) {					isEmpty = false;					break;				}			} else if (view instanceof FrameLayout) {				isEmpty = false;			}		}		return isEmpty;	}	public void setHint() {		boolean isEmpty = isEmpty();		if (isEmpty) {			EditText et = (EditText) getChildAt(0);			if (et != null) {				et.setTextSize(TypedValue.COMPLEX_UNIT_PX, getResources()						.getDimension(R.dimen.text_size_small));				et.setHint(getResources()						.getString(R.string.suisuinian_content));			}		}	}	private onScrollviewFocusListener listener;	public void addOnFocusListener(onScrollviewFocusListener listener) {		this.listener = listener;	}	public String getDelMidStr() {		if (delList.size() == 0) {			return null;		}		StringBuilder delStr = new StringBuilder();		for (int i = 0; i < delList.size(); i++) {			delStr.append(delList.get(i)).append(",");		}		String str = delStr.toString();		if (str.endsWith(",")) {			int lastIndexOf = str.lastIndexOf(",");			str = str.substring(0, lastIndexOf);		}		return str;	}}