package qfpay.wxshop.adapter;import java.util.concurrent.atomic.AtomicInteger;import android.content.Context;import android.database.DataSetObserver;import android.view.View;import android.view.ViewGroup;import android.view.View.OnClickListener;import android.widget.AbsListView;import android.widget.BaseAdapter;import android.widget.LinearLayout;import android.widget.AbsListView.LayoutParams;import banli.jinniu.com.R;/** * listview 要加 header * */	public class GridAdapterDeal<T extends BaseAdapter> extends BaseAdapter			implements OnClickListener {		public static int W_H = 0;		private static final AtomicInteger sNextGeneratedId = new AtomicInteger(				1);		private static final int ID_POS = fakeGenId();		private static final int ID_REAL_POS = fakeGenId();		private T mAdapter = null;		private int mColumns = 1;		private OnGridItemClickListener mGridListener;		private Context mContext;		@Override		public View getView(int position, View convertView, ViewGroup parent) {			if (mColumns == 1) {				View child = mAdapter.getView(position, convertView, parent);				setOnItemClickListenerIfNeed(child, position, position);				// no need				return child;			}			return bindGridView(position, convertView, parent);		}		public interface OnLazeLoadListener {			void onLazeLoad();		}		private OnLazeLoadListener listener;		public void setLazeLoadListener(OnLazeLoadListener listener) {			this.listener = listener;		}		protected View bindGridView(int position, View convertView,				ViewGroup parent) {			if (position == getCount() - 1) {				if (listener != null) {					listener.onLazeLoad();				}			}			ViewGroup root = null;			// cache the root			if (convertView == null || !(convertView instanceof ViewGroup)) {				root = createRoot();				root.setClickable(false);				root.setFocusable(false);			} else {				root = (ViewGroup) convertView;			}			// columns = 3			// pos --> real pos			// 0 --> 0 1 2			// 1 --> 3 4 5			// 2 --> 6 7 8			// so do this			return bindView(root, position);		}		protected ViewGroup bindView(ViewGroup root, int pos) {			final int count = mAdapter.getCount();			final int childCount = root.getChildCount();			for (int i = 0; i < mColumns; i++) {				// real position				int index = mColumns * pos + i;				// 不足一行时，直接返回现有状态				if (index == count) {					// fix bug : root是有可能是系统缓存的root，这里直接返回root将导致如果此行数量					// 不够columns，就会使用缓存的root里的child，为了避免这个问题，必须					// 将缓存的child移除。					// by Chaos at 2012-12-17					removeCacheChild(root, index);					break;				} else if (index > count) {					throw new UnknownError("unknowError");				}				View child = mAdapter.getView(index, root.getChildAt(i), root);				setOnItemClickListenerIfNeed(child, pos, index);				if (childCount == mColumns) {					// root已经包含了Item，就没有必要继续添加了。					// add by dyg					LinearLayout.LayoutParams lp = (android.widget.LinearLayout.LayoutParams) child							.getLayoutParams();					setlayoutParas(lp, index, count);					continue;				} else {					if (i == 0 && childCount != 0) {						// 如果root已经包含item，但是并不全，这里就移除重新添加						// FIXME 也许还有更好的方案						root.removeAllViews();					}					LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(							// LinearLayout.LayoutParams.WRAP_CONTENT,							mContext.getResources().getDisplayMetrics().widthPixels									/ mColumns,							LinearLayout.LayoutParams.WRAP_CONTENT);					// add by dyg					setlayoutParas(lp, index, count);					child.setFocusable(true);					child.setClickable(true);					if (child instanceof ViewGroup) {						((ViewGroup) child)								.setDescendantFocusability(ViewGroup.FOCUS_BLOCK_DESCENDANTS);					}					root.addView(child, lp);				}			}			return root;		}		private void setlayoutParas(LinearLayout.LayoutParams lp, int index,				int count) {			lp.width = itemWidth;			if (index % mColumns != 0) {			} else {				lp.rightMargin = (int) mContext.getResources().getDimension(						R.dimen.hy_margin_2_eage);			}		}		private void removeCacheChild(ViewGroup root, int index) {			int realColumns = (index - 1) % mColumns;			int moveCount = (mColumns - 1) - realColumns;			for (int i = 0; i < moveCount; i++) {				final View child = root.getChildAt((mColumns - 1 - i));				if (child != null) {					root.removeView(child);				}			}		}		protected ViewGroup createRoot() {			LinearLayout root = new LinearLayout(mContext);			root.setOrientation(LinearLayout.HORIZONTAL);			AbsListView.LayoutParams lp = new AbsListView.LayoutParams(					LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);			root.setLayoutParams(lp);			return root;		}		private boolean setOnItemClickListenerIfNeed(View child, int pos,				int realPos) {			if (mGridListener == null) {				return false;			}			child.setOnClickListener(this);			child.setTag(ID_POS, pos);			child.setTag(ID_REAL_POS, realPos);			return true;		}		public void setOnItemClickListener(OnGridItemClickListener listener) {			this.mGridListener = listener;		}		public void setNumColumns(int columns) {			this.mColumns = columns;		}		public int getNumColumns() {			return mColumns;		}		private int itemWidth;		public GridAdapterDeal(Context context, T adapter, int screenWidth,				int itemW) {			this.mContext = context;			this.mAdapter = adapter;			this.itemWidth = itemW;		}		@Override		public int getCount() {			int count = (int) Math					.ceil(mAdapter.getCount() / (double) mColumns);			return count;		}		@Override		public Object getItem(int position) {			return mAdapter.getItem(position);		}		@Override		public long getItemId(int position) {			return mAdapter.getItemId(position);		}		@Override		public boolean hasStableIds() {			return mAdapter.hasStableIds();		}		@Override		public void registerDataSetObserver(DataSetObserver observer) {			mAdapter.registerDataSetObserver(observer);		}		@Override		public void unregisterDataSetObserver(DataSetObserver observer) {			mAdapter.unregisterDataSetObserver(observer);		}		@Override		public boolean areAllItemsEnabled() {			return mAdapter.areAllItemsEnabled();		}		@Override		public boolean isEnabled(int position) {			return mAdapter.isEnabled(position);		}		@Override		public int getItemViewType(int position) {			return mAdapter.getItemViewType(position);		}		@Override		public int getViewTypeCount() {			return mAdapter.getViewTypeCount();		}		@Override		public boolean isEmpty() {			return mAdapter.isEmpty();		}		public T getWrappedAdapter() {			return mAdapter;		}		public static interface OnGridItemClickListener {			public void onItemClick(int pos, int realPos);		}		@Override		public void onClick(View v) {			if (mGridListener == null) {				// no need to feedback			}			int pos = (Integer) v.getTag(ID_POS);			int realPos = (Integer) v.getTag(ID_REAL_POS);			mGridListener.onItemClick(pos, realPos);		}		public static int generateViewId() {			for (;;) {				final int result = sNextGeneratedId.get();				int newValue = result + 1;				if (newValue > 0x00FFFFFF) {					newValue = 1; // Roll over to 1, not 0.				}					if (sNextGeneratedId.compareAndSet(result, newValue)) {						return result;					}			}		}		public static int fakeGenId() {			int realId = generateViewId();			int fakeId = realId | 0x10000000;			return fakeId;		}}