apply plugin: 'com.android.library'// 2.0编程 2.1可视化ext.apiVersionCode = "2.1";ext.vername = '2.2.12';ext.debugFlag = true;ext.obscure = true;android {    compileSdkVersion 19    buildToolsVersion "22.0.0"    defaultConfig {        minSdkVersion 10        targetSdkVersion 19        versionName "${vername}"    }    buildTypes {//        debug {//            println 'debug now .......aa................'//            minifyEnabled false//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'//        }        release {            println 'realease now .......aa......sss........'            println 'release..'            minifyEnabled obscure            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'        }    }    compileOptions {        sourceCompatibility JavaVersion.VERSION_1_7        targetCompatibility JavaVersion.VERSION_1_7    }}ext.oldpath = "${rootDir}/release/adhoc-v${android.defaultConfig.versionName}-all.jar"// release 调用def copyfile() {    def newPath = "${rootDir}/android_sdk_v0/build/intermediates/bundles/release/classes.jar";    // 删除文件    def fileOld = new File(oldpath)    if (fileOld.exists()) {        fileOld.delete()    }    fileOld.createNewFile()    // copy file to release    new File(oldpath).bytes = new File(newPath).bytes    println 'copy file release success'    // copy file to Demo//    def demoPath = "/Users/dongyuangui/GITHUB/android-abtestdemo/Demo/libs/adhoc-v${android.defaultConfig.versionName}.jar"    def demoPath = "${rootDir}/AbTestDemo/libs/adhoc-v${android.defaultConfig.versionName}.jar"    new File(demoPath).bytes = new File(newPath).bytes    println 'copy file to Demo success'}def jarSinger() {    // jar sign//    println new File(oldpath).length    def command = "jarsigner -keystore /Users/dongyuangui/work/key/adhoc_key.jks -storepass 2346223462 -keypass 2346223462 /Users/dongyuangui/ADHOC/adhoc_android/release/adhoc-v${android.defaultConfig.versionName}.jar adhoc"    println command    def proc = command.execute()    proc.waitFor()    println "return code: ${proc.exitValue()}"    println "stderr: ${proc.err.text}"    println "stdout: ${proc.in.text}" // *out* from the external program is *in* for groovy}assembleRelease.doLast {    println 'do first'    copyfile()}.doLast {    jarSinger()}.doLast {    genDocment()}preBuild.dependsOn clean// 生成doc文件def genDocment() {    println 'warnning --- 需要自己手动生成javadoc文档'}clean.doFirst() {    def debugFile = "${rootDir}/android_sdk_v0/src/main/java/com/adhoc/utils/T.java"    def sourceF = new File(debugFile)    def sourceText = sourceF.text    if (!debugFlag) {        println '修改debug为false'        def modifiedText = sourceText.replaceAll("true", "false")        sourceF.write(modifiedText, "utf-8")    } else {        println '修改debug为true'        def modifiedText = sourceText.replaceAll("false", "true")        sourceF.write(modifiedText, "utf-8")    }    def constdir = "${rootDir}/android_sdk_v0/src/main/java/com/adhoc/adhocsdk/AdhocConstants.java"    def sourceConF = new File(constdir)    def sourceConText = sourceConF.text    // 修改版本号    println '修改adhocsdk版本号'    def modifiedConText = sourceConText.replaceFirst(/int ADHOC_SDK_VERSION = \d+/, "int ADHOC_SDK_VERSION = ${apiVersionCode}")    sourceConF.write(modifiedConText, "utf-8")    println '修改adhocsdk版本号完成'}task buildJarFile(dependsOn : assembleRelease) << {    println 'Assemple ADHOC_SDK'}