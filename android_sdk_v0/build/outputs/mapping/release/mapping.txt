com.adhoc.adhocsdk.AbsListBean -> com.adhoc.a:
    java.util.ArrayList list -> a
    boolean isObsered -> b
    void <init>() -> <init>
    java.util.ArrayList getList() -> a
    void setList(java.util.ArrayList) -> a
    boolean isObsered() -> b
    void setIsObsered(boolean) -> a
com.adhoc.adhocsdk.AdhocClientIDHandler -> com.adhoc.b:
    com.adhoc.adhocsdk.AdhocClientIDHandler ourInstance -> a
    java.lang.String mClientId -> b
    android.content.Context mContext -> c
    com.adhoc.adhocsdk.AdhocClientIDHandler getInstance(android.content.Context) -> a
    java.lang.String generateNewClientId() -> c
    void saveSaveSDcard(java.lang.String) -> a
    void checkPermission() -> d
    java.lang.String getClientId() -> a
    java.lang.String getFromSDCARD() -> b
    void <init>(android.content.Context) -> <init>
    void <clinit>() -> <clinit>
com.adhoc.adhocsdk.AdhocConstants -> com.adhoc.c:
    java.lang.String mServer -> a
    void <clinit>() -> <clinit>
com.adhoc.adhocsdk.AdhocTracker -> com.adhoc.adhocsdk.AdhocTracker:
    java.lang.String msg -> msg
    java.lang.String client_id -> client_id
    int current_api_level -> current_api_level
    java.lang.String APPKEY -> APPKEY
    void <init>() -> <init>
    com.adhoc.adhocsdk.ExperimentFlags getExperimentFlags(android.content.Context) -> getExperimentFlags
    com.adhoc.adhocsdk.ExperimentFlags getNullExperimentflag() -> getNullExperimentflag
    void setCustomStatParameter(android.content.Context,java.util.HashMap) -> setCustomStatParameter
    void getExperimentFlags(android.content.Context,com.adhoc.adhocsdk.OnAdHocReceivedData) -> getExperimentFlags
    void getExperimentFlagsTimeOut(android.content.Context,int) -> getExperimentFlagsTimeOut
    void getExperimentFlagsTimeOut(android.content.Context,int,com.adhoc.adhocsdk.OnAdHocReceivedData) -> getExperimentFlagsTimeOut
    void incrementStat(android.content.Context,java.lang.String,double) -> incrementStat
    void incrementStat(android.content.Context,java.lang.String,int) -> incrementStat
    void incrementStat(android.content.Context,java.lang.String,long) -> incrementStat
    void incrementStat(android.content.Context,java.lang.String,float) -> incrementStat
    void autoTracking(android.content.Context,android.view.MotionEvent) -> autoTracking
    void init(android.content.Context,java.lang.String) -> init
    org.json.JSONArray getCurrentExperiments() -> getCurrentExperiments
    void onFragmentCreate(android.app.Activity,java.lang.Object) -> onFragmentCreate
    void onFragmentDestory(android.app.Activity,java.lang.Object) -> onFragmentDestory
    void onResume(android.app.Activity) -> onResume
    void onPause(android.app.Activity) -> onPause
    void reportCrashEnable(boolean) -> reportCrashEnable
    void setOnlyWifiReport(boolean) -> setOnlyWifiReport
    void setGapTimeGetFlag(android.content.Context,int) -> setGapTimeGetFlag
    void setGapTimeSendCacheData(long) -> setGapTimeSendCacheData
    java.lang.String getClientId(android.content.Context) -> getClientId
    void setClientId(java.lang.String,android.content.Context) -> setClientId
    void initWithClientId(android.content.Context,java.lang.String,java.lang.String) -> initWithClientId
    void <clinit>() -> <clinit>
com.adhoc.adhocsdk.AdhocTracker$1 -> com.adhoc.d:
    android.content.Context val$context -> a
    java.lang.String val$key -> b
    double val$inc -> c
    void <init>(android.content.Context,java.lang.String,double) -> <init>
    void run() -> run
com.adhoc.adhocsdk.AdhocTracker$2 -> com.adhoc.e:
    android.content.Context val$context -> a
    java.lang.String val$key -> b
    int val$inc -> c
    void <init>(android.content.Context,java.lang.String,int) -> <init>
    void run() -> run
com.adhoc.adhocsdk.AdhocTracker$3 -> com.adhoc.f:
    android.content.Context val$context -> a
    java.lang.String val$key -> b
    long val$inc -> c
    void <init>(android.content.Context,java.lang.String,long) -> <init>
    void run() -> run
com.adhoc.adhocsdk.AdhocTracker$4 -> com.adhoc.g:
    android.content.Context val$context -> a
    java.lang.String val$key -> b
    float val$inc -> c
    void <init>(android.content.Context,java.lang.String,float) -> <init>
    void run() -> run
com.adhoc.adhocsdk.AdhocTracker$5 -> com.adhoc.h:
    android.app.Activity val$context -> a
    void <init>(android.app.Activity) -> <init>
    void run() -> run
com.adhoc.adhocsdk.AdhocTracker$6 -> com.adhoc.i:
    android.content.Context val$context -> a
    java.lang.String val$client_id -> b
    void <init>(android.content.Context,java.lang.String) -> <init>
    void run() -> run
com.adhoc.adhocsdk.AdhocTracker$7 -> com.adhoc.j:
    int[] $SwitchMap$com$adhoc$utils$Utils$NetWorkState -> a
    void <clinit>() -> <clinit>
com.adhoc.adhocsdk.AdhocWindowCallback -> com.adhoc.k:
    android.view.Window$Callback callback -> a
    android.view.WindowManager windowManager -> b
    android.app.Activity context -> c
    boolean dialogIsOnscreen -> d
    void setContext(android.app.Activity) -> a
    void destory() -> a
    void <init>(android.view.Window$Callback) -> <init>
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean dispatchKeyShortcutEvent(android.view.KeyEvent) -> dispatchKeyShortcutEvent
    boolean dispatchTouchEvent(android.view.MotionEvent) -> dispatchTouchEvent
    boolean dispatchTrackballEvent(android.view.MotionEvent) -> dispatchTrackballEvent
    boolean dispatchGenericMotionEvent(android.view.MotionEvent) -> dispatchGenericMotionEvent
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.View onCreatePanelView(int) -> onCreatePanelView
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    boolean onMenuOpened(int,android.view.Menu) -> onMenuOpened
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onWindowAttributesChanged(android.view.WindowManager$LayoutParams) -> onWindowAttributesChanged
    void onContentChanged() -> onContentChanged
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    boolean onSearchRequested() -> onSearchRequested
    android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback) -> onWindowStartingActionMode
    void onActionModeStarted(android.view.ActionMode) -> onActionModeStarted
    void onActionModeFinished(android.view.ActionMode) -> onActionModeFinished
    void setWindowManager(android.view.WindowManager) -> a
    java.util.ArrayList isDialog(android.view.View[]) -> a
com.adhoc.adhocsdk.AutoStatClickEvent -> com.adhoc.l:
    com.adhoc.adhocsdk.AutoStatClickEvent ourInstance -> a
    com.adhoc.adhocsdk.AutoStatClickEvent getInstance() -> a
    void <init>() -> <init>
    java.util.List getClickViews(android.app.Activity,float,float) -> a
    java.util.List getAllChildViews(android.view.View) -> a
    java.lang.String getShowViewsStrings(java.util.List) -> a
    void autoTracking(android.content.Context,android.view.MotionEvent) -> a
    java.util.List access$000(com.adhoc.adhocsdk.AutoStatClickEvent,android.app.Activity,float,float) -> a
    java.lang.String access$100(com.adhoc.adhocsdk.AutoStatClickEvent,java.util.List) -> a
    void <clinit>() -> <clinit>
com.adhoc.adhocsdk.AutoStatClickEvent$1 -> com.adhoc.m:
    android.content.Context val$mContext -> a
    android.view.MotionEvent val$event -> b
    com.adhoc.adhocsdk.AutoStatClickEvent this$0 -> c
    void <init>(com.adhoc.adhocsdk.AutoStatClickEvent,android.content.Context,android.view.MotionEvent) -> <init>
    void run() -> run
com.adhoc.adhocsdk.BuildParameters -> com.adhoc.n:
    com.adhoc.adhocsdk.BuildParameters mInstance -> a
    java.lang.String mClientId -> b
    android.content.Context mContext -> c
    org.json.JSONObject mSummary -> d
    org.json.JSONObject customPara -> e
    com.adhoc.adhocsdk.BuildParameters getInstance(android.content.Context) -> a
    void makeCustomPara(java.util.HashMap) -> a
    org.json.JSONObject buildParametersBasic() -> a
    org.json.JSONObject getTrackparaJson(android.content.Context,org.json.JSONObject,java.util.HashMap) -> a
    void <init>(android.content.Context) -> <init>
    void getBasicParameters() -> b
com.adhoc.adhocsdk.ClientImpl -> com.adhoc.o:
    int TIMEOUT -> a
    void <clinit>() -> <clinit>
com.adhoc.adhocsdk.CrashHandler -> com.adhoc.p:
    java.lang.Thread$UncaughtExceptionHandler defaultHandler -> a
    com.adhoc.adhocsdk.CrashHandler instance -> b
    android.content.Context context -> c
    boolean ENABLE -> d
    void setEnable(boolean) -> a
    void <init>() -> <init>
    com.adhoc.adhocsdk.CrashHandler getInstance() -> a
    void run(android.content.Context) -> a
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
com.adhoc.adhocsdk.Experiment -> com.adhoc.q:
    java.lang.String id -> a
    java.lang.String name -> b
    java.util.HashMap usedFlags -> c
    boolean isUpdate -> d
    boolean isAllcalled -> e
    void <init>() -> <init>
    java.lang.String getName() -> a
    void setName(java.lang.String) -> a
    java.util.HashMap getUsedFlags() -> b
    void setCalled(java.lang.String) -> b
    java.lang.String getId() -> c
    void setId(java.lang.String) -> c
    boolean checkAllCalled() -> d
    void initKeys(java.lang.String,boolean) -> a
    boolean isUpdate() -> e
    void setIsUpdate(boolean) -> a
    boolean isAllcalled() -> f
    void setIsAllcalled(boolean) -> b
    boolean checkIsCalled(java.lang.String) -> d
com.adhoc.adhocsdk.ExperimentFlags -> com.adhoc.adhocsdk.ExperimentFlags:
    org.json.JSONObject mFlags -> mFlags
    java.lang.String flagState -> flagState
    org.json.JSONObject getRawFlags() -> getRawFlags
    void <init>(org.json.JSONObject) -> <init>
    boolean has(java.lang.String) -> has
    boolean getBooleanFlag(java.lang.String,boolean) -> getBooleanFlag
    int getIntegerFlag(java.lang.String,int) -> getIntegerFlag
    double getDoubleFlag(java.lang.String,double) -> getDoubleFlag
    double getFloatFlag(java.lang.String,float) -> getFloatFlag
    long getLongFlag(java.lang.String,long) -> getLongFlag
    java.lang.String getStringFlag(java.lang.String,java.lang.String) -> getStringFlag
    java.lang.String getFlagState() -> getFlagState
    void setFlagState(java.lang.String) -> setFlagState
    java.lang.String toString() -> toString
com.adhoc.adhocsdk.ExperimentFlags$ExperimentFlagsState -> com.adhoc.r:
    com.adhoc.adhocsdk.ExperimentFlags$ExperimentFlagsState EXPERIMENT_OK -> a
    com.adhoc.adhocsdk.ExperimentFlags$ExperimentFlagsState EXPERIMENT_NULL -> b
    com.adhoc.adhocsdk.ExperimentFlags$ExperimentFlagsState[] $VALUES -> c
    com.adhoc.adhocsdk.ExperimentFlags$ExperimentFlagsState[] values() -> values
    com.adhoc.adhocsdk.ExperimentFlags$ExperimentFlagsState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.adhoc.adhocsdk.ExperimentUtils -> com.adhoc.s:
    com.adhoc.adhocsdk.ExperimentUtils instance -> a
    android.content.Context context -> b
    java.util.HashMap exps -> c
    java.util.HashMap currentExpeiriment -> d
    com.adhoc.adhocsdk.ExperimentUtils getInstance() -> a
    void <init>() -> <init>
    boolean flagAreCalled(java.lang.String) -> a
    void setContext(android.content.Context) -> a
    void setCalled(java.lang.String) -> b
    void setShareExperiment() -> b
    void reportRenderRequest(org.json.JSONObject,java.lang.String) -> a
    boolean checkSingleFlagIsCalled(java.lang.String) -> c
    void loadLocalExperiments() -> c
    void updateExperiments(org.json.JSONObject) -> a
    com.adhoc.adhocsdk.Experiment addElement(org.json.JSONObject) -> b
    com.adhoc.adhocsdk.Experiment addElementFromNetWork(org.json.JSONObject) -> c
    org.json.JSONArray getExperimetnsStrs() -> d
    org.json.JSONArray getCurrentExperimetnsStrs() -> e
    java.lang.Double getAllValue(android.content.Context,java.lang.String,java.lang.String) -> a
    java.lang.Double saveAllvalue(android.content.Context,java.lang.String,java.lang.String,java.lang.Object,java.lang.Double) -> a
    void <clinit>() -> <clinit>
com.adhoc.adhocsdk.FileHandler -> com.adhoc.t:
    com.adhoc.adhocsdk.FileHandler instance -> a
    com.adhoc.adhocsdk.FileHandler getInstance() -> a
    void <init>() -> <init>
    void clearFileContent(android.content.Context,java.lang.String) -> a
    java.util.ArrayList readCacheLines(android.content.Context,java.lang.String) -> b
    java.io.File checkExist(android.content.Context,java.lang.String) -> c
    boolean writeCacheLines(android.content.Context,java.lang.String,java.lang.String) -> a
com.adhoc.adhocsdk.GetDrawingCache -> com.adhoc.u:
    void onGetDrawingCache(org.json.JSONObject,android.graphics.Bitmap) -> a
com.adhoc.adhocsdk.GetExperimentFlag -> com.adhoc.v:
    com.adhoc.adhocsdk.GetExperimentFlag ourInstance -> b
    int GAPTIME -> c
    long t1_last_getFlagfrom_network -> d
    boolean neeedRefreshRightNow -> a
    android.content.Context mContext -> e
    com.adhoc.adhocsdk.ExperimentFlags mFlags -> f
    android.os.Handler handler -> g
    void setGapTime(int) -> a
    com.adhoc.adhocsdk.GetExperimentFlag getInstance(android.content.Context) -> a
    void getAutoExperiment(android.content.Context,com.adhoc.adhocsdk.HttpCallBack) -> a
    void getExperimentFlagsTimeOut(int) -> b
    void getExperimentFlagsTimeOut(int,com.adhoc.adhocsdk.OnAdHocReceivedData) -> a
    void sendCallBack(com.adhoc.adhocsdk.OnAdHocReceivedData,android.os.Handler,com.adhoc.adhocsdk.ExperimentFlags) -> a
    void getExperimentFlags(com.adhoc.adhocsdk.OnAdHocReceivedData) -> a
    com.adhoc.adhocsdk.ExperimentFlags getExperimentFlags(android.content.Context) -> b
    void getNewestFlagsFromServer(android.content.Context) -> c
    void <init>(android.content.Context) -> <init>
    com.adhoc.adhocsdk.ExperimentFlags getLocalFlags() -> a
    org.json.JSONObject getLocalAutoExperiment() -> b
    java.lang.String getlocalFlagsString() -> c
    org.json.JSONObject saveSharePrefFlags(org.json.JSONObject) -> a
    org.json.JSONObject access$000(com.adhoc.adhocsdk.GetExperimentFlag,org.json.JSONObject) -> a
    android.content.Context access$100(com.adhoc.adhocsdk.GetExperimentFlag) -> a
    com.adhoc.adhocsdk.ExperimentFlags access$202(com.adhoc.adhocsdk.GetExperimentFlag,com.adhoc.adhocsdk.ExperimentFlags) -> a
    com.adhoc.adhocsdk.ExperimentFlags access$300(com.adhoc.adhocsdk.GetExperimentFlag) -> b
    android.os.Handler access$400(com.adhoc.adhocsdk.GetExperimentFlag) -> c
    com.adhoc.adhocsdk.ExperimentFlags access$200(com.adhoc.adhocsdk.GetExperimentFlag) -> d
    void access$500(com.adhoc.adhocsdk.GetExperimentFlag,com.adhoc.adhocsdk.OnAdHocReceivedData,android.os.Handler,com.adhoc.adhocsdk.ExperimentFlags) -> a
    void <clinit>() -> <clinit>
com.adhoc.adhocsdk.GetExperimentFlag$1 -> com.adhoc.w:
    com.adhoc.adhocsdk.HttpCallBack val$callBack -> a
    com.adhoc.adhocsdk.GetExperimentFlag this$0 -> b
    void <init>(com.adhoc.adhocsdk.GetExperimentFlag,com.adhoc.adhocsdk.HttpCallBack) -> <init>
    void onFailure(com.adhoc.http.Request,java.io.IOException) -> a
    void onResponse(com.adhoc.http.Response) -> a
com.adhoc.adhocsdk.GetExperimentFlag$2 -> com.adhoc.x:
    int val$timeout -> a
    com.adhoc.adhocsdk.OnAdHocReceivedData val$listener -> b
    com.adhoc.adhocsdk.GetExperimentFlag this$0 -> c
    void <init>(com.adhoc.adhocsdk.GetExperimentFlag,int,com.adhoc.adhocsdk.OnAdHocReceivedData) -> <init>
    void onFailure(com.adhoc.http.Request,java.io.IOException) -> a
    void onResponse(com.adhoc.http.Response) -> a
com.adhoc.adhocsdk.GetExperimentFlag$3 -> com.adhoc.y:
    com.adhoc.adhocsdk.OnAdHocReceivedData val$listener -> a
    com.adhoc.adhocsdk.ExperimentFlags val$flags -> b
    com.adhoc.adhocsdk.GetExperimentFlag this$0 -> c
    void <init>(com.adhoc.adhocsdk.GetExperimentFlag,com.adhoc.adhocsdk.OnAdHocReceivedData,com.adhoc.adhocsdk.ExperimentFlags) -> <init>
    void run() -> run
com.adhoc.adhocsdk.GetExperimentFlag$4 -> com.adhoc.z:
    com.adhoc.adhocsdk.GetExperimentFlag this$0 -> a
    void <init>(com.adhoc.adhocsdk.GetExperimentFlag) -> <init>
    void onFailure(com.adhoc.http.Request,java.io.IOException) -> a
    void onResponse(com.adhoc.http.Response) -> a
com.adhoc.adhocsdk.HttpCallBack -> com.adhoc.aa:
    void onFailure(java.lang.Throwable) -> a
    void onSuccess(org.json.JSONObject) -> a
com.adhoc.adhocsdk.IncrementStat -> com.adhoc.ab:
    com.adhoc.adhocsdk.IncrementStat ourInstance -> b
    boolean onlyWifiSend -> c
    long GAP_SEND_2_SERVER -> d
    boolean sending -> e
    android.content.BroadcastReceiver receiver -> a
    com.adhoc.adhocsdk.IncrementStat getInstance() -> a
    void setOnlyWifiSend(boolean) -> a
    void setGAP_SEND_2_SERVER(long) -> a
    void registerBrocast(android.content.Context) -> a
    void <init>() -> <init>
    void incrementStatObj(android.content.Context,java.lang.String,java.lang.Object,long,org.json.JSONArray) -> a
    void saveCache(android.content.Context,org.json.JSONObject) -> a
    void sendCacheReqeust(android.content.Context) -> b
    void send(org.json.JSONObject,android.content.Context) -> a
    boolean access$002(com.adhoc.adhocsdk.IncrementStat,boolean) -> a
    long access$100(com.adhoc.adhocsdk.IncrementStat) -> a
    void access$200(com.adhoc.adhocsdk.IncrementStat,org.json.JSONObject,android.content.Context) -> a
    void access$300(com.adhoc.adhocsdk.IncrementStat,android.content.Context,org.json.JSONObject) -> a
    void <clinit>() -> <clinit>
com.adhoc.adhocsdk.IncrementStat$1 -> com.adhoc.ac:
    android.content.Context val$context -> a
    com.adhoc.adhocsdk.IncrementStat this$0 -> b
    void <init>(com.adhoc.adhocsdk.IncrementStat,android.content.Context) -> <init>
    void run() -> run
com.adhoc.adhocsdk.IncrementStat$2 -> com.adhoc.ad:
    com.adhoc.adhocsdk.IncrementStat this$0 -> a
    void <init>(com.adhoc.adhocsdk.IncrementStat) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.adhoc.adhocsdk.IncrementStat$3 -> com.adhoc.ae:
    android.content.Context val$context -> a
    org.json.JSONObject val$reqobj -> b
    com.adhoc.adhocsdk.IncrementStat this$0 -> c
    void <init>(com.adhoc.adhocsdk.IncrementStat,android.content.Context,org.json.JSONObject) -> <init>
    void onFailure(com.adhoc.http.Request,java.io.IOException) -> a
    void onResponse(com.adhoc.http.Response) -> a
com.adhoc.adhocsdk.IncrementStat$4 -> com.adhoc.af:
    int[] $SwitchMap$com$adhoc$utils$Utils$NetWorkState -> a
    void <clinit>() -> <clinit>
com.adhoc.adhocsdk.OnAdHocReceivedData -> com.adhoc.adhocsdk.OnAdHocReceivedData:
    void onReceivedData(com.adhoc.adhocsdk.ExperimentFlags) -> onReceivedData
com.adhoc.adhocsdk.PageActivityStat -> com.adhoc.ag:
    com.adhoc.adhocsdk.PageActivityStat ourInstance -> b
    boolean run -> a
    java.util.ArrayList list -> c
    com.adhoc.adhocsdk.PageActivityStat$ActivityStatBean from -> d
    com.adhoc.adhocsdk.PageActivityStat$ActivityStatBean to -> e
    com.adhoc.adhocsdk.PageActivityStat getInstance() -> a
    void <init>() -> <init>
    void sendRequest(android.content.Context) -> a
    void OnResume(android.content.Context) -> b
    void OnPause(android.content.Context) -> c
    void onDestory(android.content.Context) -> d
    void sendRequest2Menu(android.content.Context) -> e
    void <clinit>() -> <clinit>
com.adhoc.adhocsdk.PageActivityStat$ActivityStatBean -> com.adhoc.ah:
    java.lang.String name -> b
    long t1 -> c
    int id -> d
    com.adhoc.adhocsdk.PageActivityStat this$0 -> a
    void <init>(com.adhoc.adhocsdk.PageActivityStat) -> <init>
    int access$000(com.adhoc.adhocsdk.PageActivityStat$ActivityStatBean) -> a
    long access$100(com.adhoc.adhocsdk.PageActivityStat$ActivityStatBean) -> b
    java.lang.String access$200(com.adhoc.adhocsdk.PageActivityStat$ActivityStatBean) -> c
    java.lang.String access$202(com.adhoc.adhocsdk.PageActivityStat$ActivityStatBean,java.lang.String) -> a
    long access$102(com.adhoc.adhocsdk.PageActivityStat$ActivityStatBean,long) -> a
    int access$002(com.adhoc.adhocsdk.PageActivityStat$ActivityStatBean,int) -> a
com.adhoc.adhocsdk.ParameterUtils -> com.adhoc.ai:
    org.json.JSONObject getSummary(android.content.Context) -> a
    void getAdhocVersion(org.json.JSONObject) -> b
    void getOSVersionName(android.content.Context,org.json.JSONObject) -> b
    void getOSVersion(org.json.JSONObject) -> c
    java.lang.String exec(java.lang.String) -> b
    boolean checkPermission(android.content.Context,java.lang.String) -> a
    void getOsPlatform(org.json.JSONObject) -> a
    void getPackageName(android.content.Context,org.json.JSONObject) -> c
    void getAppVersion(android.content.Context,org.json.JSONObject) -> d
    int getAppVersionCode(android.content.Context) -> b
    void getScreenSize(android.content.res.Configuration,org.json.JSONObject) -> a
    java.lang.String getDeviceName() -> a
    java.lang.String capitalize(java.lang.String) -> a
    void getDeviceModel(org.json.JSONObject,java.lang.String) -> a
    void getOSSdkVersion(org.json.JSONObject) -> d
    void getDisplayWidth(android.util.DisplayMetrics,org.json.JSONObject) -> a
    void getDisplayHeight(android.util.DisplayMetrics,org.json.JSONObject) -> b
    void getLanguage(android.content.res.Configuration,org.json.JSONObject) -> b
    void getCountry(android.content.res.Configuration,org.json.JSONObject) -> c
    void getlocale(android.content.res.Configuration,org.json.JSONObject) -> d
    void getAndroidId(android.content.Context,org.json.JSONObject) -> e
    android.net.wifi.WifiInfo getWifiInfo(android.content.Context) -> d
    void getNetworkConnectionInfo(android.content.Context,org.json.JSONObject) -> a
    void getWifiMac(android.net.wifi.WifiInfo,org.json.JSONObject) -> a
    java.lang.String getNetworkConnectionState(android.content.Context) -> c
com.adhoc.adhocsdk.R -> com.adhoc.adhocsdk.R:
    void <init>() -> <init>
com.adhoc.adhocsdk.R$attr -> com.adhoc.adhocsdk.R$attr:
    void <init>() -> <init>
com.adhoc.adhocsdk.R$drawable -> com.adhoc.adhocsdk.R$drawable:
    int ic_launcher -> ic_launcher
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.adhoc.adhocsdk.R$string -> com.adhoc.adhocsdk.R$string:
    int app_name -> app_name
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.adhoc.adhocsdk.R$style -> com.adhoc.adhocsdk.R$style:
    int AppBaseTheme -> AppBaseTheme
    int AppTheme -> AppTheme
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.adhoc.adhocsdk.RealScreen -> com.adhoc.aj:
    com.adhoc.adhocsdk.RealScreen ourInstance -> e
    boolean EDIT_MODE -> a
    com.adhoc.nkzawa.socketio.client.Socket mSocket -> f
    android.content.Context context -> g
    android.app.Activity currentActivity -> h
    boolean uping -> i
    org.json.JSONObject jsonObject -> j
    org.json.JSONObject oldJsonObject -> k
    long uploadGapTime -> l
    long lastcaptureTime -> m
    java.lang.String lastScreen -> n
    int reconnectTimes -> o
    java.util.HashMap drawables -> p
    boolean reset -> b
    android.view.ViewTreeObserver$OnGlobalLayoutListener viewDrawChange -> q
    boolean isTesterDevices -> r
    boolean isEditing -> c
    boolean login -> d
    com.adhoc.nkzawa.emitter.Emitter$Listener loginFail -> s
    com.adhoc.nkzawa.emitter.Emitter$Listener loginSuccess -> t
    com.adhoc.nkzawa.emitter.Emitter$Listener picture_ok -> u
    com.adhoc.nkzawa.emitter.Emitter$Listener picture_reset -> v
    com.adhoc.nkzawa.emitter.Emitter$Listener onRealTime -> w
    com.adhoc.nkzawa.emitter.Emitter$Listener onRefresh -> x
    void saveDrawable(com.adhoc.beans.ChangeBean,java.lang.String,android.graphics.drawable.Drawable) -> a
    android.graphics.drawable.Drawable getDrawable(java.lang.String) -> a
    void killapp(android.app.Activity) -> a
    void <init>(android.content.Context) -> <init>
    void initInstance() -> d
    void startConnect() -> e
    void execSendPic(java.lang.String) -> b
    void sendPicRealTime(android.app.Activity,int) -> a
    void connect2Sever() -> a
    void readTesterSetting(android.content.Context) -> a
    void connect() -> f
    void switchVersion(java.lang.String) -> c
    void reset(org.json.JSONObject) -> a
    void rollingOverOldValue(org.json.JSONObject) -> b
    void randerNewVersion(org.json.JSONObject) -> c
    com.adhoc.adhocsdk.RealScreen getInstance(android.content.Context) -> b
    void closeConnection() -> g
    void recycle() -> h
    void writePackage(android.app.Activity) -> b
    android.app.Activity access$000(com.adhoc.adhocsdk.RealScreen) -> a
    android.app.Activity access$002(com.adhoc.adhocsdk.RealScreen,android.app.Activity) -> a
    void access$100(com.adhoc.adhocsdk.RealScreen) -> b
    android.view.ViewTreeObserver$OnGlobalLayoutListener access$200(com.adhoc.adhocsdk.RealScreen) -> c
    org.json.JSONObject access$300(com.adhoc.adhocsdk.RealScreen) -> d
    void access$400(com.adhoc.adhocsdk.RealScreen,org.json.JSONObject) -> a
    org.json.JSONObject access$500(com.adhoc.adhocsdk.RealScreen) -> e
    boolean access$600(com.adhoc.adhocsdk.RealScreen) -> f
    void access$700(com.adhoc.adhocsdk.RealScreen) -> g
    void access$800(com.adhoc.adhocsdk.RealScreen) -> h
    void access$900(com.adhoc.adhocsdk.RealScreen,android.app.Activity) -> b
    void access$1100(com.adhoc.adhocsdk.RealScreen,java.lang.String) -> a
    void access$1200(com.adhoc.adhocsdk.RealScreen,java.lang.String) -> b
    int access$1300() -> b
    int access$1308() -> c
    void access$1400(com.adhoc.adhocsdk.RealScreen) -> i
    boolean access$1502(com.adhoc.adhocsdk.RealScreen,boolean) -> a
    java.lang.String access$1600(com.adhoc.adhocsdk.RealScreen) -> j
    java.lang.String access$1602(com.adhoc.adhocsdk.RealScreen,java.lang.String) -> c
    boolean access$1500(com.adhoc.adhocsdk.RealScreen) -> k
    org.json.JSONObject access$502(com.adhoc.adhocsdk.RealScreen,org.json.JSONObject) -> b
    void <clinit>() -> <clinit>
com.adhoc.adhocsdk.RealScreen$1 -> com.adhoc.ak:
    com.adhoc.adhocsdk.RealScreen this$0 -> a
    void <init>(com.adhoc.adhocsdk.RealScreen) -> <init>
    void onGlobalLayout() -> onGlobalLayout
com.adhoc.adhocsdk.RealScreen$10 -> com.adhoc.al:
    com.adhoc.adhocsdk.RealScreen this$0 -> a
    void <init>(com.adhoc.adhocsdk.RealScreen) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.adhocsdk.RealScreen$11 -> com.adhoc.am:
    com.adhoc.adhocsdk.RealScreen this$0 -> a
    void <init>(com.adhoc.adhocsdk.RealScreen) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.adhocsdk.RealScreen$12 -> com.adhoc.an:
    com.adhoc.adhocsdk.RealScreen this$0 -> a
    void <init>(com.adhoc.adhocsdk.RealScreen) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.adhocsdk.RealScreen$13 -> com.adhoc.ao:
    com.adhoc.adhocsdk.RealScreen this$0 -> a
    void <init>(com.adhoc.adhocsdk.RealScreen) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.adhocsdk.RealScreen$14 -> com.adhoc.ap:
    com.adhoc.adhocsdk.RealScreen this$0 -> a
    void <init>(com.adhoc.adhocsdk.RealScreen) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.adhocsdk.RealScreen$2 -> com.adhoc.aq:
    com.adhoc.adhocsdk.RealScreen this$0 -> a
    void <init>(com.adhoc.adhocsdk.RealScreen) -> <init>
    void onGetDrawingCache(org.json.JSONObject,android.graphics.Bitmap) -> a
com.adhoc.adhocsdk.RealScreen$2$1 -> com.adhoc.ar:
    android.graphics.Bitmap val$compressedmap -> a
    org.json.JSONObject val$screenData -> b
    com.adhoc.adhocsdk.RealScreen$2 this$1 -> c
    void <init>(com.adhoc.adhocsdk.RealScreen$2,android.graphics.Bitmap,org.json.JSONObject) -> <init>
    void run() -> run
com.adhoc.adhocsdk.RealScreen$3 -> com.adhoc.as:
    com.adhoc.adhocsdk.RealScreen this$0 -> a
    void <init>(com.adhoc.adhocsdk.RealScreen) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.adhocsdk.RealScreen$4 -> com.adhoc.at:
    com.adhoc.adhocsdk.RealScreen this$0 -> a
    void <init>(com.adhoc.adhocsdk.RealScreen) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.adhocsdk.RealScreen$5 -> com.adhoc.au:
    com.adhoc.adhocsdk.RealScreen this$0 -> a
    void <init>(com.adhoc.adhocsdk.RealScreen) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.adhocsdk.RealScreen$6 -> com.adhoc.av:
    com.adhoc.adhocsdk.RealScreen this$0 -> a
    void <init>(com.adhoc.adhocsdk.RealScreen) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.adhocsdk.RealScreen$7 -> com.adhoc.aw:
    com.adhoc.adhocsdk.RealScreen this$0 -> a
    void <init>(com.adhoc.adhocsdk.RealScreen) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.adhocsdk.RealScreen$8 -> com.adhoc.ax:
    com.adhoc.adhocsdk.RealScreen this$0 -> a
    void <init>(com.adhoc.adhocsdk.RealScreen) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.adhocsdk.RealScreen$8$1 -> com.adhoc.ay:
    com.adhoc.adhocsdk.RealScreen$8 this$1 -> a
    void <init>(com.adhoc.adhocsdk.RealScreen$8) -> <init>
    void run() -> run
com.adhoc.adhocsdk.RealScreen$9 -> com.adhoc.az:
    com.adhoc.adhocsdk.RealScreen this$0 -> a
    void <init>(com.adhoc.adhocsdk.RealScreen) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.adhocsdk.RealScreen$9$1 -> com.adhoc.ba:
    com.adhoc.adhocsdk.RealScreen$9 this$1 -> a
    void <init>(com.adhoc.adhocsdk.RealScreen$9,android.os.Looper) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
com.adhoc.adhocsdk.RealScreen$lifecycleCallbacks -> com.adhoc.bb:
    com.adhoc.adhocsdk.RealScreen this$0 -> a
    void <init>(com.adhoc.adhocsdk.RealScreen) -> <init>
    void onActivityCreated(android.app.Activity,android.os.Bundle) -> onActivityCreated
    void onActivityStarted(android.app.Activity) -> onActivityStarted
    void onActivityResumed(android.app.Activity) -> onActivityResumed
    void onActivityPaused(android.app.Activity) -> onActivityPaused
    void onActivityStopped(android.app.Activity) -> onActivityStopped
    void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle) -> onActivitySaveInstanceState
    void onActivityDestroyed(android.app.Activity) -> onActivityDestroyed
    void <init>(com.adhoc.adhocsdk.RealScreen,com.adhoc.adhocsdk.RealScreen$1) -> <init>
com.adhoc.adhocsdk.Rendering -> com.adhoc.bc:
    com.adhoc.adhocsdk.Rendering ourInstance -> c
    java.util.HashMap windowsCallbacks -> d
    android.app.Activity mCurrentActivity -> e
    android.content.Context context -> f
    java.lang.String experimentId -> a
    java.util.HashMap srcClickListener -> g
    org.json.JSONObject jsonObject -> h
    java.util.HashMap map -> i
    java.util.HashMap statusActivity -> j
    com.adhoc.pic.Target target -> b
    int current_item -> k
    int versionCodeApp -> l
    org.json.JSONObject getJsonObject() -> a
    android.app.Activity getmCurrentActivity() -> b
    void rendering(org.json.JSONObject,java.lang.String,android.view.View,boolean) -> a
    void saveClickListener(com.adhoc.beans.StatsBean,android.view.View$OnClickListener) -> a
    boolean hasAlreadySetListener(java.lang.String) -> a
    void setStats(java.lang.String,com.adhoc.beans.StatsBean[],android.view.View) -> a
    void setNormalViews(java.lang.String,com.adhoc.beans.ChangeBean[],android.view.View) -> a
    void setListViewItems(java.lang.String,com.adhoc.beans.ChangeBean[],android.view.View,boolean) -> a
    void setAbsListObser(com.adhoc.adhocsdk.AbsListBean,android.widget.AbsListView,boolean) -> a
    void setListValues(java.util.ArrayList,android.widget.AbsListView,android.app.Activity) -> a
    com.adhoc.beans.Rowbean getRowbyChangeBean(com.adhoc.beans.ChangeBean) -> a
    void combine(com.adhoc.beans.ChangeBean[]) -> a
    void dealRenderNormarlView(java.lang.String,com.adhoc.beans.ChangeBean,android.view.View) -> a
    void dealRenderListView(android.view.View,android.app.Activity,com.adhoc.beans.ChangeBean,com.adhoc.beans.Rowbean) -> a
    void exec(android.view.View,com.adhoc.beans.ChangeBean) -> a
    void normalRender(android.app.Activity) -> a
    void setViewImage(com.adhoc.beans.PropertyBean,android.view.View,java.lang.String,com.adhoc.beans.ChangeBean) -> a
    android.view.View getTargetView(java.lang.String,android.view.View,com.adhoc.beans.PositionBean[]) -> a
    android.view.View getListView(java.lang.String,com.adhoc.beans.PositionBean[],android.view.View) -> a
    android.view.View getChildView_v1(android.view.View,com.adhoc.beans.PositionBean) -> a
    com.adhoc.beans.ChangeBean[] getChangeBeans(java.lang.String,org.json.JSONObject,boolean) -> a
    com.adhoc.beans.PropertyBean[] getPropertiesBean(org.json.JSONArray) -> a
    com.adhoc.beans.PositionBean[] getPositionsBeans(com.adhoc.beans.ChangeBean,org.json.JSONArray) -> a
    com.adhoc.beans.StatsBean[] getStatBean(java.lang.String,org.json.JSONObject) -> a
    void <init>(android.content.Context) -> <init>
    void init() -> c
    com.adhoc.adhocsdk.Rendering getInstance(android.content.Context) -> a
    android.app.Activity access$000(com.adhoc.adhocsdk.Rendering) -> a
    void access$100(com.adhoc.adhocsdk.Rendering,java.util.ArrayList,android.widget.AbsListView,android.app.Activity) -> a
    org.json.JSONObject access$200(com.adhoc.adhocsdk.Rendering) -> b
    android.app.Activity access$002(com.adhoc.adhocsdk.Rendering,android.app.Activity) -> a
    java.util.HashMap access$300() -> d
    java.util.HashMap access$400() -> e
    void access$500(com.adhoc.adhocsdk.Rendering,android.app.Activity) -> b
    android.content.Context access$600(com.adhoc.adhocsdk.Rendering) -> c
    void <clinit>() -> <clinit>
com.adhoc.adhocsdk.Rendering$1 -> com.adhoc.bd:
    java.util.ArrayList val$changeBeans -> a
    android.widget.AbsListView val$listView -> b
    com.adhoc.adhocsdk.Rendering this$0 -> c
    void <init>(com.adhoc.adhocsdk.Rendering,java.util.ArrayList,android.widget.AbsListView) -> <init>
    void run() -> run
com.adhoc.adhocsdk.Rendering$2 -> com.adhoc.be:
    boolean val$isDialog -> a
    com.adhoc.adhocsdk.Rendering this$0 -> b
    void <init>(com.adhoc.adhocsdk.Rendering,boolean) -> <init>
    void onChanged() -> onChanged
com.adhoc.adhocsdk.Rendering$3 -> com.adhoc.bf:
    android.app.Activity val$activity -> a
    com.adhoc.adhocsdk.Rendering this$0 -> b
    void <init>(com.adhoc.adhocsdk.Rendering,android.app.Activity) -> <init>
    void onFailure(java.lang.Throwable) -> a
    void onSuccess(org.json.JSONObject) -> a
com.adhoc.adhocsdk.Rendering$4 -> com.adhoc.bg:
    java.lang.String val$valueBackground -> a
    android.view.View val$view -> b
    com.adhoc.adhocsdk.Rendering this$0 -> c
    void <init>(com.adhoc.adhocsdk.Rendering,java.lang.String,android.view.View) -> <init>
    void onBitmapLoaded(android.graphics.Bitmap,com.adhoc.pic.Picasso$LoadedFrom) -> a
    void onBitmapFailed(android.graphics.drawable.Drawable) -> a
    void onPrepareLoad(android.graphics.drawable.Drawable) -> b
com.adhoc.adhocsdk.Rendering$5 -> com.adhoc.bh:
    int[] $SwitchMap$android$text$TextUtils$TruncateAt -> a
    int[] $SwitchMap$com$adhoc$property$Properties -> b
    int[] $SwitchMap$com$adhoc$property$Types -> c
    void <clinit>() -> <clinit>
com.adhoc.adhocsdk.Rendering$OnscrollListener -> com.adhoc.bi:
    java.util.ArrayList changeBeans -> d
    com.adhoc.adhocsdk.Rendering this$0 -> a
    void setChangeBeans(java.util.ArrayList) -> a
    void <init>(com.adhoc.adhocsdk.Rendering,android.app.Activity) -> <init>
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
com.adhoc.adhocsdk.Rendering$RenderHandler -> com.adhoc.bj:
    android.app.Activity context -> a
    org.json.JSONObject real -> b
    android.view.View dialogView -> c
    void <init>(android.app.Activity,org.json.JSONObject) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
    void setView(android.view.View) -> a
com.adhoc.adhocsdk.Rendering$RenderHandlerNormal -> com.adhoc.bk:
    android.app.Activity context -> a
    org.json.JSONObject real -> b
    void <init>(android.app.Activity,org.json.JSONObject) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
com.adhoc.adhocsdk.Rendering$RenderingViewChange -> com.adhoc.bl:
    android.app.Activity activity -> b
    com.adhoc.adhocsdk.Rendering this$0 -> a
    void <init>(com.adhoc.adhocsdk.Rendering,android.app.Activity) -> <init>
    void onDestory() -> a
    void onGlobalLayout() -> onGlobalLayout
com.adhoc.adhocsdk.Rendering$lifecycleCallbacks -> com.adhoc.bm:
    com.adhoc.adhocsdk.Rendering$RenderingViewChange changeListener -> b
    com.adhoc.adhocsdk.Rendering this$0 -> a
    void <init>(com.adhoc.adhocsdk.Rendering) -> <init>
    void onActivityCreated(android.app.Activity,android.os.Bundle) -> onActivityCreated
    void onActivityStarted(android.app.Activity) -> onActivityStarted
    void onActivityResumed(android.app.Activity) -> onActivityResumed
    void onActivityPaused(android.app.Activity) -> onActivityPaused
    void onActivityStopped(android.app.Activity) -> onActivityStopped
    void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle) -> onActivitySaveInstanceState
    void onActivityDestroyed(android.app.Activity) -> onActivityDestroyed
    void <init>(com.adhoc.adhocsdk.Rendering,com.adhoc.adhocsdk.Rendering$1) -> <init>
com.adhoc.adhocsdk.SDcardHandler -> com.adhoc.bn:
    com.adhoc.adhocsdk.SDcardHandler instance -> a
    android.content.Context mContext -> b
    java.lang.String getAdhocFileDir() -> d
    void <init>(android.content.Context) -> <init>
    com.adhoc.adhocsdk.SDcardHandler getInstance(android.content.Context) -> a
    java.lang.String readFile() -> a
    java.lang.String readFile(java.lang.String) -> d
    boolean writeFile(java.lang.String) -> a
    boolean writeFile(java.lang.String,java.lang.String) -> b
    boolean hasSdcard() -> b
    java.util.ArrayList readApps(java.lang.String) -> b
    boolean writeFileAppend(java.lang.String,java.lang.String) -> a
    java.lang.String readEditString() -> c
    boolean writeEditString(java.lang.String) -> c
com.adhoc.adhocsdk.ScreenShot -> com.adhoc.bo:
    com.adhoc.adhocsdk.ScreenShot instance -> a
    void <init>() -> <init>
    com.adhoc.adhocsdk.ScreenShot getInstance() -> a
    android.graphics.Bitmap compressByQuality(android.graphics.Bitmap) -> a
    void sendDataPicRealTime(android.app.Activity,com.adhoc.adhocsdk.GetDrawingCache,int) -> a
com.adhoc.adhocsdk.ScreenShot$RealScreenHandler -> com.adhoc.bp:
    android.app.Activity activity -> a
    com.adhoc.adhocsdk.GetDrawingCache getDrawingCache -> b
    void <init>(android.os.Looper,android.app.Activity,com.adhoc.adhocsdk.GetDrawingCache) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
    org.json.JSONObject getViewTree(android.view.View[]) -> a
    org.json.JSONObject getViewTree(android.view.View) -> a
    android.graphics.Bitmap mergeBitmap(android.graphics.Bitmap,android.graphics.Bitmap,int,int) -> a
    void captureScreen(android.view.View[],org.json.JSONObject) -> a
    void captureScreen(org.json.JSONObject) -> a
com.adhoc.adhocsdk.ScrollAbsViewListener -> com.adhoc.bq:
    void <init>(android.app.Activity) -> <init>
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
com.adhoc.adhocsdk.ScrollAbslistview -> com.adhoc.br:
    android.app.Activity activity -> b
    android.widget.AbsListView$OnScrollListener oldListener -> c
    void setOldListener(android.widget.AbsListView$OnScrollListener) -> a
    void <init>(android.app.Activity) -> <init>
com.adhoc.adhocsdk.StatFragment -> com.adhoc.bs:
    android.content.Context context -> c
    com.adhoc.adhocsdk.StatFragment ourInstance -> d
    boolean resumeForeground -> a
    java.util.ArrayList listenedActivitys -> e
    java.util.ArrayList list -> b
    com.adhoc.adhocsdk.StatFragment$FragmentStatBean from -> f
    com.adhoc.adhocsdk.StatFragment$FragmentStatBean to -> g
    com.adhoc.adhocsdk.StatFragment getInstance() -> a
    void <init>() -> <init>
    void dump() -> b
    boolean ifVisiable(java.lang.Object) -> b
    boolean fatherIsVisiable(java.lang.Object) -> c
    java.lang.Object getParentObj(java.lang.Object) -> d
    void reMoveParents() -> c
    boolean isParent(java.lang.Object,java.util.ArrayList) -> a
    java.util.ArrayList getParents() -> d
    void add(android.content.Context,java.lang.Object) -> a
    boolean checkListened(java.lang.String) -> a
    void onFragmentDestory(java.lang.Object) -> a
    void onBack2Menu(android.content.Context) -> a
    void sendRequest(android.content.Context) -> b
    void on2MenuSendStay(android.content.Context) -> c
    void access$000(com.adhoc.adhocsdk.StatFragment) -> a
    boolean access$100(com.adhoc.adhocsdk.StatFragment,java.lang.Object) -> a
    boolean access$200(com.adhoc.adhocsdk.StatFragment,java.lang.Object) -> b
    com.adhoc.adhocsdk.StatFragment$FragmentStatBean access$302(com.adhoc.adhocsdk.StatFragment,com.adhoc.adhocsdk.StatFragment$FragmentStatBean) -> a
    com.adhoc.adhocsdk.StatFragment$FragmentStatBean access$300(com.adhoc.adhocsdk.StatFragment) -> b
    android.content.Context access$700(com.adhoc.adhocsdk.StatFragment) -> c
    void <clinit>() -> <clinit>
com.adhoc.adhocsdk.StatFragment$1 -> com.adhoc.bt:
    com.adhoc.adhocsdk.StatFragment this$0 -> a
    void <init>(com.adhoc.adhocsdk.StatFragment) -> <init>
    void run() -> run
com.adhoc.adhocsdk.StatFragment$FragmentStatBean -> com.adhoc.bu:
    java.lang.String name -> b
    long t1 -> c
    int id -> d
    com.adhoc.adhocsdk.StatFragment this$0 -> a
    void <init>(com.adhoc.adhocsdk.StatFragment) -> <init>
    int access$402(com.adhoc.adhocsdk.StatFragment$FragmentStatBean,int) -> a
    java.lang.String access$502(com.adhoc.adhocsdk.StatFragment$FragmentStatBean,java.lang.String) -> a
    long access$602(com.adhoc.adhocsdk.StatFragment$FragmentStatBean,long) -> a
    java.lang.String access$500(com.adhoc.adhocsdk.StatFragment$FragmentStatBean) -> a
    int access$400(com.adhoc.adhocsdk.StatFragment$FragmentStatBean) -> b
    long access$600(com.adhoc.adhocsdk.StatFragment$FragmentStatBean) -> c
com.adhoc.adhocsdk.StatFragment$ViewDrawChange -> com.adhoc.bv:
    long lastTime -> a
    com.adhoc.adhocsdk.StatFragment this$0 -> b
    void <init>(com.adhoc.adhocsdk.StatFragment) -> <init>
    void onGlobalLayout() -> onGlobalLayout
    void <init>(com.adhoc.adhocsdk.StatFragment,com.adhoc.adhocsdk.StatFragment$1) -> <init>
com.adhoc.beans.ChangeBean -> com.adhoc.bw:
    com.adhoc.beans.PropertyBean[] properties -> a
    com.adhoc.beans.PositionBean[] positions -> b
    boolean isAbsListView -> c
    boolean isDialog -> d
    java.lang.String mapKey -> e
    void <init>() -> <init>
    void setIsDialog(boolean) -> a
    com.adhoc.beans.PropertyBean[] getProperties() -> a
    void setProperties(com.adhoc.beans.PropertyBean[]) -> a
    com.adhoc.beans.PositionBean[] getPositions() -> b
    void setPositions(com.adhoc.beans.PositionBean[]) -> a
    boolean isAbsListView() -> c
    void setIsAbsListView(boolean) -> b
    java.lang.String getMapKey() -> d
    void setMapKey(java.lang.String) -> a
com.adhoc.beans.PositionBean -> com.adhoc.bx:
    int pos -> a
    int curitem -> b
    int row -> c
    int offset -> d
    java.lang.String activity -> e
    java.lang.String view -> f
    void <init>() -> <init>
    void setOffset(int) -> a
    java.lang.String getActivity() -> a
    void setActivity(java.lang.String) -> a
    java.lang.String getView() -> b
    void setView(java.lang.String) -> b
    int getPos() -> c
    void setPos(int) -> b
    int getRow() -> d
    void setRow(int) -> c
    int getCuritem() -> e
    void setCuritem(int) -> d
com.adhoc.beans.PropertyBean -> com.adhoc.by:
    java.lang.String property -> a
    java.lang.String type -> b
    java.lang.String value -> c
    java.lang.String old_value -> d
    boolean changed -> e
    void <init>() -> <init>
    java.lang.String getOld_value() -> a
    void setOld_value(java.lang.String) -> a
    java.lang.String getProperty() -> b
    void setProperty(java.lang.String) -> b
    java.lang.String getType() -> c
    void setType(java.lang.String) -> c
    java.lang.String getValue() -> d
    void setValue(java.lang.String) -> d
com.adhoc.beans.Rowbean -> com.adhoc.bz:
    int row -> a
    int index -> b
    void <init>() -> <init>
    int getRow() -> a
    void setRow(int) -> a
    int getIndex() -> b
    void setIndex(int) -> b
com.adhoc.beans.StatsBean -> com.adhoc.ca:
    java.lang.String statsKey -> a
    boolean dialog -> b
    com.adhoc.beans.PositionBean[] positions -> c
    java.lang.String mapKey -> d
    void <init>() -> <init>
    void setDialog(boolean) -> a
    java.lang.String getStatsKey() -> a
    void setStatsKey(java.lang.String) -> a
    com.adhoc.beans.PositionBean[] getPositions() -> b
    void setPositions(com.adhoc.beans.PositionBean[]) -> a
    java.lang.String getMapKey() -> c
    void setMapKey(java.lang.String) -> b
com.adhoc.http.Address -> com.adhoc.cb:
    java.net.Proxy proxy -> a
    java.lang.String uriHost -> b
    int uriPort -> c
    javax.net.SocketFactory socketFactory -> d
    javax.net.ssl.SSLSocketFactory sslSocketFactory -> e
    javax.net.ssl.HostnameVerifier hostnameVerifier -> f
    com.adhoc.http.CertificatePinner certificatePinner -> g
    com.adhoc.http.Authenticator authenticator -> h
    java.util.List protocols -> i
    java.util.List connectionSpecs -> j
    java.net.ProxySelector proxySelector -> k
    void <init>(java.lang.String,int,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,com.adhoc.http.CertificatePinner,com.adhoc.http.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector) -> <init>
    java.lang.String getUriHost() -> a
    int getUriPort() -> b
    javax.net.SocketFactory getSocketFactory() -> c
    javax.net.ssl.SSLSocketFactory getSslSocketFactory() -> d
    javax.net.ssl.HostnameVerifier getHostnameVerifier() -> e
    com.adhoc.http.Authenticator getAuthenticator() -> f
    java.util.List getProtocols() -> g
    java.util.List getConnectionSpecs() -> h
    java.net.Proxy getProxy() -> i
    java.net.ProxySelector getProxySelector() -> j
    com.adhoc.http.CertificatePinner getCertificatePinner() -> k
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.adhoc.http.Authenticator -> com.adhoc.cc:
    com.adhoc.http.Request authenticate(java.net.Proxy,com.adhoc.http.Response) -> a
    com.adhoc.http.Request authenticateProxy(java.net.Proxy,com.adhoc.http.Response) -> b
com.adhoc.http.Cache -> com.adhoc.cd:
    com.adhoc.http.internal.InternalCache internalCache -> a
    com.adhoc.http.internal.DiskLruCache cache -> b
    int writeSuccessCount -> c
    int writeAbortCount -> d
    int networkCount -> e
    int hitCount -> f
    int requestCount -> g
    void <init>(java.io.File,long) -> <init>
    void <init>(java.io.File,long,com.adhoc.http.internal.io.FileSystem) -> <init>
    java.lang.String urlToKey(com.adhoc.http.Request) -> b
    com.adhoc.http.Response get(com.adhoc.http.Request) -> a
    com.adhoc.http.internal.http.CacheRequest put(com.adhoc.http.Response) -> a
    void remove(com.adhoc.http.Request) -> c
    void update(com.adhoc.http.Response,com.adhoc.http.Response) -> a
    void abortQuietly(com.adhoc.http.internal.DiskLruCache$Editor) -> a
    void trackResponse(com.adhoc.http.internal.http.CacheStrategy) -> a
    void trackConditionalCacheHit() -> a
    int readInt(com.adhoc.io.BufferedSource) -> b
    com.adhoc.http.internal.http.CacheRequest access$000(com.adhoc.http.Cache,com.adhoc.http.Response) -> a
    void access$100(com.adhoc.http.Cache,com.adhoc.http.Request) -> a
    void access$200(com.adhoc.http.Cache,com.adhoc.http.Response,com.adhoc.http.Response) -> a
    void access$300(com.adhoc.http.Cache) -> a
    void access$400(com.adhoc.http.Cache,com.adhoc.http.internal.http.CacheStrategy) -> a
    int access$808(com.adhoc.http.Cache) -> b
    int access$908(com.adhoc.http.Cache) -> c
    int access$1000(com.adhoc.io.BufferedSource) -> a
com.adhoc.http.Cache$1 -> com.adhoc.ce:
    com.adhoc.http.Cache this$0 -> a
    void <init>(com.adhoc.http.Cache) -> <init>
    com.adhoc.http.Response get(com.adhoc.http.Request) -> a
    com.adhoc.http.internal.http.CacheRequest put(com.adhoc.http.Response) -> a
    void remove(com.adhoc.http.Request) -> b
    void update(com.adhoc.http.Response,com.adhoc.http.Response) -> a
    void trackConditionalCacheHit() -> a
    void trackResponse(com.adhoc.http.internal.http.CacheStrategy) -> a
com.adhoc.http.Cache$CacheRequestImpl -> com.adhoc.cf:
    com.adhoc.http.internal.DiskLruCache$Editor editor -> b
    com.adhoc.io.Sink cacheOut -> c
    boolean done -> d
    com.adhoc.io.Sink body -> e
    com.adhoc.http.Cache this$0 -> a
    void <init>(com.adhoc.http.Cache,com.adhoc.http.internal.DiskLruCache$Editor) -> <init>
    void abort() -> a
    com.adhoc.io.Sink body() -> b
    boolean access$700(com.adhoc.http.Cache$CacheRequestImpl) -> a
    boolean access$702(com.adhoc.http.Cache$CacheRequestImpl,boolean) -> a
com.adhoc.http.Cache$CacheRequestImpl$1 -> com.adhoc.cg:
    com.adhoc.http.Cache val$this$0 -> a
    com.adhoc.http.internal.DiskLruCache$Editor val$editor -> b
    com.adhoc.http.Cache$CacheRequestImpl this$1 -> c
    void <init>(com.adhoc.http.Cache$CacheRequestImpl,com.adhoc.io.Sink,com.adhoc.http.Cache,com.adhoc.http.internal.DiskLruCache$Editor) -> <init>
    void close() -> close
com.adhoc.http.Cache$CacheResponseBody -> com.adhoc.ch:
    com.adhoc.http.internal.DiskLruCache$Snapshot snapshot -> a
    com.adhoc.io.BufferedSource bodySource -> b
    java.lang.String contentType -> c
    java.lang.String contentLength -> d
    void <init>(com.adhoc.http.internal.DiskLruCache$Snapshot,java.lang.String,java.lang.String) -> <init>
    com.adhoc.http.MediaType contentType() -> a
    long contentLength() -> b
    com.adhoc.io.BufferedSource source() -> c
    com.adhoc.http.internal.DiskLruCache$Snapshot access$500(com.adhoc.http.Cache$CacheResponseBody) -> a
com.adhoc.http.Cache$CacheResponseBody$1 -> com.adhoc.ci:
    com.adhoc.http.internal.DiskLruCache$Snapshot val$snapshot -> a
    com.adhoc.http.Cache$CacheResponseBody this$0 -> b
    void <init>(com.adhoc.http.Cache$CacheResponseBody,com.adhoc.io.Source,com.adhoc.http.internal.DiskLruCache$Snapshot) -> <init>
    void close() -> close
com.adhoc.http.Cache$Entry -> com.adhoc.cj:
    java.lang.String url -> a
    com.adhoc.http.Headers varyHeaders -> b
    java.lang.String requestMethod -> c
    com.adhoc.http.Protocol protocol -> d
    int code -> e
    java.lang.String message -> f
    com.adhoc.http.Headers responseHeaders -> g
    com.adhoc.http.Handshake handshake -> h
    void <init>(com.adhoc.io.Source) -> <init>
    void <init>(com.adhoc.http.Response) -> <init>
    void writeTo(com.adhoc.http.internal.DiskLruCache$Editor) -> a
    boolean isHttps() -> a
    java.util.List readCertificateList(com.adhoc.io.BufferedSource) -> a
    void writeCertList(com.adhoc.io.BufferedSink,java.util.List) -> a
    boolean matches(com.adhoc.http.Request,com.adhoc.http.Response) -> a
    com.adhoc.http.Response response(com.adhoc.http.Request,com.adhoc.http.internal.DiskLruCache$Snapshot) -> a
com.adhoc.http.CacheControl -> com.adhoc.ck:
    com.adhoc.http.CacheControl FORCE_NETWORK -> a
    com.adhoc.http.CacheControl FORCE_CACHE -> b
    boolean noCache -> d
    boolean noStore -> e
    int maxAgeSeconds -> f
    int sMaxAgeSeconds -> g
    boolean isPrivate -> h
    boolean isPublic -> i
    boolean mustRevalidate -> j
    int maxStaleSeconds -> k
    int minFreshSeconds -> l
    boolean onlyIfCached -> m
    boolean noTransform -> n
    java.lang.String headerValue -> c
    void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String) -> <init>
    void <init>(com.adhoc.http.CacheControl$Builder) -> <init>
    boolean noCache() -> a
    boolean noStore() -> b
    int maxAgeSeconds() -> c
    boolean isPrivate() -> d
    boolean isPublic() -> e
    boolean mustRevalidate() -> f
    int maxStaleSeconds() -> g
    int minFreshSeconds() -> h
    boolean onlyIfCached() -> i
    com.adhoc.http.CacheControl parse(com.adhoc.http.Headers) -> a
    java.lang.String toString() -> toString
    java.lang.String headerValue() -> j
    void <init>(com.adhoc.http.CacheControl$Builder,com.adhoc.http.CacheControl$1) -> <init>
    void <clinit>() -> <clinit>
com.adhoc.http.CacheControl$1 -> com.adhoc.cl:
com.adhoc.http.CacheControl$Builder -> com.adhoc.cm:
    boolean noCache -> a
    boolean noStore -> b
    int maxAgeSeconds -> c
    int maxStaleSeconds -> d
    int minFreshSeconds -> e
    boolean onlyIfCached -> f
    boolean noTransform -> g
    void <init>() -> <init>
    com.adhoc.http.CacheControl$Builder noCache() -> a
    com.adhoc.http.CacheControl$Builder noStore() -> b
    com.adhoc.http.CacheControl$Builder maxStale(int,java.util.concurrent.TimeUnit) -> a
    com.adhoc.http.CacheControl$Builder onlyIfCached() -> c
    com.adhoc.http.CacheControl build() -> d
com.adhoc.http.Call -> com.adhoc.cn:
    com.adhoc.http.OkHttpClient client -> d
    boolean executed -> e
    boolean canceled -> a
    com.adhoc.http.Request originalRequest -> b
    com.adhoc.http.internal.http.HttpEngine engine -> c
    void <init>(com.adhoc.http.OkHttpClient,com.adhoc.http.Request) -> <init>
    com.adhoc.http.Response execute() -> a
    void enqueue(com.adhoc.http.Callback) -> a
    void enqueue(com.adhoc.http.Callback,boolean) -> a
    void cancel() -> b
    java.lang.String toLoggableString() -> c
    com.adhoc.http.Response getResponseWithInterceptorChain(boolean) -> a
    com.adhoc.http.Response getResponse(com.adhoc.http.Request,boolean) -> a
    com.adhoc.http.Response access$100(com.adhoc.http.Call,boolean) -> a
    java.lang.String access$200(com.adhoc.http.Call) -> a
    com.adhoc.http.OkHttpClient access$300(com.adhoc.http.Call) -> b
com.adhoc.http.Call$1 -> com.adhoc.co:
com.adhoc.http.Call$ApplicationInterceptorChain -> com.adhoc.cp:
    int index -> b
    com.adhoc.http.Request request -> c
    boolean forWebSocket -> d
    com.adhoc.http.Call this$0 -> a
    void <init>(com.adhoc.http.Call,int,com.adhoc.http.Request,boolean) -> <init>
    com.adhoc.http.Response proceed(com.adhoc.http.Request) -> a
com.adhoc.http.Call$AsyncCall -> com.adhoc.cq:
    com.adhoc.http.Callback responseCallback -> c
    boolean forWebSocket -> d
    com.adhoc.http.Call this$0 -> a
    void <init>(com.adhoc.http.Call,com.adhoc.http.Callback,boolean) -> <init>
    java.lang.String host() -> a
    void execute() -> b
    void <init>(com.adhoc.http.Call,com.adhoc.http.Callback,boolean,com.adhoc.http.Call$1) -> <init>
com.adhoc.http.Callback -> com.adhoc.cr:
    void onFailure(com.adhoc.http.Request,java.io.IOException) -> a
    void onResponse(com.adhoc.http.Response) -> a
com.adhoc.http.CertificatePinner -> com.adhoc.cs:
    com.adhoc.http.CertificatePinner DEFAULT -> a
    java.util.Map hostnameToPins -> b
    void <init>(com.adhoc.http.CertificatePinner$Builder) -> <init>
    void check(java.lang.String,java.util.List) -> a
    java.util.Set findMatchingPins(java.lang.String) -> a
    java.lang.String pin(java.security.cert.Certificate) -> a
    com.adhoc.io.ByteString sha1(java.security.cert.X509Certificate) -> a
    void <init>(com.adhoc.http.CertificatePinner$Builder,com.adhoc.http.CertificatePinner$1) -> <init>
    void <clinit>() -> <clinit>
com.adhoc.http.CertificatePinner$1 -> com.adhoc.ct:
com.adhoc.http.CertificatePinner$Builder -> com.adhoc.cu:
    java.util.Map hostnameToPins -> a
    void <init>() -> <init>
    com.adhoc.http.CertificatePinner build() -> a
    java.util.Map access$000(com.adhoc.http.CertificatePinner$Builder) -> a
com.adhoc.http.Challenge -> com.adhoc.cv:
    java.lang.String scheme -> a
    java.lang.String realm -> b
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getScheme() -> a
    java.lang.String getRealm() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.adhoc.http.CipherSuite -> com.adhoc.cw:
    com.adhoc.http.CipherSuite TLS_RSA_WITH_NULL_MD5 -> a
    com.adhoc.http.CipherSuite TLS_RSA_WITH_NULL_SHA -> b
    com.adhoc.http.CipherSuite TLS_RSA_EXPORT_WITH_RC4_40_MD5 -> c
    com.adhoc.http.CipherSuite TLS_RSA_WITH_RC4_128_MD5 -> d
    com.adhoc.http.CipherSuite TLS_RSA_WITH_RC4_128_SHA -> e
    com.adhoc.http.CipherSuite TLS_RSA_EXPORT_WITH_DES40_CBC_SHA -> f
    com.adhoc.http.CipherSuite TLS_RSA_WITH_DES_CBC_SHA -> g
    com.adhoc.http.CipherSuite TLS_RSA_WITH_3DES_EDE_CBC_SHA -> h
    com.adhoc.http.CipherSuite TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA -> i
    com.adhoc.http.CipherSuite TLS_DHE_DSS_WITH_DES_CBC_SHA -> j
    com.adhoc.http.CipherSuite TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA -> k
    com.adhoc.http.CipherSuite TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA -> l
    com.adhoc.http.CipherSuite TLS_DHE_RSA_WITH_DES_CBC_SHA -> m
    com.adhoc.http.CipherSuite TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA -> n
    com.adhoc.http.CipherSuite TLS_DH_anon_EXPORT_WITH_RC4_40_MD5 -> o
    com.adhoc.http.CipherSuite TLS_DH_anon_WITH_RC4_128_MD5 -> p
    com.adhoc.http.CipherSuite TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA -> q
    com.adhoc.http.CipherSuite TLS_DH_anon_WITH_DES_CBC_SHA -> r
    com.adhoc.http.CipherSuite TLS_DH_anon_WITH_3DES_EDE_CBC_SHA -> s
    com.adhoc.http.CipherSuite TLS_KRB5_WITH_DES_CBC_SHA -> t
    com.adhoc.http.CipherSuite TLS_KRB5_WITH_3DES_EDE_CBC_SHA -> u
    com.adhoc.http.CipherSuite TLS_KRB5_WITH_RC4_128_SHA -> v
    com.adhoc.http.CipherSuite TLS_KRB5_WITH_DES_CBC_MD5 -> w
    com.adhoc.http.CipherSuite TLS_KRB5_WITH_3DES_EDE_CBC_MD5 -> x
    com.adhoc.http.CipherSuite TLS_KRB5_WITH_RC4_128_MD5 -> y
    com.adhoc.http.CipherSuite TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA -> z
    com.adhoc.http.CipherSuite TLS_KRB5_EXPORT_WITH_RC4_40_SHA -> A
    com.adhoc.http.CipherSuite TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5 -> B
    com.adhoc.http.CipherSuite TLS_KRB5_EXPORT_WITH_RC4_40_MD5 -> C
    com.adhoc.http.CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA -> D
    com.adhoc.http.CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA -> E
    com.adhoc.http.CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA -> F
    com.adhoc.http.CipherSuite TLS_DH_anon_WITH_AES_128_CBC_SHA -> G
    com.adhoc.http.CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA -> H
    com.adhoc.http.CipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA -> I
    com.adhoc.http.CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA -> J
    com.adhoc.http.CipherSuite TLS_DH_anon_WITH_AES_256_CBC_SHA -> K
    com.adhoc.http.CipherSuite TLS_RSA_WITH_NULL_SHA256 -> L
    com.adhoc.http.CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA256 -> M
    com.adhoc.http.CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA256 -> N
    com.adhoc.http.CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 -> O
    com.adhoc.http.CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 -> P
    com.adhoc.http.CipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 -> Q
    com.adhoc.http.CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 -> R
    com.adhoc.http.CipherSuite TLS_DH_anon_WITH_AES_128_CBC_SHA256 -> S
    com.adhoc.http.CipherSuite TLS_DH_anon_WITH_AES_256_CBC_SHA256 -> T
    com.adhoc.http.CipherSuite TLS_RSA_WITH_AES_128_GCM_SHA256 -> U
    com.adhoc.http.CipherSuite TLS_RSA_WITH_AES_256_GCM_SHA384 -> V
    com.adhoc.http.CipherSuite TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 -> W
    com.adhoc.http.CipherSuite TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 -> X
    com.adhoc.http.CipherSuite TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 -> Y
    com.adhoc.http.CipherSuite TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 -> Z
    com.adhoc.http.CipherSuite TLS_DH_anon_WITH_AES_128_GCM_SHA256 -> aa
    com.adhoc.http.CipherSuite TLS_DH_anon_WITH_AES_256_GCM_SHA384 -> ab
    com.adhoc.http.CipherSuite TLS_EMPTY_RENEGOTIATION_INFO_SCSV -> ac
    com.adhoc.http.CipherSuite TLS_ECDH_ECDSA_WITH_NULL_SHA -> ad
    com.adhoc.http.CipherSuite TLS_ECDH_ECDSA_WITH_RC4_128_SHA -> ae
    com.adhoc.http.CipherSuite TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA -> af
    com.adhoc.http.CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA -> ag
    com.adhoc.http.CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA -> ah
    com.adhoc.http.CipherSuite TLS_ECDHE_ECDSA_WITH_NULL_SHA -> ai
    com.adhoc.http.CipherSuite TLS_ECDHE_ECDSA_WITH_RC4_128_SHA -> aj
    com.adhoc.http.CipherSuite TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA -> ak
    com.adhoc.http.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA -> al
    com.adhoc.http.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA -> am
    com.adhoc.http.CipherSuite TLS_ECDH_RSA_WITH_NULL_SHA -> an
    com.adhoc.http.CipherSuite TLS_ECDH_RSA_WITH_RC4_128_SHA -> ao
    com.adhoc.http.CipherSuite TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA -> ap
    com.adhoc.http.CipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA -> aq
    com.adhoc.http.CipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA -> ar
    com.adhoc.http.CipherSuite TLS_ECDHE_RSA_WITH_NULL_SHA -> as
    com.adhoc.http.CipherSuite TLS_ECDHE_RSA_WITH_RC4_128_SHA -> at
    com.adhoc.http.CipherSuite TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA -> au
    com.adhoc.http.CipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA -> av
    com.adhoc.http.CipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA -> aw
    com.adhoc.http.CipherSuite TLS_ECDH_anon_WITH_NULL_SHA -> ax
    com.adhoc.http.CipherSuite TLS_ECDH_anon_WITH_RC4_128_SHA -> ay
    com.adhoc.http.CipherSuite TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA -> az
    com.adhoc.http.CipherSuite TLS_ECDH_anon_WITH_AES_128_CBC_SHA -> aA
    com.adhoc.http.CipherSuite TLS_ECDH_anon_WITH_AES_256_CBC_SHA -> aB
    com.adhoc.http.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 -> aC
    com.adhoc.http.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 -> aD
    com.adhoc.http.CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 -> aE
    com.adhoc.http.CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 -> aF
    com.adhoc.http.CipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 -> aG
    com.adhoc.http.CipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 -> aH
    com.adhoc.http.CipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 -> aI
    com.adhoc.http.CipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 -> aJ
    com.adhoc.http.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 -> aK
    com.adhoc.http.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 -> aL
    com.adhoc.http.CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 -> aM
    com.adhoc.http.CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 -> aN
    com.adhoc.http.CipherSuite TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 -> aO
    com.adhoc.http.CipherSuite TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 -> aP
    com.adhoc.http.CipherSuite TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 -> aQ
    com.adhoc.http.CipherSuite TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 -> aR
    java.lang.String javaName -> aS
    com.adhoc.http.CipherSuite[] $VALUES -> aT
    com.adhoc.http.CipherSuite[] values() -> values
    com.adhoc.http.CipherSuite valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String,int,int,int,int) -> <init>
    com.adhoc.http.CipherSuite forJavaName(java.lang.String) -> a
    void <clinit>() -> <clinit>
com.adhoc.http.Connection -> com.adhoc.cx:
    com.adhoc.http.ConnectionPool pool -> a
    com.adhoc.http.Route route -> b
    java.net.Socket socket -> c
    boolean connected -> d
    com.adhoc.http.internal.http.HttpConnection httpConnection -> e
    com.adhoc.http.internal.framed.FramedConnection framedConnection -> f
    com.adhoc.http.Protocol protocol -> g
    long idleStartTimeNs -> h
    com.adhoc.http.Handshake handshake -> i
    int recycleCount -> j
    java.lang.Object owner -> k
    void <init>(com.adhoc.http.ConnectionPool,com.adhoc.http.Route) -> <init>
    void setOwner(java.lang.Object) -> a
    boolean clearOwner() -> a
    void closeIfOwnedBy(java.lang.Object) -> b
    void connect(int,int,int,com.adhoc.http.Request,java.util.List,boolean) -> a
    void connectSocket(int,int,int,com.adhoc.http.Request,com.adhoc.http.internal.ConnectionSpecSelector) -> a
    void connectTls(int,int,com.adhoc.http.Request,com.adhoc.http.internal.ConnectionSpecSelector) -> a
    void createTunnel(int,int,com.adhoc.http.Request) -> a
    com.adhoc.http.Request createTunnelRequest(com.adhoc.http.Request) -> a
    void connectAndSetOwner(com.adhoc.http.OkHttpClient,java.lang.Object,com.adhoc.http.Request) -> a
    boolean isConnected() -> b
    com.adhoc.http.Route getRoute() -> c
    java.net.Socket getSocket() -> d
    com.adhoc.io.BufferedSource rawSource() -> e
    com.adhoc.io.BufferedSink rawSink() -> f
    boolean isAlive() -> g
    boolean isReadable() -> h
    void resetIdleStartTime() -> i
    boolean isIdle() -> j
    long getIdleStartTimeNs() -> k
    com.adhoc.http.Handshake getHandshake() -> l
    com.adhoc.http.internal.http.Transport newTransport(com.adhoc.http.internal.http.HttpEngine) -> a
    boolean isFramed() -> m
    com.adhoc.http.Protocol getProtocol() -> n
    void setProtocol(com.adhoc.http.Protocol) -> a
    void setTimeouts(int,int) -> a
    void incrementRecycleCount() -> o
    int recycleCount() -> p
    java.lang.String toString() -> toString
com.adhoc.http.ConnectionPool -> com.adhoc.cy:
    com.adhoc.http.ConnectionPool systemDefault -> a
    int maxIdleConnections -> b
    long keepAliveDurationNs -> c
    java.util.LinkedList connections -> d
    java.util.concurrent.Executor executor -> e
    java.lang.Runnable connectionsCleanupRunnable -> f
    void <init>(int,long) -> <init>
    com.adhoc.http.ConnectionPool getDefault() -> a
    com.adhoc.http.Connection get(com.adhoc.http.Address) -> a
    void recycle(com.adhoc.http.Connection) -> a
    void addConnection(com.adhoc.http.Connection) -> c
    void share(com.adhoc.http.Connection) -> b
    void runCleanupUntilPoolIsEmpty() -> c
    boolean performCleanup() -> b
    void access$000(com.adhoc.http.ConnectionPool) -> a
    void <clinit>() -> <clinit>
com.adhoc.http.ConnectionPool$1 -> com.adhoc.cz:
    com.adhoc.http.ConnectionPool this$0 -> a
    void <init>(com.adhoc.http.ConnectionPool) -> <init>
    void run() -> run
com.adhoc.http.ConnectionSpec -> com.adhoc.da:
    com.adhoc.http.CipherSuite[] APPROVED_CIPHER_SUITES -> f
    com.adhoc.http.ConnectionSpec MODERN_TLS -> a
    com.adhoc.http.ConnectionSpec COMPATIBLE_TLS -> b
    com.adhoc.http.ConnectionSpec CLEARTEXT -> c
    boolean tls -> d
    java.lang.String[] cipherSuites -> g
    java.lang.String[] tlsVersions -> h
    boolean supportsTlsExtensions -> e
    void <init>(com.adhoc.http.ConnectionSpec$Builder) -> <init>
    java.util.List cipherSuites() -> a
    java.util.List tlsVersions() -> b
    boolean supportsTlsExtensions() -> c
    void apply(javax.net.ssl.SSLSocket,boolean) -> a
    com.adhoc.http.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean) -> b
    boolean isCompatible(javax.net.ssl.SSLSocket) -> a
    boolean nonEmptyIntersection(java.lang.String[],java.lang.String[]) -> a
    boolean contains(java.lang.Object[],java.lang.Object) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String[] access$400(com.adhoc.http.ConnectionSpec) -> a
    java.lang.String[] access$500(com.adhoc.http.ConnectionSpec) -> b
    void <init>(com.adhoc.http.ConnectionSpec$Builder,com.adhoc.http.ConnectionSpec$1) -> <init>
    void <clinit>() -> <clinit>
com.adhoc.http.ConnectionSpec$1 -> com.adhoc.db:
com.adhoc.http.ConnectionSpec$Builder -> com.adhoc.dc:
    boolean tls -> a
    java.lang.String[] cipherSuites -> b
    java.lang.String[] tlsVersions -> c
    boolean supportsTlsExtensions -> d
    void <init>(boolean) -> <init>
    void <init>(com.adhoc.http.ConnectionSpec) -> <init>
    com.adhoc.http.ConnectionSpec$Builder cipherSuites(com.adhoc.http.CipherSuite[]) -> a
    com.adhoc.http.ConnectionSpec$Builder cipherSuites(java.lang.String[]) -> a
    com.adhoc.http.ConnectionSpec$Builder tlsVersions(com.adhoc.http.TlsVersion[]) -> a
    com.adhoc.http.ConnectionSpec$Builder tlsVersions(java.lang.String[]) -> b
    com.adhoc.http.ConnectionSpec$Builder supportsTlsExtensions(boolean) -> a
    com.adhoc.http.ConnectionSpec build() -> a
    boolean access$000(com.adhoc.http.ConnectionSpec$Builder) -> a
    java.lang.String[] access$100(com.adhoc.http.ConnectionSpec$Builder) -> b
    java.lang.String[] access$200(com.adhoc.http.ConnectionSpec$Builder) -> c
    boolean access$300(com.adhoc.http.ConnectionSpec$Builder) -> d
com.adhoc.http.Credentials -> com.adhoc.dd:
    java.lang.String basic(java.lang.String,java.lang.String) -> a
com.adhoc.http.Dispatcher -> com.adhoc.de:
    int maxRequests -> a
    int maxRequestsPerHost -> b
    java.util.concurrent.ExecutorService executorService -> c
    java.util.Deque readyCalls -> d
    java.util.Deque runningCalls -> e
    java.util.Deque executedCalls -> f
    void <init>() -> <init>
    java.util.concurrent.ExecutorService getExecutorService() -> a
    void enqueue(com.adhoc.http.Call$AsyncCall) -> a
    void finished(com.adhoc.http.Call$AsyncCall) -> b
    void promoteCalls() -> b
    int runningCallsForHost(com.adhoc.http.Call$AsyncCall) -> c
    void executed(com.adhoc.http.Call) -> a
    void finished(com.adhoc.http.Call) -> b
com.adhoc.http.Handshake -> com.adhoc.df:
    java.lang.String cipherSuite -> a
    java.util.List peerCertificates -> b
    java.util.List localCertificates -> c
    void <init>(java.lang.String,java.util.List,java.util.List) -> <init>
    com.adhoc.http.Handshake get(javax.net.ssl.SSLSession) -> a
    com.adhoc.http.Handshake get(java.lang.String,java.util.List,java.util.List) -> a
    java.lang.String cipherSuite() -> a
    java.util.List peerCertificates() -> b
    java.util.List localCertificates() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.adhoc.http.Headers -> com.adhoc.dg:
    java.lang.String[] namesAndValues -> a
    void <init>(com.adhoc.http.Headers$Builder) -> <init>
    java.lang.String get(java.lang.String) -> a
    java.util.Date getDate(java.lang.String) -> b
    int size() -> a
    java.lang.String name(int) -> a
    java.lang.String value(int) -> b
    java.util.List values(java.lang.String) -> c
    com.adhoc.http.Headers$Builder newBuilder() -> b
    java.lang.String toString() -> toString
    java.util.Map toMultimap() -> c
    java.lang.String get(java.lang.String[],java.lang.String) -> a
    void <init>(com.adhoc.http.Headers$Builder,com.adhoc.http.Headers$1) -> <init>
com.adhoc.http.Headers$1 -> com.adhoc.dh:
com.adhoc.http.Headers$Builder -> com.adhoc.di:
    java.util.List namesAndValues -> a
    void <init>() -> <init>
    com.adhoc.http.Headers$Builder addLenient(java.lang.String) -> a
    com.adhoc.http.Headers$Builder add(java.lang.String,java.lang.String) -> a
    com.adhoc.http.Headers$Builder addLenient(java.lang.String,java.lang.String) -> b
    com.adhoc.http.Headers$Builder removeAll(java.lang.String) -> b
    com.adhoc.http.Headers$Builder set(java.lang.String,java.lang.String) -> c
    void checkNameAndValue(java.lang.String,java.lang.String) -> d
    com.adhoc.http.Headers build() -> a
    java.util.List access$000(com.adhoc.http.Headers$Builder) -> a
com.adhoc.http.HttpUrl -> com.adhoc.dj:
    char[] HEX_DIGITS -> a
    java.lang.String scheme -> b
    java.lang.String username -> c
    java.lang.String password -> d
    java.lang.String host -> e
    int port -> f
    java.util.List pathSegments -> g
    java.util.List queryNamesAndValues -> h
    java.lang.String fragment -> i
    java.lang.String url -> j
    void <init>(com.adhoc.http.HttpUrl$Builder) -> <init>
    java.net.URL url() -> a
    java.net.URI uri() -> b
    java.lang.String scheme() -> c
    boolean isHttps() -> d
    java.lang.String encodedUsername() -> e
    java.lang.String encodedPassword() -> f
    java.lang.String host() -> g
    int port() -> h
    int defaultPort(java.lang.String) -> a
    java.lang.String encodedPath() -> i
    void pathSegmentsToString(java.lang.StringBuilder,java.util.List) -> a
    java.util.List encodedPathSegments() -> j
    java.lang.String encodedQuery() -> k
    void namesAndValuesToQueryString(java.lang.StringBuilder,java.util.List) -> b
    java.util.List queryStringToNamesAndValues(java.lang.String) -> b
    java.lang.String query() -> l
    com.adhoc.http.HttpUrl resolve(java.lang.String) -> c
    com.adhoc.http.HttpUrl parse(java.lang.String) -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int delimiterOffset(java.lang.String,int,int,java.lang.String) -> b
    java.lang.String percentDecode(java.lang.String) -> e
    java.util.List percentDecode(java.util.List) -> a
    java.lang.String percentDecode(java.lang.String,int,int) -> a
    void percentDecode(com.adhoc.io.Buffer,java.lang.String,int,int) -> a
    int decodeHexDigit(char) -> a
    java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean) -> a
    void canonicalize(com.adhoc.io.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean) -> a
    java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean) -> a
    void <init>(com.adhoc.http.HttpUrl$Builder,com.adhoc.http.HttpUrl$1) -> <init>
    java.lang.String access$100(com.adhoc.http.HttpUrl) -> a
    int access$200(java.lang.String,int,int,java.lang.String) -> a
    java.lang.String access$300(com.adhoc.http.HttpUrl) -> b
    int access$400(com.adhoc.http.HttpUrl) -> c
    void <clinit>() -> <clinit>
com.adhoc.http.HttpUrl$1 -> com.adhoc.dk:
com.adhoc.http.HttpUrl$Builder -> com.adhoc.dl:
    java.lang.String scheme -> a
    java.lang.String encodedUsername -> b
    java.lang.String encodedPassword -> c
    java.lang.String host -> d
    int port -> e
    java.util.List encodedPathSegments -> f
    java.util.List encodedQueryNamesAndValues -> g
    java.lang.String encodedFragment -> h
    void <init>() -> <init>
    com.adhoc.http.HttpUrl$Builder scheme(java.lang.String) -> a
    com.adhoc.http.HttpUrl$Builder host(java.lang.String) -> b
    com.adhoc.http.HttpUrl$Builder port(int) -> a
    int effectivePort() -> a
    com.adhoc.http.HttpUrl$Builder encodedQuery(java.lang.String) -> c
    com.adhoc.http.HttpUrl build() -> b
    java.lang.String toString() -> toString
    com.adhoc.http.HttpUrl parse(com.adhoc.http.HttpUrl,java.lang.String) -> a
    void resolvePath(java.lang.String,int,int) -> a
    void push(java.lang.String,int,int,boolean,boolean) -> a
    boolean isDot(java.lang.String) -> d
    boolean isDotDot(java.lang.String) -> e
    void pop() -> c
    int skipLeadingAsciiWhitespace(java.lang.String,int,int) -> b
    int skipTrailingAsciiWhitespace(java.lang.String,int,int) -> c
    int schemeDelimiterOffset(java.lang.String,int,int) -> d
    int slashCount(java.lang.String,int,int) -> e
    int portColonOffset(java.lang.String,int,int) -> f
    java.lang.String canonicalizeHost(java.lang.String,int,int) -> g
    java.net.InetAddress decodeIpv6(java.lang.String,int,int) -> h
    boolean decodeIpv4Suffix(java.lang.String,int,int,byte[],int) -> a
    java.lang.String domainToAscii(java.lang.String) -> f
    java.lang.String inet6AddressToAscii(byte[]) -> a
    int parsePort(java.lang.String,int,int) -> i
com.adhoc.http.Interceptor -> com.adhoc.dm:
    com.adhoc.http.Response intercept(com.adhoc.http.Interceptor$Chain) -> a
com.adhoc.http.Interceptor$Chain -> com.adhoc.dn:
    com.adhoc.http.Response proceed(com.adhoc.http.Request) -> a
com.adhoc.http.MediaType -> com.adhoc.do:
    java.util.regex.Pattern TYPE_SUBTYPE -> a
    java.util.regex.Pattern PARAMETER -> b
    java.lang.String mediaType -> c
    java.lang.String type -> d
    java.lang.String subtype -> e
    java.lang.String charset -> f
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    com.adhoc.http.MediaType parse(java.lang.String) -> a
    java.nio.charset.Charset charset() -> a
    java.nio.charset.Charset charset(java.nio.charset.Charset) -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <clinit>() -> <clinit>
com.adhoc.http.OkHttpClient -> com.adhoc.dp:
    java.util.List DEFAULT_PROTOCOLS -> a
    java.util.List DEFAULT_CONNECTION_SPECS -> b
    javax.net.ssl.SSLSocketFactory defaultSslSocketFactory -> c
    com.adhoc.http.internal.RouteDatabase routeDatabase -> d
    com.adhoc.http.Dispatcher dispatcher -> e
    java.net.Proxy proxy -> f
    java.util.List protocols -> g
    java.util.List connectionSpecs -> h
    java.util.List interceptors -> i
    java.util.List networkInterceptors -> j
    java.net.ProxySelector proxySelector -> k
    java.net.CookieHandler cookieHandler -> l
    com.adhoc.http.internal.InternalCache internalCache -> m
    com.adhoc.http.Cache cache -> n
    javax.net.SocketFactory socketFactory -> o
    javax.net.ssl.SSLSocketFactory sslSocketFactory -> p
    javax.net.ssl.HostnameVerifier hostnameVerifier -> q
    com.adhoc.http.CertificatePinner certificatePinner -> r
    com.adhoc.http.Authenticator authenticator -> s
    com.adhoc.http.ConnectionPool connectionPool -> t
    com.adhoc.http.internal.Network network -> u
    boolean followSslRedirects -> v
    boolean followRedirects -> w
    boolean retryOnConnectionFailure -> x
    int connectTimeout -> y
    int readTimeout -> z
    int writeTimeout -> A
    void <init>() -> <init>
    void <init>(com.adhoc.http.OkHttpClient) -> <init>
    void setConnectTimeout(long,java.util.concurrent.TimeUnit) -> a
    int getConnectTimeout() -> a
    void setReadTimeout(long,java.util.concurrent.TimeUnit) -> b
    int getReadTimeout() -> b
    void setWriteTimeout(long,java.util.concurrent.TimeUnit) -> c
    int getWriteTimeout() -> c
    java.net.Proxy getProxy() -> d
    java.net.ProxySelector getProxySelector() -> e
    java.net.CookieHandler getCookieHandler() -> f
    com.adhoc.http.internal.InternalCache internalCache() -> g
    com.adhoc.http.OkHttpClient setCache(com.adhoc.http.Cache) -> a
    javax.net.SocketFactory getSocketFactory() -> h
    com.adhoc.http.OkHttpClient setSslSocketFactory(javax.net.ssl.SSLSocketFactory) -> a
    javax.net.ssl.SSLSocketFactory getSslSocketFactory() -> i
    com.adhoc.http.OkHttpClient setHostnameVerifier(javax.net.ssl.HostnameVerifier) -> a
    javax.net.ssl.HostnameVerifier getHostnameVerifier() -> j
    com.adhoc.http.CertificatePinner getCertificatePinner() -> k
    com.adhoc.http.Authenticator getAuthenticator() -> l
    com.adhoc.http.ConnectionPool getConnectionPool() -> m
    boolean getFollowSslRedirects() -> n
    boolean getFollowRedirects() -> o
    boolean getRetryOnConnectionFailure() -> p
    com.adhoc.http.internal.RouteDatabase routeDatabase() -> q
    com.adhoc.http.Dispatcher getDispatcher() -> r
    com.adhoc.http.OkHttpClient setProtocols(java.util.List) -> a
    java.util.List getProtocols() -> s
    java.util.List getConnectionSpecs() -> t
    java.util.List interceptors() -> u
    java.util.List networkInterceptors() -> v
    com.adhoc.http.Call newCall(com.adhoc.http.Request) -> a
    com.adhoc.http.OkHttpClient copyWithDefaults() -> w
    javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory() -> y
    com.adhoc.http.OkHttpClient clone() -> x
    java.lang.Object clone() -> clone
    com.adhoc.http.internal.Network access$000(com.adhoc.http.OkHttpClient) -> a
    void <clinit>() -> <clinit>
com.adhoc.http.OkHttpClient$1 -> com.adhoc.dq:
    void <init>() -> <init>
    com.adhoc.http.internal.http.Transport newTransport(com.adhoc.http.Connection,com.adhoc.http.internal.http.HttpEngine) -> a
    boolean clearOwner(com.adhoc.http.Connection) -> a
    void closeIfOwnedBy(com.adhoc.http.Connection,java.lang.Object) -> a
    int recycleCount(com.adhoc.http.Connection) -> b
    void setProtocol(com.adhoc.http.Connection,com.adhoc.http.Protocol) -> a
    void setOwner(com.adhoc.http.Connection,com.adhoc.http.internal.http.HttpEngine) -> b
    boolean isReadable(com.adhoc.http.Connection) -> c
    void addLenient(com.adhoc.http.Headers$Builder,java.lang.String) -> a
    com.adhoc.http.internal.InternalCache internalCache(com.adhoc.http.OkHttpClient) -> a
    void recycle(com.adhoc.http.ConnectionPool,com.adhoc.http.Connection) -> a
    com.adhoc.http.internal.RouteDatabase routeDatabase(com.adhoc.http.OkHttpClient) -> b
    com.adhoc.http.internal.Network network(com.adhoc.http.OkHttpClient) -> c
    void connectAndSetOwner(com.adhoc.http.OkHttpClient,com.adhoc.http.Connection,com.adhoc.http.internal.http.HttpEngine,com.adhoc.http.Request) -> a
    void callEnqueue(com.adhoc.http.Call,com.adhoc.http.Callback,boolean) -> a
    void callEngineReleaseConnection(com.adhoc.http.Call) -> a
    com.adhoc.http.Connection callEngineGetConnection(com.adhoc.http.Call) -> b
    com.adhoc.io.BufferedSource connectionRawSource(com.adhoc.http.Connection) -> d
    com.adhoc.io.BufferedSink connectionRawSink(com.adhoc.http.Connection) -> e
    void connectionSetOwner(com.adhoc.http.Connection,java.lang.Object) -> b
    void apply(com.adhoc.http.ConnectionSpec,javax.net.ssl.SSLSocket,boolean) -> a
com.adhoc.http.Protocol -> com.adhoc.dr:
    com.adhoc.http.Protocol HTTP_1_0 -> a
    com.adhoc.http.Protocol HTTP_1_1 -> b
    com.adhoc.http.Protocol SPDY_3 -> c
    com.adhoc.http.Protocol HTTP_2 -> d
    java.lang.String protocol -> e
    com.adhoc.http.Protocol[] $VALUES -> f
    com.adhoc.http.Protocol[] values() -> values
    com.adhoc.http.Protocol valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    com.adhoc.http.Protocol get(java.lang.String) -> a
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.adhoc.http.Request -> com.adhoc.ds:
    com.adhoc.http.HttpUrl url -> a
    java.lang.String method -> b
    com.adhoc.http.Headers headers -> c
    com.adhoc.http.RequestBody body -> d
    java.lang.Object tag -> e
    java.net.URI javaNetUri -> f
    com.adhoc.http.CacheControl cacheControl -> g
    void <init>(com.adhoc.http.Request$Builder) -> <init>
    com.adhoc.http.HttpUrl httpUrl() -> a
    java.net.URI uri() -> b
    java.lang.String urlString() -> c
    java.lang.String method() -> d
    com.adhoc.http.Headers headers() -> e
    java.lang.String header(java.lang.String) -> a
    java.util.List headers(java.lang.String) -> b
    com.adhoc.http.RequestBody body() -> f
    com.adhoc.http.Request$Builder newBuilder() -> g
    com.adhoc.http.CacheControl cacheControl() -> h
    boolean isHttps() -> i
    java.lang.String toString() -> toString
    com.adhoc.http.HttpUrl access$600(com.adhoc.http.Request) -> a
    java.lang.String access$700(com.adhoc.http.Request) -> b
    com.adhoc.http.RequestBody access$800(com.adhoc.http.Request) -> c
    java.lang.Object access$900(com.adhoc.http.Request) -> d
    com.adhoc.http.Headers access$1000(com.adhoc.http.Request) -> e
    void <init>(com.adhoc.http.Request$Builder,com.adhoc.http.Request$1) -> <init>
com.adhoc.http.Request$1 -> com.adhoc.dt:
com.adhoc.http.Request$Builder -> com.adhoc.du:
    com.adhoc.http.HttpUrl url -> a
    java.lang.String method -> b
    com.adhoc.http.Headers$Builder headers -> c
    com.adhoc.http.RequestBody body -> d
    java.lang.Object tag -> e
    void <init>() -> <init>
    void <init>(com.adhoc.http.Request) -> <init>
    com.adhoc.http.Request$Builder url(com.adhoc.http.HttpUrl) -> a
    com.adhoc.http.Request$Builder url(java.lang.String) -> a
    com.adhoc.http.Request$Builder header(java.lang.String,java.lang.String) -> a
    com.adhoc.http.Request$Builder addHeader(java.lang.String,java.lang.String) -> b
    com.adhoc.http.Request$Builder removeHeader(java.lang.String) -> b
    com.adhoc.http.Request$Builder headers(com.adhoc.http.Headers) -> a
    com.adhoc.http.Request$Builder cacheControl(com.adhoc.http.CacheControl) -> a
    com.adhoc.http.Request$Builder post(com.adhoc.http.RequestBody) -> a
    com.adhoc.http.Request$Builder method(java.lang.String,com.adhoc.http.RequestBody) -> a
    com.adhoc.http.Request build() -> a
    com.adhoc.http.HttpUrl access$000(com.adhoc.http.Request$Builder) -> a
    java.lang.String access$100(com.adhoc.http.Request$Builder) -> b
    com.adhoc.http.Headers$Builder access$200(com.adhoc.http.Request$Builder) -> c
    com.adhoc.http.RequestBody access$300(com.adhoc.http.Request$Builder) -> d
    java.lang.Object access$400(com.adhoc.http.Request$Builder) -> e
    void <init>(com.adhoc.http.Request,com.adhoc.http.Request$1) -> <init>
com.adhoc.http.RequestBody -> com.adhoc.dv:
    void <init>() -> <init>
    com.adhoc.http.MediaType contentType() -> a
    long contentLength() -> b
    void writeTo(com.adhoc.io.BufferedSink) -> a
    com.adhoc.http.RequestBody create(com.adhoc.http.MediaType,java.lang.String) -> a
    com.adhoc.http.RequestBody create(com.adhoc.http.MediaType,byte[]) -> a
    com.adhoc.http.RequestBody create(com.adhoc.http.MediaType,byte[],int,int) -> a
com.adhoc.http.RequestBody$2 -> com.adhoc.dw:
    com.adhoc.http.MediaType val$contentType -> a
    int val$byteCount -> b
    byte[] val$content -> c
    int val$offset -> d
    void <init>(com.adhoc.http.MediaType,int,byte[],int) -> <init>
    com.adhoc.http.MediaType contentType() -> a
    long contentLength() -> b
    void writeTo(com.adhoc.io.BufferedSink) -> a
com.adhoc.http.Response -> com.adhoc.dx:
    com.adhoc.http.Request request -> a
    com.adhoc.http.Protocol protocol -> b
    int code -> c
    java.lang.String message -> d
    com.adhoc.http.Handshake handshake -> e
    com.adhoc.http.Headers headers -> f
    com.adhoc.http.ResponseBody body -> g
    com.adhoc.http.Response networkResponse -> h
    com.adhoc.http.Response cacheResponse -> i
    com.adhoc.http.Response priorResponse -> j
    com.adhoc.http.CacheControl cacheControl -> k
    void <init>(com.adhoc.http.Response$Builder) -> <init>
    com.adhoc.http.Request request() -> a
    com.adhoc.http.Protocol protocol() -> b
    int code() -> c
    boolean isSuccessful() -> d
    java.lang.String message() -> e
    com.adhoc.http.Handshake handshake() -> f
    java.lang.String header(java.lang.String) -> a
    java.lang.String header(java.lang.String,java.lang.String) -> a
    com.adhoc.http.Headers headers() -> g
    com.adhoc.http.ResponseBody body() -> h
    com.adhoc.http.Response$Builder newBuilder() -> i
    com.adhoc.http.Response networkResponse() -> j
    com.adhoc.http.Response cacheResponse() -> k
    java.util.List challenges() -> l
    com.adhoc.http.CacheControl cacheControl() -> m
    java.lang.String toString() -> toString
    com.adhoc.http.Request access$1100(com.adhoc.http.Response) -> a
    com.adhoc.http.Protocol access$1200(com.adhoc.http.Response) -> b
    int access$1300(com.adhoc.http.Response) -> c
    java.lang.String access$1400(com.adhoc.http.Response) -> d
    com.adhoc.http.Handshake access$1500(com.adhoc.http.Response) -> e
    com.adhoc.http.Headers access$1600(com.adhoc.http.Response) -> f
    com.adhoc.http.ResponseBody access$1700(com.adhoc.http.Response) -> g
    com.adhoc.http.Response access$1800(com.adhoc.http.Response) -> h
    com.adhoc.http.Response access$1900(com.adhoc.http.Response) -> i
    com.adhoc.http.Response access$2000(com.adhoc.http.Response) -> j
    void <init>(com.adhoc.http.Response$Builder,com.adhoc.http.Response$1) -> <init>
com.adhoc.http.Response$1 -> com.adhoc.dy:
com.adhoc.http.Response$Builder -> com.adhoc.dz:
    com.adhoc.http.Request request -> a
    com.adhoc.http.Protocol protocol -> b
    int code -> c
    java.lang.String message -> d
    com.adhoc.http.Handshake handshake -> e
    com.adhoc.http.Headers$Builder headers -> f
    com.adhoc.http.ResponseBody body -> g
    com.adhoc.http.Response networkResponse -> h
    com.adhoc.http.Response cacheResponse -> i
    com.adhoc.http.Response priorResponse -> j
    void <init>() -> <init>
    void <init>(com.adhoc.http.Response) -> <init>
    com.adhoc.http.Response$Builder request(com.adhoc.http.Request) -> a
    com.adhoc.http.Response$Builder protocol(com.adhoc.http.Protocol) -> a
    com.adhoc.http.Response$Builder code(int) -> a
    com.adhoc.http.Response$Builder message(java.lang.String) -> a
    com.adhoc.http.Response$Builder handshake(com.adhoc.http.Handshake) -> a
    com.adhoc.http.Response$Builder header(java.lang.String,java.lang.String) -> a
    com.adhoc.http.Response$Builder addHeader(java.lang.String,java.lang.String) -> b
    com.adhoc.http.Response$Builder headers(com.adhoc.http.Headers) -> a
    com.adhoc.http.Response$Builder body(com.adhoc.http.ResponseBody) -> a
    com.adhoc.http.Response$Builder networkResponse(com.adhoc.http.Response) -> a
    com.adhoc.http.Response$Builder cacheResponse(com.adhoc.http.Response) -> b
    void checkSupportResponse(java.lang.String,com.adhoc.http.Response) -> a
    com.adhoc.http.Response$Builder priorResponse(com.adhoc.http.Response) -> c
    void checkPriorResponse(com.adhoc.http.Response) -> d
    com.adhoc.http.Response build() -> a
    com.adhoc.http.Request access$000(com.adhoc.http.Response$Builder) -> a
    com.adhoc.http.Protocol access$100(com.adhoc.http.Response$Builder) -> b
    int access$200(com.adhoc.http.Response$Builder) -> c
    java.lang.String access$300(com.adhoc.http.Response$Builder) -> d
    com.adhoc.http.Handshake access$400(com.adhoc.http.Response$Builder) -> e
    com.adhoc.http.Headers$Builder access$500(com.adhoc.http.Response$Builder) -> f
    com.adhoc.http.ResponseBody access$600(com.adhoc.http.Response$Builder) -> g
    com.adhoc.http.Response access$700(com.adhoc.http.Response$Builder) -> h
    com.adhoc.http.Response access$800(com.adhoc.http.Response$Builder) -> i
    com.adhoc.http.Response access$900(com.adhoc.http.Response$Builder) -> j
    void <init>(com.adhoc.http.Response,com.adhoc.http.Response$1) -> <init>
com.adhoc.http.ResponseBody -> com.adhoc.ea:
    void <init>() -> <init>
    com.adhoc.http.MediaType contentType() -> a
    long contentLength() -> b
    java.io.InputStream byteStream() -> d
    com.adhoc.io.BufferedSource source() -> c
    byte[] bytes() -> e
    java.lang.String string() -> f
    java.nio.charset.Charset charset() -> g
    void close() -> close
com.adhoc.http.Route -> com.adhoc.eb:
    com.adhoc.http.Address address -> a
    java.net.Proxy proxy -> b
    java.net.InetSocketAddress inetSocketAddress -> c
    void <init>(com.adhoc.http.Address,java.net.Proxy,java.net.InetSocketAddress) -> <init>
    com.adhoc.http.Address getAddress() -> a
    java.net.Proxy getProxy() -> b
    java.net.InetSocketAddress getSocketAddress() -> c
    boolean requiresTunnel() -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.adhoc.http.TlsVersion -> com.adhoc.ec:
    com.adhoc.http.TlsVersion TLS_1_2 -> a
    com.adhoc.http.TlsVersion TLS_1_1 -> b
    com.adhoc.http.TlsVersion TLS_1_0 -> c
    com.adhoc.http.TlsVersion SSL_3_0 -> d
    java.lang.String javaName -> e
    com.adhoc.http.TlsVersion[] $VALUES -> f
    com.adhoc.http.TlsVersion[] values() -> values
    com.adhoc.http.TlsVersion valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    com.adhoc.http.TlsVersion forJavaName(java.lang.String) -> a
    void <clinit>() -> <clinit>
com.adhoc.http.internal.ConnectionSpecSelector -> com.adhoc.ed:
    java.util.List connectionSpecs -> a
    int nextModeIndex -> b
    boolean isFallbackPossible -> c
    boolean isFallback -> d
    void <init>(java.util.List) -> <init>
    com.adhoc.http.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket) -> a
    boolean connectionFailed(java.io.IOException) -> a
    boolean isFallbackPossible(javax.net.ssl.SSLSocket) -> b
com.adhoc.http.internal.DiskLruCache -> com.adhoc.ee:
    java.util.regex.Pattern LEGAL_KEY_PATTERN -> a
    com.adhoc.http.internal.io.FileSystem fileSystem -> c
    java.io.File directory -> d
    java.io.File journalFile -> e
    java.io.File journalFileTmp -> f
    java.io.File journalFileBackup -> g
    int appVersion -> h
    long maxSize -> i
    int valueCount -> j
    long size -> k
    com.adhoc.io.BufferedSink journalWriter -> l
    java.util.LinkedHashMap lruEntries -> m
    int redundantOpCount -> n
    boolean hasJournalErrors -> o
    boolean initialized -> p
    boolean closed -> q
    long nextSequenceNumber -> r
    java.util.concurrent.Executor executor -> s
    java.lang.Runnable cleanupRunnable -> t
    com.adhoc.io.Sink NULL_SINK -> u
    boolean $assertionsDisabled -> b
    void <init>(com.adhoc.http.internal.io.FileSystem,java.io.File,int,int,long,java.util.concurrent.Executor) -> <init>
    void initialize() -> a
    com.adhoc.http.internal.DiskLruCache create(com.adhoc.http.internal.io.FileSystem,java.io.File,int,int,long) -> a
    void readJournal() -> e
    com.adhoc.io.BufferedSink newJournalWriter() -> f
    void readJournalLine(java.lang.String) -> d
    void processJournal() -> g
    void rebuildJournal() -> h
    com.adhoc.http.internal.DiskLruCache$Snapshot get(java.lang.String) -> a
    com.adhoc.http.internal.DiskLruCache$Editor edit(java.lang.String) -> b
    com.adhoc.http.internal.DiskLruCache$Editor edit(java.lang.String,long) -> a
    void completeEdit(com.adhoc.http.internal.DiskLruCache$Editor,boolean) -> a
    boolean journalRebuildRequired() -> i
    boolean remove(java.lang.String) -> c
    boolean removeEntry(com.adhoc.http.internal.DiskLruCache$Entry) -> a
    boolean isClosed() -> b
    void checkNotClosed() -> j
    void close() -> close
    void trimToSize() -> k
    void delete() -> c
    void validateKey(java.lang.String) -> e
    boolean access$000(com.adhoc.http.internal.DiskLruCache) -> a
    boolean access$100(com.adhoc.http.internal.DiskLruCache) -> b
    void access$200(com.adhoc.http.internal.DiskLruCache) -> c
    boolean access$300(com.adhoc.http.internal.DiskLruCache) -> d
    void access$400(com.adhoc.http.internal.DiskLruCache) -> e
    int access$502(com.adhoc.http.internal.DiskLruCache,int) -> a
    boolean access$602(com.adhoc.http.internal.DiskLruCache,boolean) -> a
    com.adhoc.http.internal.DiskLruCache$Editor access$2200(com.adhoc.http.internal.DiskLruCache,java.lang.String,long) -> a
    int access$2300(com.adhoc.http.internal.DiskLruCache) -> f
    com.adhoc.http.internal.io.FileSystem access$2400(com.adhoc.http.internal.DiskLruCache) -> g
    com.adhoc.io.Sink access$2500() -> d
    void access$2600(com.adhoc.http.internal.DiskLruCache,com.adhoc.http.internal.DiskLruCache$Editor,boolean) -> a
    boolean access$2700(com.adhoc.http.internal.DiskLruCache,com.adhoc.http.internal.DiskLruCache$Entry) -> a
    java.io.File access$2800(com.adhoc.http.internal.DiskLruCache) -> h
    void <clinit>() -> <clinit>
com.adhoc.http.internal.DiskLruCache$1 -> com.adhoc.ef:
    com.adhoc.http.internal.DiskLruCache this$0 -> a
    void <init>(com.adhoc.http.internal.DiskLruCache) -> <init>
    void run() -> run
com.adhoc.http.internal.DiskLruCache$2 -> com.adhoc.eg:
    boolean $assertionsDisabled -> a
    com.adhoc.http.internal.DiskLruCache this$0 -> b
    void <init>(com.adhoc.http.internal.DiskLruCache,com.adhoc.io.Sink) -> <init>
    void onException(java.io.IOException) -> a
    void <clinit>() -> <clinit>
com.adhoc.http.internal.DiskLruCache$4 -> com.adhoc.eh:
    void <init>() -> <init>
    void write(com.adhoc.io.Buffer,long) -> a_
    void flush() -> flush
    com.adhoc.io.Timeout timeout() -> a
    void close() -> close
com.adhoc.http.internal.DiskLruCache$Editor -> com.adhoc.ei:
    com.adhoc.http.internal.DiskLruCache$Entry entry -> b
    boolean[] written -> c
    boolean hasErrors -> d
    boolean committed -> e
    com.adhoc.http.internal.DiskLruCache this$0 -> a
    void <init>(com.adhoc.http.internal.DiskLruCache,com.adhoc.http.internal.DiskLruCache$Entry) -> <init>
    com.adhoc.io.Sink newSink(int) -> a
    void commit() -> a
    void abort() -> b
    void <init>(com.adhoc.http.internal.DiskLruCache,com.adhoc.http.internal.DiskLruCache$Entry,com.adhoc.http.internal.DiskLruCache$1) -> <init>
    com.adhoc.http.internal.DiskLruCache$Entry access$1700(com.adhoc.http.internal.DiskLruCache$Editor) -> a
    boolean[] access$1800(com.adhoc.http.internal.DiskLruCache$Editor) -> b
    boolean access$1902(com.adhoc.http.internal.DiskLruCache$Editor,boolean) -> a
com.adhoc.http.internal.DiskLruCache$Editor$1 -> com.adhoc.ej:
    com.adhoc.http.internal.DiskLruCache$Editor this$1 -> a
    void <init>(com.adhoc.http.internal.DiskLruCache$Editor,com.adhoc.io.Sink) -> <init>
    void onException(java.io.IOException) -> a
com.adhoc.http.internal.DiskLruCache$Entry -> com.adhoc.ek:
    java.lang.String key -> b
    long[] lengths -> c
    java.io.File[] cleanFiles -> d
    java.io.File[] dirtyFiles -> e
    boolean readable -> f
    com.adhoc.http.internal.DiskLruCache$Editor currentEditor -> g
    long sequenceNumber -> h
    com.adhoc.http.internal.DiskLruCache this$0 -> a
    void <init>(com.adhoc.http.internal.DiskLruCache,java.lang.String) -> <init>
    void setLengths(java.lang.String[]) -> a
    void writeLengths(com.adhoc.io.BufferedSink) -> a
    java.io.IOException invalidLengths(java.lang.String[]) -> b
    com.adhoc.http.internal.DiskLruCache$Snapshot snapshot() -> a
    void <init>(com.adhoc.http.internal.DiskLruCache,java.lang.String,com.adhoc.http.internal.DiskLruCache$1) -> <init>
    boolean access$802(com.adhoc.http.internal.DiskLruCache$Entry,boolean) -> a
    com.adhoc.http.internal.DiskLruCache$Editor access$902(com.adhoc.http.internal.DiskLruCache$Entry,com.adhoc.http.internal.DiskLruCache$Editor) -> a
    void access$1000(com.adhoc.http.internal.DiskLruCache$Entry,java.lang.String[]) -> a
    com.adhoc.http.internal.DiskLruCache$Editor access$900(com.adhoc.http.internal.DiskLruCache$Entry) -> a
    long[] access$1200(com.adhoc.http.internal.DiskLruCache$Entry) -> b
    java.io.File[] access$1300(com.adhoc.http.internal.DiskLruCache$Entry) -> c
    java.io.File[] access$1400(com.adhoc.http.internal.DiskLruCache$Entry) -> d
    java.lang.String access$1500(com.adhoc.http.internal.DiskLruCache$Entry) -> e
    boolean access$800(com.adhoc.http.internal.DiskLruCache$Entry) -> f
    long access$1600(com.adhoc.http.internal.DiskLruCache$Entry) -> g
    long access$1602(com.adhoc.http.internal.DiskLruCache$Entry,long) -> a
com.adhoc.http.internal.DiskLruCache$Snapshot -> com.adhoc.el:
    java.lang.String key -> b
    long sequenceNumber -> c
    com.adhoc.io.Source[] sources -> d
    long[] lengths -> e
    com.adhoc.http.internal.DiskLruCache this$0 -> a
    void <init>(com.adhoc.http.internal.DiskLruCache,java.lang.String,long,com.adhoc.io.Source[],long[]) -> <init>
    com.adhoc.http.internal.DiskLruCache$Editor edit() -> a
    com.adhoc.io.Source getSource(int) -> a
    void close() -> close
    void <init>(com.adhoc.http.internal.DiskLruCache,java.lang.String,long,com.adhoc.io.Source[],long[],com.adhoc.http.internal.DiskLruCache$1) -> <init>
com.adhoc.http.internal.FaultHidingSink -> com.adhoc.em:
    boolean hasErrors -> a
    void <init>(com.adhoc.io.Sink) -> <init>
    void write(com.adhoc.io.Buffer,long) -> a_
    void flush() -> flush
    void close() -> close
    void onException(java.io.IOException) -> a
com.adhoc.http.internal.Internal -> com.adhoc.en:
    java.util.logging.Logger logger -> a
    com.adhoc.http.internal.Internal instance -> b
    void <init>() -> <init>
    com.adhoc.http.internal.http.Transport newTransport(com.adhoc.http.Connection,com.adhoc.http.internal.http.HttpEngine) -> a
    boolean clearOwner(com.adhoc.http.Connection) -> a
    void closeIfOwnedBy(com.adhoc.http.Connection,java.lang.Object) -> a
    int recycleCount(com.adhoc.http.Connection) -> b
    void setProtocol(com.adhoc.http.Connection,com.adhoc.http.Protocol) -> a
    void setOwner(com.adhoc.http.Connection,com.adhoc.http.internal.http.HttpEngine) -> b
    boolean isReadable(com.adhoc.http.Connection) -> c
    void addLenient(com.adhoc.http.Headers$Builder,java.lang.String) -> a
    com.adhoc.http.internal.InternalCache internalCache(com.adhoc.http.OkHttpClient) -> a
    void recycle(com.adhoc.http.ConnectionPool,com.adhoc.http.Connection) -> a
    com.adhoc.http.internal.RouteDatabase routeDatabase(com.adhoc.http.OkHttpClient) -> b
    com.adhoc.http.internal.Network network(com.adhoc.http.OkHttpClient) -> c
    void connectAndSetOwner(com.adhoc.http.OkHttpClient,com.adhoc.http.Connection,com.adhoc.http.internal.http.HttpEngine,com.adhoc.http.Request) -> a
    void apply(com.adhoc.http.ConnectionSpec,javax.net.ssl.SSLSocket,boolean) -> a
    void callEnqueue(com.adhoc.http.Call,com.adhoc.http.Callback,boolean) -> a
    void callEngineReleaseConnection(com.adhoc.http.Call) -> a
    com.adhoc.http.Connection callEngineGetConnection(com.adhoc.http.Call) -> b
    com.adhoc.io.BufferedSource connectionRawSource(com.adhoc.http.Connection) -> d
    com.adhoc.io.BufferedSink connectionRawSink(com.adhoc.http.Connection) -> e
    void connectionSetOwner(com.adhoc.http.Connection,java.lang.Object) -> b
    void <clinit>() -> <clinit>
com.adhoc.http.internal.InternalCache -> com.adhoc.eo:
    com.adhoc.http.Response get(com.adhoc.http.Request) -> a
    com.adhoc.http.internal.http.CacheRequest put(com.adhoc.http.Response) -> a
    void remove(com.adhoc.http.Request) -> b
    void update(com.adhoc.http.Response,com.adhoc.http.Response) -> a
    void trackConditionalCacheHit() -> a
    void trackResponse(com.adhoc.http.internal.http.CacheStrategy) -> a
com.adhoc.http.internal.NamedRunnable -> com.adhoc.ep:
    java.lang.String name -> b
    void <init>(java.lang.String,java.lang.Object[]) -> <init>
    void run() -> run
    void execute() -> b
com.adhoc.http.internal.Network -> com.adhoc.eq:
    com.adhoc.http.internal.Network DEFAULT -> a
    java.net.InetAddress[] resolveInetAddresses(java.lang.String) -> a
    void <clinit>() -> <clinit>
com.adhoc.http.internal.Network$1 -> com.adhoc.er:
    void <init>() -> <init>
    java.net.InetAddress[] resolveInetAddresses(java.lang.String) -> a
com.adhoc.http.internal.OptionalMethod -> com.adhoc.es:
    java.lang.Class returnType -> a
    java.lang.String methodName -> b
    java.lang.Class[] methodParams -> c
    void <init>(java.lang.Class,java.lang.String,java.lang.Class[]) -> <init>
    boolean isSupported(java.lang.Object) -> a
    java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[]) -> a
    java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[]) -> b
    java.lang.Object invoke(java.lang.Object,java.lang.Object[]) -> c
    java.lang.Object invokeWithoutCheckedException(java.lang.Object,java.lang.Object[]) -> d
    java.lang.reflect.Method getMethod(java.lang.Class) -> a
    java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> a
com.adhoc.http.internal.Platform -> com.adhoc.et:
    com.adhoc.http.internal.Platform PLATFORM -> a
    void <init>() -> <init>
    com.adhoc.http.internal.Platform get() -> a
    java.lang.String getPrefix() -> b
    void logW(java.lang.String) -> a
    void tagSocket(java.net.Socket) -> a
    void untagSocket(java.net.Socket) -> b
    void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List) -> a
    void afterHandshake(javax.net.ssl.SSLSocket) -> a
    java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket) -> b
    void connectSocket(java.net.Socket,java.net.InetSocketAddress,int) -> a
    com.adhoc.http.internal.Platform findPlatform() -> c
    byte[] concatLengthPrefixed(java.util.List) -> a
    void <clinit>() -> <clinit>
com.adhoc.http.internal.Platform$Android -> com.adhoc.eu:
    com.adhoc.http.internal.OptionalMethod setUseSessionTickets -> a
    com.adhoc.http.internal.OptionalMethod setHostname -> b
    java.lang.reflect.Method trafficStatsTagSocket -> c
    java.lang.reflect.Method trafficStatsUntagSocket -> d
    com.adhoc.http.internal.OptionalMethod getAlpnSelectedProtocol -> e
    com.adhoc.http.internal.OptionalMethod setAlpnProtocols -> f
    void <init>(com.adhoc.http.internal.OptionalMethod,com.adhoc.http.internal.OptionalMethod,java.lang.reflect.Method,java.lang.reflect.Method,com.adhoc.http.internal.OptionalMethod,com.adhoc.http.internal.OptionalMethod) -> <init>
    void connectSocket(java.net.Socket,java.net.InetSocketAddress,int) -> a
    void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List) -> a
    java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket) -> b
    void tagSocket(java.net.Socket) -> a
    void untagSocket(java.net.Socket) -> b
com.adhoc.http.internal.Platform$JdkWithJettyBootPlatform -> com.adhoc.ev:
    java.lang.reflect.Method putMethod -> a
    java.lang.reflect.Method getMethod -> b
    java.lang.reflect.Method removeMethod -> c
    java.lang.Class clientProviderClass -> d
    java.lang.Class serverProviderClass -> e
    void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Class,java.lang.Class) -> <init>
    void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List) -> a
    void afterHandshake(javax.net.ssl.SSLSocket) -> a
    java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket) -> b
com.adhoc.http.internal.Platform$JettyNegoProvider -> com.adhoc.ew:
    java.util.List protocols -> a
    boolean unsupported -> b
    java.lang.String selected -> c
    void <init>(java.util.List) -> <init>
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    boolean access$000(com.adhoc.http.internal.Platform$JettyNegoProvider) -> a
    java.lang.String access$100(com.adhoc.http.internal.Platform$JettyNegoProvider) -> b
com.adhoc.http.internal.RouteDatabase -> com.adhoc.ex:
    java.util.Set failedRoutes -> a
    void <init>() -> <init>
    void failed(com.adhoc.http.Route) -> a
    void connected(com.adhoc.http.Route) -> b
    boolean shouldPostpone(com.adhoc.http.Route) -> c
com.adhoc.http.internal.Util -> com.adhoc.ey:
    byte[] EMPTY_BYTE_ARRAY -> a
    java.lang.String[] EMPTY_STRING_ARRAY -> b
    java.nio.charset.Charset UTF_8 -> c
    void checkOffsetAndCount(long,long,long) -> a
    boolean equal(java.lang.Object,java.lang.Object) -> a
    void closeQuietly(java.io.Closeable) -> a
    void closeQuietly(java.net.Socket) -> a
    void closeAll(java.io.Closeable,java.io.Closeable) -> a
    boolean discard(com.adhoc.io.Source,int,java.util.concurrent.TimeUnit) -> a
    boolean skipAll(com.adhoc.io.Source,int,java.util.concurrent.TimeUnit) -> b
    java.lang.String md5Hex(java.lang.String) -> a
    java.lang.String shaBase64(java.lang.String) -> b
    com.adhoc.io.ByteString sha1(com.adhoc.io.ByteString) -> a
    java.util.List immutableList(java.util.List) -> a
    java.util.List immutableList(java.lang.Object[]) -> a
    java.util.Map immutableMap(java.util.Map) -> a
    java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean) -> a
    java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[]) -> a
    java.util.List intersect(java.lang.Object[],java.lang.Object[]) -> a
    java.lang.String hostHeader(com.adhoc.http.HttpUrl) -> a
    boolean isAndroidGetsocknameError(java.lang.AssertionError) -> a
    void <clinit>() -> <clinit>
com.adhoc.http.internal.Util$1 -> com.adhoc.ez:
    java.lang.String val$name -> a
    boolean val$daemon -> b
    void <init>(java.lang.String,boolean) -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.adhoc.http.internal.Version -> com.adhoc.fa:
    java.lang.String userAgent() -> a
com.adhoc.http.internal.framed.ErrorCode -> com.adhoc.fb:
    com.adhoc.http.internal.framed.ErrorCode NO_ERROR -> a
    com.adhoc.http.internal.framed.ErrorCode PROTOCOL_ERROR -> b
    com.adhoc.http.internal.framed.ErrorCode INVALID_STREAM -> c
    com.adhoc.http.internal.framed.ErrorCode UNSUPPORTED_VERSION -> d
    com.adhoc.http.internal.framed.ErrorCode STREAM_IN_USE -> e
    com.adhoc.http.internal.framed.ErrorCode STREAM_ALREADY_CLOSED -> f
    com.adhoc.http.internal.framed.ErrorCode INTERNAL_ERROR -> g
    com.adhoc.http.internal.framed.ErrorCode FLOW_CONTROL_ERROR -> h
    com.adhoc.http.internal.framed.ErrorCode STREAM_CLOSED -> i
    com.adhoc.http.internal.framed.ErrorCode FRAME_TOO_LARGE -> j
    com.adhoc.http.internal.framed.ErrorCode REFUSED_STREAM -> k
    com.adhoc.http.internal.framed.ErrorCode CANCEL -> l
    com.adhoc.http.internal.framed.ErrorCode COMPRESSION_ERROR -> m
    com.adhoc.http.internal.framed.ErrorCode CONNECT_ERROR -> n
    com.adhoc.http.internal.framed.ErrorCode ENHANCE_YOUR_CALM -> o
    com.adhoc.http.internal.framed.ErrorCode INADEQUATE_SECURITY -> p
    com.adhoc.http.internal.framed.ErrorCode HTTP_1_1_REQUIRED -> q
    com.adhoc.http.internal.framed.ErrorCode INVALID_CREDENTIALS -> r
    int httpCode -> s
    int spdyRstCode -> t
    int spdyGoAwayCode -> u
    com.adhoc.http.internal.framed.ErrorCode[] $VALUES -> v
    com.adhoc.http.internal.framed.ErrorCode[] values() -> values
    com.adhoc.http.internal.framed.ErrorCode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,int,int) -> <init>
    com.adhoc.http.internal.framed.ErrorCode fromSpdy3Rst(int) -> a
    com.adhoc.http.internal.framed.ErrorCode fromHttp2(int) -> b
    com.adhoc.http.internal.framed.ErrorCode fromSpdyGoAway(int) -> c
    void <clinit>() -> <clinit>
com.adhoc.http.internal.framed.FrameReader -> com.adhoc.fc:
    void readConnectionPreface() -> a
    boolean nextFrame(com.adhoc.http.internal.framed.FrameReader$Handler) -> a
com.adhoc.http.internal.framed.FrameReader$Handler -> com.adhoc.fd:
    void data(boolean,int,com.adhoc.io.BufferedSource,int) -> a
    void headers(boolean,boolean,int,int,java.util.List,com.adhoc.http.internal.framed.HeadersMode) -> a
    void rstStream(int,com.adhoc.http.internal.framed.ErrorCode) -> a
    void settings(boolean,com.adhoc.http.internal.framed.Settings) -> a
    void ackSettings() -> a
    void ping(boolean,int,int) -> a
    void goAway(int,com.adhoc.http.internal.framed.ErrorCode,com.adhoc.io.ByteString) -> a
    void windowUpdate(int,long) -> a
    void priority(int,int,int,boolean) -> a
    void pushPromise(int,int,java.util.List) -> a
com.adhoc.http.internal.framed.FrameWriter -> com.adhoc.fe:
    void connectionPreface() -> a
    void ackSettings(com.adhoc.http.internal.framed.Settings) -> a
    void pushPromise(int,int,java.util.List) -> a
    void flush() -> b
    void synStream(boolean,boolean,int,int,java.util.List) -> a
    void rstStream(int,com.adhoc.http.internal.framed.ErrorCode) -> a
    int maxDataLength() -> c
    void data(boolean,int,com.adhoc.io.Buffer,int) -> a
    void settings(com.adhoc.http.internal.framed.Settings) -> b
    void ping(boolean,int,int) -> a
    void goAway(int,com.adhoc.http.internal.framed.ErrorCode,byte[]) -> a
    void windowUpdate(int,long) -> a
com.adhoc.http.internal.framed.FramedConnection -> com.adhoc.ff:
    java.util.concurrent.ExecutorService executor -> l
    com.adhoc.http.Protocol protocol -> a
    boolean client -> b
    com.adhoc.http.internal.framed.IncomingStreamHandler handler -> m
    java.util.Map streams -> n
    java.lang.String hostName -> o
    int lastGoodStreamId -> p
    int nextStreamId -> q
    boolean shutdown -> r
    long idleStartTimeNs -> s
    java.util.concurrent.ExecutorService pushExecutor -> t
    java.util.Map pings -> u
    com.adhoc.http.internal.framed.PushObserver pushObserver -> v
    int nextPingId -> w
    long unacknowledgedBytesRead -> c
    long bytesLeftInWriteWindow -> d
    com.adhoc.http.internal.framed.Settings okHttpSettings -> e
    com.adhoc.http.internal.framed.Settings peerSettings -> f
    boolean receivedInitialPeerSettings -> x
    com.adhoc.http.internal.framed.Variant variant -> g
    java.net.Socket socket -> h
    com.adhoc.http.internal.framed.FrameWriter frameWriter -> i
    com.adhoc.http.internal.framed.FramedConnection$Reader readerRunnable -> j
    java.util.Set currentPushRequests -> y
    boolean $assertionsDisabled -> k
    void <init>(com.adhoc.http.internal.framed.FramedConnection$Builder) -> <init>
    com.adhoc.http.Protocol getProtocol() -> a
    com.adhoc.http.internal.framed.FramedStream getStream(int) -> a
    com.adhoc.http.internal.framed.FramedStream removeStream(int) -> b
    void setIdle(boolean) -> a
    boolean isIdle() -> b
    long getIdleStartTimeNs() -> c
    com.adhoc.http.internal.framed.FramedStream newStream(java.util.List,boolean,boolean) -> a
    com.adhoc.http.internal.framed.FramedStream newStream(int,java.util.List,boolean,boolean) -> a
    void writeData(int,boolean,com.adhoc.io.Buffer,long) -> a
    void addBytesToWriteWindow(long) -> a
    void writeSynResetLater(int,com.adhoc.http.internal.framed.ErrorCode) -> a
    void writeSynReset(int,com.adhoc.http.internal.framed.ErrorCode) -> b
    void writeWindowUpdateLater(int,long) -> a
    void writePingLater(boolean,int,int,com.adhoc.http.internal.framed.Ping) -> a
    void writePing(boolean,int,int,com.adhoc.http.internal.framed.Ping) -> b
    com.adhoc.http.internal.framed.Ping removePing(int) -> c
    void flush() -> d
    void shutdown(com.adhoc.http.internal.framed.ErrorCode) -> a
    void close() -> close
    void close(com.adhoc.http.internal.framed.ErrorCode,com.adhoc.http.internal.framed.ErrorCode) -> a
    void sendConnectionPreface() -> e
    boolean pushedStream(int) -> d
    void pushRequestLater(int,java.util.List) -> a
    void pushHeadersLater(int,java.util.List,boolean) -> a
    void pushDataLater(int,com.adhoc.io.BufferedSource,int,boolean) -> a
    void pushResetLater(int,com.adhoc.http.internal.framed.ErrorCode) -> c
    void access$700(com.adhoc.http.internal.framed.FramedConnection,boolean,int,int,com.adhoc.http.internal.framed.Ping) -> a
    void <init>(com.adhoc.http.internal.framed.FramedConnection$Builder,com.adhoc.http.internal.framed.FramedConnection$1) -> <init>
    java.lang.String access$900(com.adhoc.http.internal.framed.FramedConnection) -> a
    void access$1000(com.adhoc.http.internal.framed.FramedConnection,com.adhoc.http.internal.framed.ErrorCode,com.adhoc.http.internal.framed.ErrorCode) -> a
    boolean access$1100(com.adhoc.http.internal.framed.FramedConnection,int) -> a
    void access$1200(com.adhoc.http.internal.framed.FramedConnection,int,com.adhoc.io.BufferedSource,int,boolean) -> a
    void access$1300(com.adhoc.http.internal.framed.FramedConnection,int,java.util.List,boolean) -> a
    boolean access$1400(com.adhoc.http.internal.framed.FramedConnection) -> b
    int access$1500(com.adhoc.http.internal.framed.FramedConnection) -> c
    int access$1600(com.adhoc.http.internal.framed.FramedConnection) -> d
    int access$1502(com.adhoc.http.internal.framed.FramedConnection,int) -> b
    java.util.Map access$1700(com.adhoc.http.internal.framed.FramedConnection) -> e
    com.adhoc.http.internal.framed.IncomingStreamHandler access$1800(com.adhoc.http.internal.framed.FramedConnection) -> f
    java.util.concurrent.ExecutorService access$1900() -> f
    void access$2000(com.adhoc.http.internal.framed.FramedConnection,int,com.adhoc.http.internal.framed.ErrorCode) -> a
    boolean access$2100(com.adhoc.http.internal.framed.FramedConnection) -> g
    boolean access$2102(com.adhoc.http.internal.framed.FramedConnection,boolean) -> a
    com.adhoc.http.internal.framed.Ping access$2200(com.adhoc.http.internal.framed.FramedConnection,int) -> c
    void access$2300(com.adhoc.http.internal.framed.FramedConnection,boolean,int,int,com.adhoc.http.internal.framed.Ping) -> b
    boolean access$1402(com.adhoc.http.internal.framed.FramedConnection,boolean) -> b
    void access$2400(com.adhoc.http.internal.framed.FramedConnection,int,java.util.List) -> a
    com.adhoc.http.internal.framed.PushObserver access$2500(com.adhoc.http.internal.framed.FramedConnection) -> h
    java.util.Set access$2600(com.adhoc.http.internal.framed.FramedConnection) -> i
    void <clinit>() -> <clinit>
com.adhoc.http.internal.framed.FramedConnection$1 -> com.adhoc.fg:
    int val$streamId -> a
    com.adhoc.http.internal.framed.ErrorCode val$errorCode -> c
    com.adhoc.http.internal.framed.FramedConnection this$0 -> d
    void <init>(com.adhoc.http.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,com.adhoc.http.internal.framed.ErrorCode) -> <init>
    void execute() -> b
com.adhoc.http.internal.framed.FramedConnection$2 -> com.adhoc.fh:
    int val$streamId -> a
    long val$unacknowledgedBytesRead -> c
    com.adhoc.http.internal.framed.FramedConnection this$0 -> d
    void <init>(com.adhoc.http.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,long) -> <init>
    void execute() -> b
com.adhoc.http.internal.framed.FramedConnection$3 -> com.adhoc.fi:
    boolean val$reply -> a
    int val$payload1 -> c
    int val$payload2 -> d
    com.adhoc.http.internal.framed.Ping val$ping -> e
    com.adhoc.http.internal.framed.FramedConnection this$0 -> f
    void <init>(com.adhoc.http.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],boolean,int,int,com.adhoc.http.internal.framed.Ping) -> <init>
    void execute() -> b
com.adhoc.http.internal.framed.FramedConnection$4 -> com.adhoc.fj:
    int val$streamId -> a
    java.util.List val$requestHeaders -> c
    com.adhoc.http.internal.framed.FramedConnection this$0 -> d
    void <init>(com.adhoc.http.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,java.util.List) -> <init>
    void execute() -> b
com.adhoc.http.internal.framed.FramedConnection$5 -> com.adhoc.fk:
    int val$streamId -> a
    java.util.List val$requestHeaders -> c
    boolean val$inFinished -> d
    com.adhoc.http.internal.framed.FramedConnection this$0 -> e
    void <init>(com.adhoc.http.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,java.util.List,boolean) -> <init>
    void execute() -> b
com.adhoc.http.internal.framed.FramedConnection$6 -> com.adhoc.fl:
    int val$streamId -> a
    com.adhoc.io.Buffer val$buffer -> c
    int val$byteCount -> d
    boolean val$inFinished -> e
    com.adhoc.http.internal.framed.FramedConnection this$0 -> f
    void <init>(com.adhoc.http.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,com.adhoc.io.Buffer,int,boolean) -> <init>
    void execute() -> b
com.adhoc.http.internal.framed.FramedConnection$7 -> com.adhoc.fm:
    int val$streamId -> a
    com.adhoc.http.internal.framed.ErrorCode val$errorCode -> c
    com.adhoc.http.internal.framed.FramedConnection this$0 -> d
    void <init>(com.adhoc.http.internal.framed.FramedConnection,java.lang.String,java.lang.Object[],int,com.adhoc.http.internal.framed.ErrorCode) -> <init>
    void execute() -> b
com.adhoc.http.internal.framed.FramedConnection$Builder -> com.adhoc.fn:
    java.lang.String hostName -> a
    java.net.Socket socket -> b
    com.adhoc.http.internal.framed.IncomingStreamHandler handler -> c
    com.adhoc.http.Protocol protocol -> d
    com.adhoc.http.internal.framed.PushObserver pushObserver -> e
    boolean client -> f
    void <init>(java.lang.String,boolean,java.net.Socket) -> <init>
    com.adhoc.http.internal.framed.FramedConnection$Builder protocol(com.adhoc.http.Protocol) -> a
    com.adhoc.http.internal.framed.FramedConnection build() -> a
    com.adhoc.http.Protocol access$000(com.adhoc.http.internal.framed.FramedConnection$Builder) -> a
    com.adhoc.http.internal.framed.PushObserver access$100(com.adhoc.http.internal.framed.FramedConnection$Builder) -> b
    boolean access$200(com.adhoc.http.internal.framed.FramedConnection$Builder) -> c
    com.adhoc.http.internal.framed.IncomingStreamHandler access$300(com.adhoc.http.internal.framed.FramedConnection$Builder) -> d
    java.lang.String access$400(com.adhoc.http.internal.framed.FramedConnection$Builder) -> e
    java.net.Socket access$500(com.adhoc.http.internal.framed.FramedConnection$Builder) -> f
com.adhoc.http.internal.framed.FramedConnection$Reader -> com.adhoc.fo:
    com.adhoc.http.internal.framed.FrameReader frameReader -> a
    com.adhoc.http.internal.framed.FramedConnection this$0 -> c
    void <init>(com.adhoc.http.internal.framed.FramedConnection) -> <init>
    void execute() -> b
    void data(boolean,int,com.adhoc.io.BufferedSource,int) -> a
    void headers(boolean,boolean,int,int,java.util.List,com.adhoc.http.internal.framed.HeadersMode) -> a
    void rstStream(int,com.adhoc.http.internal.framed.ErrorCode) -> a
    void settings(boolean,com.adhoc.http.internal.framed.Settings) -> a
    void ackSettingsLater(com.adhoc.http.internal.framed.Settings) -> a
    void ackSettings() -> a
    void ping(boolean,int,int) -> a
    void goAway(int,com.adhoc.http.internal.framed.ErrorCode,com.adhoc.io.ByteString) -> a
    void windowUpdate(int,long) -> a
    void priority(int,int,int,boolean) -> a
    void pushPromise(int,int,java.util.List) -> a
    void <init>(com.adhoc.http.internal.framed.FramedConnection,com.adhoc.http.internal.framed.FramedConnection$1) -> <init>
com.adhoc.http.internal.framed.FramedConnection$Reader$1 -> com.adhoc.fp:
    com.adhoc.http.internal.framed.FramedStream val$newStream -> a
    com.adhoc.http.internal.framed.FramedConnection$Reader this$1 -> c
    void <init>(com.adhoc.http.internal.framed.FramedConnection$Reader,java.lang.String,java.lang.Object[],com.adhoc.http.internal.framed.FramedStream) -> <init>
    void execute() -> b
com.adhoc.http.internal.framed.FramedConnection$Reader$2 -> com.adhoc.fq:
    com.adhoc.http.internal.framed.Settings val$peerSettings -> a
    com.adhoc.http.internal.framed.FramedConnection$Reader this$1 -> c
    void <init>(com.adhoc.http.internal.framed.FramedConnection$Reader,java.lang.String,java.lang.Object[],com.adhoc.http.internal.framed.Settings) -> <init>
    void execute() -> b
com.adhoc.http.internal.framed.FramedStream -> com.adhoc.fr:
    long unacknowledgedBytesRead -> a
    long bytesLeftInWriteWindow -> b
    int id -> e
    com.adhoc.http.internal.framed.FramedConnection connection -> f
    java.util.List requestHeaders -> g
    java.util.List responseHeaders -> h
    com.adhoc.http.internal.framed.FramedStream$FramedDataSource source -> i
    com.adhoc.http.internal.framed.FramedStream$FramedDataSink sink -> c
    com.adhoc.http.internal.framed.FramedStream$StreamTimeout readTimeout -> j
    com.adhoc.http.internal.framed.FramedStream$StreamTimeout writeTimeout -> k
    com.adhoc.http.internal.framed.ErrorCode errorCode -> l
    boolean $assertionsDisabled -> d
    void <init>(int,com.adhoc.http.internal.framed.FramedConnection,boolean,boolean,java.util.List) -> <init>
    int getId() -> a
    boolean isOpen() -> b
    boolean isLocallyInitiated() -> c
    java.util.List getResponseHeaders() -> d
    com.adhoc.io.Timeout readTimeout() -> e
    com.adhoc.io.Source getSource() -> f
    com.adhoc.io.Sink getSink() -> g
    void close(com.adhoc.http.internal.framed.ErrorCode) -> a
    void closeLater(com.adhoc.http.internal.framed.ErrorCode) -> b
    boolean closeInternal(com.adhoc.http.internal.framed.ErrorCode) -> d
    void receiveHeaders(java.util.List,com.adhoc.http.internal.framed.HeadersMode) -> a
    void receiveData(com.adhoc.io.BufferedSource,int) -> a
    void receiveFin() -> h
    void receiveRstStream(com.adhoc.http.internal.framed.ErrorCode) -> c
    void cancelStreamIfNecessary() -> i
    void addBytesToWriteWindow(long) -> a
    void checkOutNotClosed() -> j
    void waitForIo() -> k
    com.adhoc.http.internal.framed.FramedConnection access$500(com.adhoc.http.internal.framed.FramedStream) -> a
    int access$600(com.adhoc.http.internal.framed.FramedStream) -> b
    com.adhoc.http.internal.framed.FramedStream$StreamTimeout access$700(com.adhoc.http.internal.framed.FramedStream) -> c
    com.adhoc.http.internal.framed.ErrorCode access$800(com.adhoc.http.internal.framed.FramedStream) -> d
    void access$900(com.adhoc.http.internal.framed.FramedStream) -> e
    void access$1000(com.adhoc.http.internal.framed.FramedStream) -> f
    com.adhoc.http.internal.framed.FramedStream$StreamTimeout access$1100(com.adhoc.http.internal.framed.FramedStream) -> g
    void access$1200(com.adhoc.http.internal.framed.FramedStream) -> h
    void <clinit>() -> <clinit>
com.adhoc.http.internal.framed.FramedStream$1 -> com.adhoc.fs:
com.adhoc.http.internal.framed.FramedStream$FramedDataSink -> com.adhoc.ft:
    com.adhoc.io.Buffer sendBuffer -> c
    boolean closed -> d
    boolean finished -> e
    boolean $assertionsDisabled -> a
    com.adhoc.http.internal.framed.FramedStream this$0 -> b
    void <init>(com.adhoc.http.internal.framed.FramedStream) -> <init>
    void write(com.adhoc.io.Buffer,long) -> a_
    void emitDataFrame(boolean) -> a
    void flush() -> flush
    com.adhoc.io.Timeout timeout() -> a
    void close() -> close
    boolean access$202(com.adhoc.http.internal.framed.FramedStream$FramedDataSink,boolean) -> a
    boolean access$200(com.adhoc.http.internal.framed.FramedStream$FramedDataSink) -> a
    boolean access$400(com.adhoc.http.internal.framed.FramedStream$FramedDataSink) -> b
    void <clinit>() -> <clinit>
com.adhoc.http.internal.framed.FramedStream$FramedDataSource -> com.adhoc.fu:
    com.adhoc.io.Buffer receiveBuffer -> c
    com.adhoc.io.Buffer readBuffer -> d
    long maxByteCount -> e
    boolean closed -> f
    boolean finished -> g
    boolean $assertionsDisabled -> a
    com.adhoc.http.internal.framed.FramedStream this$0 -> b
    void <init>(com.adhoc.http.internal.framed.FramedStream,long) -> <init>
    long read(com.adhoc.io.Buffer,long) -> a
    void waitUntilReadable() -> b
    void receive(com.adhoc.io.BufferedSource,long) -> a
    com.adhoc.io.Timeout timeout() -> a
    void close() -> close
    void checkNotClosed() -> c
    void <init>(com.adhoc.http.internal.framed.FramedStream,long,com.adhoc.http.internal.framed.FramedStream$1) -> <init>
    boolean access$102(com.adhoc.http.internal.framed.FramedStream$FramedDataSource,boolean) -> a
    boolean access$100(com.adhoc.http.internal.framed.FramedStream$FramedDataSource) -> a
    boolean access$300(com.adhoc.http.internal.framed.FramedStream$FramedDataSource) -> b
    void <clinit>() -> <clinit>
com.adhoc.http.internal.framed.FramedStream$StreamTimeout -> com.adhoc.fv:
    com.adhoc.http.internal.framed.FramedStream this$0 -> a
    void <init>(com.adhoc.http.internal.framed.FramedStream) -> <init>
    void timedOut() -> a
    java.io.IOException newTimeoutException(java.io.IOException) -> a
    void exitAndThrowIfTimedOut() -> b
com.adhoc.http.internal.framed.Header -> com.adhoc.fw:
    com.adhoc.io.ByteString RESPONSE_STATUS -> a
    com.adhoc.io.ByteString TARGET_METHOD -> b
    com.adhoc.io.ByteString TARGET_PATH -> c
    com.adhoc.io.ByteString TARGET_SCHEME -> d
    com.adhoc.io.ByteString TARGET_AUTHORITY -> e
    com.adhoc.io.ByteString TARGET_HOST -> f
    com.adhoc.io.ByteString VERSION -> g
    com.adhoc.io.ByteString name -> h
    com.adhoc.io.ByteString value -> i
    int hpackSize -> j
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(com.adhoc.io.ByteString,java.lang.String) -> <init>
    void <init>(com.adhoc.io.ByteString,com.adhoc.io.ByteString) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.adhoc.http.internal.framed.HeadersMode -> com.adhoc.fx:
    com.adhoc.http.internal.framed.HeadersMode SPDY_SYN_STREAM -> a
    com.adhoc.http.internal.framed.HeadersMode SPDY_REPLY -> b
    com.adhoc.http.internal.framed.HeadersMode SPDY_HEADERS -> c
    com.adhoc.http.internal.framed.HeadersMode HTTP_20_HEADERS -> d
    com.adhoc.http.internal.framed.HeadersMode[] $VALUES -> e
    com.adhoc.http.internal.framed.HeadersMode[] values() -> values
    com.adhoc.http.internal.framed.HeadersMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean failIfStreamAbsent() -> a
    boolean failIfStreamPresent() -> b
    boolean failIfHeadersAbsent() -> c
    boolean failIfHeadersPresent() -> d
    void <clinit>() -> <clinit>
com.adhoc.http.internal.framed.Hpack -> com.adhoc.fy:
    com.adhoc.http.internal.framed.Header[] STATIC_HEADER_TABLE -> a
    java.util.Map NAME_TO_FIRST_INDEX -> b
    java.util.Map nameToFirstIndex() -> c
    com.adhoc.io.ByteString checkLowercase(com.adhoc.io.ByteString) -> b
    com.adhoc.http.internal.framed.Header[] access$000() -> a
    com.adhoc.io.ByteString access$100(com.adhoc.io.ByteString) -> a
    java.util.Map access$200() -> b
    void <clinit>() -> <clinit>
com.adhoc.http.internal.framed.Hpack$Reader -> com.adhoc.fz:
    java.util.List headerList -> e
    com.adhoc.io.BufferedSource source -> f
    int headerTableSizeSetting -> g
    int maxDynamicTableByteCount -> h
    com.adhoc.http.internal.framed.Header[] dynamicTable -> a
    int nextHeaderIndex -> b
    int headerCount -> c
    int dynamicTableByteCount -> d
    void <init>(int,com.adhoc.io.Source) -> <init>
    void headerTableSizeSetting(int) -> a
    void adjustDynamicTableByteCount() -> d
    void clearDynamicTable() -> e
    int evictToRecoverBytes(int) -> b
    void readHeaders() -> a
    java.util.List getAndResetHeaderList() -> b
    void readIndexedHeader(int) -> c
    int dynamicTableIndex(int) -> d
    void readLiteralHeaderWithoutIndexingIndexedName(int) -> e
    void readLiteralHeaderWithoutIndexingNewName() -> f
    void readLiteralHeaderWithIncrementalIndexingIndexedName(int) -> f
    void readLiteralHeaderWithIncrementalIndexingNewName() -> g
    com.adhoc.io.ByteString getName(int) -> g
    boolean isStaticHeader(int) -> h
    void insertIntoDynamicTable(int,com.adhoc.http.internal.framed.Header) -> a
    int readByte() -> h
    int readInt(int,int) -> a
    com.adhoc.io.ByteString readByteString() -> c
com.adhoc.http.internal.framed.Hpack$Writer -> com.adhoc.ga:
    com.adhoc.io.Buffer out -> a
    void <init>(com.adhoc.io.Buffer) -> <init>
    void writeHeaders(java.util.List) -> a
    void writeInt(int,int,int) -> a
    void writeByteString(com.adhoc.io.ByteString) -> a
com.adhoc.http.internal.framed.Http2 -> com.adhoc.gb:
    java.util.logging.Logger logger -> a
    com.adhoc.io.ByteString CONNECTION_PREFACE -> b
    void <init>() -> <init>
    com.adhoc.http.internal.framed.FrameReader newReader(com.adhoc.io.BufferedSource,boolean) -> a
    com.adhoc.http.internal.framed.FrameWriter newWriter(com.adhoc.io.BufferedSink,boolean) -> a
    java.lang.IllegalArgumentException illegalArgument(java.lang.String,java.lang.Object[]) -> c
    java.io.IOException ioException(java.lang.String,java.lang.Object[]) -> d
    int lengthWithoutPadding(int,byte,short) -> b
    int readMedium(com.adhoc.io.BufferedSource) -> b
    void writeMedium(com.adhoc.io.BufferedSink,int) -> b
    com.adhoc.io.ByteString access$000() -> a
    java.util.logging.Logger access$100() -> b
    java.io.IOException access$200(java.lang.String,java.lang.Object[]) -> a
    int access$300(com.adhoc.io.BufferedSource) -> a
    int access$400(int,byte,short) -> a
    java.lang.IllegalArgumentException access$500(java.lang.String,java.lang.Object[]) -> b
    void access$600(com.adhoc.io.BufferedSink,int) -> a
    void <clinit>() -> <clinit>
com.adhoc.http.internal.framed.Http2$ContinuationSource -> com.adhoc.gc:
    com.adhoc.io.BufferedSource source -> f
    int length -> a
    byte flags -> b
    int streamId -> c
    int left -> d
    short padding -> e
    void <init>(com.adhoc.io.BufferedSource) -> <init>
    long read(com.adhoc.io.Buffer,long) -> a
    com.adhoc.io.Timeout timeout() -> a
    void close() -> close
    void readContinuationHeader() -> b
com.adhoc.http.internal.framed.Http2$FrameLogger -> com.adhoc.gd:
    java.lang.String[] TYPES -> a
    java.lang.String[] FLAGS -> b
    java.lang.String[] BINARY -> c
    void <init>() -> <init>
    java.lang.String formatHeader(boolean,int,int,byte,byte) -> a
    java.lang.String formatFlags(byte,byte) -> a
    void <clinit>() -> <clinit>
com.adhoc.http.internal.framed.Http2$Reader -> com.adhoc.ge:
    com.adhoc.io.BufferedSource source -> b
    com.adhoc.http.internal.framed.Http2$ContinuationSource continuation -> c
    boolean client -> d
    com.adhoc.http.internal.framed.Hpack$Reader hpackReader -> a
    void <init>(com.adhoc.io.BufferedSource,int,boolean) -> <init>
    void readConnectionPreface() -> a
    boolean nextFrame(com.adhoc.http.internal.framed.FrameReader$Handler) -> a
    void readHeaders(com.adhoc.http.internal.framed.FrameReader$Handler,int,byte,int) -> a
    java.util.List readHeaderBlock(int,short,byte,int) -> a
    void readData(com.adhoc.http.internal.framed.FrameReader$Handler,int,byte,int) -> b
    void readPriority(com.adhoc.http.internal.framed.FrameReader$Handler,int,byte,int) -> c
    void readPriority(com.adhoc.http.internal.framed.FrameReader$Handler,int) -> a
    void readRstStream(com.adhoc.http.internal.framed.FrameReader$Handler,int,byte,int) -> d
    void readSettings(com.adhoc.http.internal.framed.FrameReader$Handler,int,byte,int) -> e
    void readPushPromise(com.adhoc.http.internal.framed.FrameReader$Handler,int,byte,int) -> f
    void readPing(com.adhoc.http.internal.framed.FrameReader$Handler,int,byte,int) -> g
    void readGoAway(com.adhoc.http.internal.framed.FrameReader$Handler,int,byte,int) -> h
    void readWindowUpdate(com.adhoc.http.internal.framed.FrameReader$Handler,int,byte,int) -> i
    void close() -> close
com.adhoc.http.internal.framed.Http2$Writer -> com.adhoc.gf:
    com.adhoc.io.BufferedSink sink -> a
    boolean client -> b
    com.adhoc.io.Buffer hpackBuffer -> c
    com.adhoc.http.internal.framed.Hpack$Writer hpackWriter -> d
    int maxFrameSize -> e
    boolean closed -> f
    void <init>(com.adhoc.io.BufferedSink,boolean) -> <init>
    void flush() -> b
    void ackSettings(com.adhoc.http.internal.framed.Settings) -> a
    void connectionPreface() -> a
    void synStream(boolean,boolean,int,int,java.util.List) -> a
    void pushPromise(int,int,java.util.List) -> a
    void headers(boolean,int,java.util.List) -> a
    void writeContinuationFrames(int,long) -> b
    void rstStream(int,com.adhoc.http.internal.framed.ErrorCode) -> a
    int maxDataLength() -> c
    void data(boolean,int,com.adhoc.io.Buffer,int) -> a
    void dataFrame(int,byte,com.adhoc.io.Buffer,int) -> a
    void settings(com.adhoc.http.internal.framed.Settings) -> b
    void ping(boolean,int,int) -> a
    void goAway(int,com.adhoc.http.internal.framed.ErrorCode,byte[]) -> a
    void windowUpdate(int,long) -> a
    void close() -> close
    void frameHeader(int,int,byte,byte) -> a
com.adhoc.http.internal.framed.Huffman -> com.adhoc.gg:
    int[] CODES -> a
    byte[] CODE_LENGTHS -> b
    com.adhoc.http.internal.framed.Huffman INSTANCE -> c
    com.adhoc.http.internal.framed.Huffman$Node root -> d
    com.adhoc.http.internal.framed.Huffman get() -> a
    void <init>() -> <init>
    byte[] decode(byte[]) -> a
    void buildTree() -> b
    void addCode(int,int,byte) -> a
    void <clinit>() -> <clinit>
com.adhoc.http.internal.framed.Huffman$Node -> com.adhoc.gh:
    com.adhoc.http.internal.framed.Huffman$Node[] children -> a
    int symbol -> b
    int terminalBits -> c
    void <init>() -> <init>
    void <init>(int,int) -> <init>
    com.adhoc.http.internal.framed.Huffman$Node[] access$000(com.adhoc.http.internal.framed.Huffman$Node) -> a
    int access$100(com.adhoc.http.internal.framed.Huffman$Node) -> b
    int access$200(com.adhoc.http.internal.framed.Huffman$Node) -> c
com.adhoc.http.internal.framed.IncomingStreamHandler -> com.adhoc.gi:
    com.adhoc.http.internal.framed.IncomingStreamHandler REFUSE_INCOMING_STREAMS -> a
    void receive(com.adhoc.http.internal.framed.FramedStream) -> a
    void <clinit>() -> <clinit>
com.adhoc.http.internal.framed.IncomingStreamHandler$1 -> com.adhoc.gj:
    void <init>() -> <init>
    void receive(com.adhoc.http.internal.framed.FramedStream) -> a
com.adhoc.http.internal.framed.NameValueBlockReader -> com.adhoc.gk:
    com.adhoc.io.InflaterSource inflaterSource -> a
    int compressedLimit -> b
    com.adhoc.io.BufferedSource source -> c
    void <init>(com.adhoc.io.BufferedSource) -> <init>
    java.util.List readNameValueBlock(int) -> a
    com.adhoc.io.ByteString readByteString() -> b
    void doneReading() -> c
    void close() -> a
    int access$000(com.adhoc.http.internal.framed.NameValueBlockReader) -> a
    int access$022(com.adhoc.http.internal.framed.NameValueBlockReader,long) -> a
com.adhoc.http.internal.framed.NameValueBlockReader$1 -> com.adhoc.gl:
    com.adhoc.http.internal.framed.NameValueBlockReader this$0 -> a
    void <init>(com.adhoc.http.internal.framed.NameValueBlockReader,com.adhoc.io.Source) -> <init>
    long read(com.adhoc.io.Buffer,long) -> a
com.adhoc.http.internal.framed.NameValueBlockReader$2 -> com.adhoc.gm:
    com.adhoc.http.internal.framed.NameValueBlockReader this$0 -> a
    void <init>(com.adhoc.http.internal.framed.NameValueBlockReader) -> <init>
    int inflate(byte[],int,int) -> inflate
com.adhoc.http.internal.framed.Ping -> com.adhoc.gn:
    java.util.concurrent.CountDownLatch latch -> a
    long sent -> b
    long received -> c
    void <init>() -> <init>
    void send() -> a
    void receive() -> b
    void cancel() -> c
com.adhoc.http.internal.framed.PushObserver -> com.adhoc.go:
    com.adhoc.http.internal.framed.PushObserver CANCEL -> a
    boolean onRequest(int,java.util.List) -> a
    boolean onHeaders(int,java.util.List,boolean) -> a
    boolean onData(int,com.adhoc.io.BufferedSource,int,boolean) -> a
    void onReset(int,com.adhoc.http.internal.framed.ErrorCode) -> a
    void <clinit>() -> <clinit>
com.adhoc.http.internal.framed.PushObserver$1 -> com.adhoc.gp:
    void <init>() -> <init>
    boolean onRequest(int,java.util.List) -> a
    boolean onHeaders(int,java.util.List,boolean) -> a
    boolean onData(int,com.adhoc.io.BufferedSource,int,boolean) -> a
    void onReset(int,com.adhoc.http.internal.framed.ErrorCode) -> a
com.adhoc.http.internal.framed.Settings -> com.adhoc.gq:
    int set -> a
    int persistValue -> b
    int persisted -> c
    int[] values -> d
    void <init>() -> <init>
    void clear() -> a
    com.adhoc.http.internal.framed.Settings set(int,int,int) -> a
    boolean isSet(int) -> a
    int get(int) -> b
    int flags(int) -> c
    int size() -> b
    int getHeaderTableSize() -> c
    int getMaxFrameSize(int) -> d
    int getInitialWindowSize(int) -> e
    boolean persistValue(int) -> f
    boolean isPersisted(int) -> g
    void merge(com.adhoc.http.internal.framed.Settings) -> a
com.adhoc.http.internal.framed.Spdy3 -> com.adhoc.gr:
    byte[] DICTIONARY -> a
    void <init>() -> <init>
    com.adhoc.http.internal.framed.FrameReader newReader(com.adhoc.io.BufferedSource,boolean) -> a
    com.adhoc.http.internal.framed.FrameWriter newWriter(com.adhoc.io.BufferedSink,boolean) -> a
    void <clinit>() -> <clinit>
com.adhoc.http.internal.framed.Spdy3$Reader -> com.adhoc.gs:
    com.adhoc.io.BufferedSource source -> a
    boolean client -> b
    com.adhoc.http.internal.framed.NameValueBlockReader headerBlockReader -> c
    void <init>(com.adhoc.io.BufferedSource,boolean) -> <init>
    void readConnectionPreface() -> a
    boolean nextFrame(com.adhoc.http.internal.framed.FrameReader$Handler) -> a
    void readSynStream(com.adhoc.http.internal.framed.FrameReader$Handler,int,int) -> a
    void readSynReply(com.adhoc.http.internal.framed.FrameReader$Handler,int,int) -> b
    void readRstStream(com.adhoc.http.internal.framed.FrameReader$Handler,int,int) -> c
    void readHeaders(com.adhoc.http.internal.framed.FrameReader$Handler,int,int) -> d
    void readWindowUpdate(com.adhoc.http.internal.framed.FrameReader$Handler,int,int) -> e
    void readPing(com.adhoc.http.internal.framed.FrameReader$Handler,int,int) -> f
    void readGoAway(com.adhoc.http.internal.framed.FrameReader$Handler,int,int) -> g
    void readSettings(com.adhoc.http.internal.framed.FrameReader$Handler,int,int) -> h
    java.io.IOException ioException(java.lang.String,java.lang.Object[]) -> a
    void close() -> close
com.adhoc.http.internal.framed.Spdy3$Writer -> com.adhoc.gt:
    com.adhoc.io.BufferedSink sink -> a
    com.adhoc.io.Buffer headerBlockBuffer -> b
    com.adhoc.io.BufferedSink headerBlockOut -> c
    boolean client -> d
    boolean closed -> e
    void <init>(com.adhoc.io.BufferedSink,boolean) -> <init>
    void ackSettings(com.adhoc.http.internal.framed.Settings) -> a
    void pushPromise(int,int,java.util.List) -> a
    void connectionPreface() -> a
    void flush() -> b
    void synStream(boolean,boolean,int,int,java.util.List) -> a
    void rstStream(int,com.adhoc.http.internal.framed.ErrorCode) -> a
    int maxDataLength() -> c
    void data(boolean,int,com.adhoc.io.Buffer,int) -> a
    void sendDataFrame(int,int,com.adhoc.io.Buffer,int) -> a
    void writeNameValueBlockToBuffer(java.util.List) -> a
    void settings(com.adhoc.http.internal.framed.Settings) -> b
    void ping(boolean,int,int) -> a
    void goAway(int,com.adhoc.http.internal.framed.ErrorCode,byte[]) -> a
    void windowUpdate(int,long) -> a
    void close() -> close
com.adhoc.http.internal.framed.Variant -> com.adhoc.gu:
    com.adhoc.http.internal.framed.FrameReader newReader(com.adhoc.io.BufferedSource,boolean) -> a
    com.adhoc.http.internal.framed.FrameWriter newWriter(com.adhoc.io.BufferedSink,boolean) -> a
com.adhoc.http.internal.http.AuthenticatorAdapter -> com.adhoc.gv:
    com.adhoc.http.Authenticator INSTANCE -> a
    void <init>() -> <init>
    com.adhoc.http.Request authenticate(java.net.Proxy,com.adhoc.http.Response) -> a
    com.adhoc.http.Request authenticateProxy(java.net.Proxy,com.adhoc.http.Response) -> b
    java.net.InetAddress getConnectToInetAddress(java.net.Proxy,com.adhoc.http.HttpUrl) -> a
    void <clinit>() -> <clinit>
com.adhoc.http.internal.http.CacheRequest -> com.adhoc.gw:
    com.adhoc.io.Sink body() -> b
    void abort() -> a
com.adhoc.http.internal.http.CacheStrategy -> com.adhoc.gx:
    com.adhoc.http.Request networkRequest -> a
    com.adhoc.http.Response cacheResponse -> b
    void <init>(com.adhoc.http.Request,com.adhoc.http.Response) -> <init>
    boolean isCacheable(com.adhoc.http.Response,com.adhoc.http.Request) -> a
    void <init>(com.adhoc.http.Request,com.adhoc.http.Response,com.adhoc.http.internal.http.CacheStrategy$1) -> <init>
com.adhoc.http.internal.http.CacheStrategy$1 -> com.adhoc.gy:
com.adhoc.http.internal.http.CacheStrategy$Factory -> com.adhoc.gz:
    long nowMillis -> a
    com.adhoc.http.Request request -> b
    com.adhoc.http.Response cacheResponse -> c
    java.util.Date servedDate -> d
    java.lang.String servedDateString -> e
    java.util.Date lastModified -> f
    java.lang.String lastModifiedString -> g
    java.util.Date expires -> h
    long sentRequestMillis -> i
    long receivedResponseMillis -> j
    java.lang.String etag -> k
    int ageSeconds -> l
    void <init>(long,com.adhoc.http.Request,com.adhoc.http.Response) -> <init>
    com.adhoc.http.internal.http.CacheStrategy get() -> a
    com.adhoc.http.internal.http.CacheStrategy getCandidate() -> b
    long computeFreshnessLifetime() -> c
    long cacheResponseAge() -> d
    boolean isFreshnessLifetimeHeuristic() -> e
    boolean hasConditions(com.adhoc.http.Request) -> a
com.adhoc.http.internal.http.FramedTransport -> com.adhoc.ha:
    java.util.List SPDY_3_PROHIBITED_HEADERS -> a
    java.util.List HTTP_2_PROHIBITED_HEADERS -> b
    com.adhoc.http.internal.http.HttpEngine httpEngine -> c
    com.adhoc.http.internal.framed.FramedConnection framedConnection -> d
    com.adhoc.http.internal.framed.FramedStream stream -> e
    void <init>(com.adhoc.http.internal.http.HttpEngine,com.adhoc.http.internal.framed.FramedConnection) -> <init>
    com.adhoc.io.Sink createRequestBody(com.adhoc.http.Request,long) -> a
    void writeRequestHeaders(com.adhoc.http.Request) -> a
    void writeRequestBody(com.adhoc.http.internal.http.RetryableSink) -> a
    void finishRequest() -> a
    com.adhoc.http.Response$Builder readResponseHeaders() -> b
    java.util.List writeNameValueBlock(com.adhoc.http.Request,com.adhoc.http.Protocol,java.lang.String) -> a
    java.lang.String joinOnNull(java.lang.String,java.lang.String) -> a
    com.adhoc.http.Response$Builder readNameValueBlock(java.util.List,com.adhoc.http.Protocol) -> a
    com.adhoc.http.ResponseBody openResponseBody(com.adhoc.http.Response) -> a
    void releaseConnectionOnIdle() -> c
    void disconnect(com.adhoc.http.internal.http.HttpEngine) -> a
    boolean canReuseConnection() -> d
    boolean isProhibitedHeader(com.adhoc.http.Protocol,com.adhoc.io.ByteString) -> a
    void <clinit>() -> <clinit>
com.adhoc.http.internal.http.HeaderParser -> com.adhoc.hb:
    int skipUntil(java.lang.String,int,java.lang.String) -> a
    int skipWhitespace(java.lang.String,int) -> a
    int parseSeconds(java.lang.String,int) -> b
com.adhoc.http.internal.http.HttpConnection -> com.adhoc.hc:
    com.adhoc.http.ConnectionPool pool -> a
    com.adhoc.http.Connection connection -> b
    java.net.Socket socket -> c
    com.adhoc.io.BufferedSource source -> d
    com.adhoc.io.BufferedSink sink -> e
    int state -> f
    int onIdle -> g
    void <init>(com.adhoc.http.ConnectionPool,com.adhoc.http.Connection,java.net.Socket) -> <init>
    void setTimeouts(int,int) -> a
    void poolOnIdle() -> a
    void closeOnIdle() -> b
    boolean isClosed() -> c
    void closeIfOwnedBy(java.lang.Object) -> a
    void flush() -> d
    long bufferSize() -> e
    boolean isReadable() -> f
    void writeRequest(com.adhoc.http.Headers,java.lang.String) -> a
    com.adhoc.http.Response$Builder readResponse() -> g
    void readHeaders(com.adhoc.http.Headers$Builder) -> a
    com.adhoc.io.Sink newChunkedSink() -> h
    com.adhoc.io.Sink newFixedLengthSink(long) -> a
    void writeRequestBody(com.adhoc.http.internal.http.RetryableSink) -> a
    com.adhoc.io.Source newFixedLengthSource(long) -> b
    com.adhoc.io.Source newChunkedSource(com.adhoc.http.internal.http.HttpEngine) -> a
    com.adhoc.io.Source newUnknownLengthSource() -> i
    com.adhoc.io.BufferedSink rawSink() -> j
    com.adhoc.io.BufferedSource rawSource() -> k
    void detachTimeout(com.adhoc.io.ForwardingTimeout) -> a
    com.adhoc.io.BufferedSink access$300(com.adhoc.http.internal.http.HttpConnection) -> a
    void access$400(com.adhoc.http.internal.http.HttpConnection,com.adhoc.io.ForwardingTimeout) -> a
    int access$502(com.adhoc.http.internal.http.HttpConnection,int) -> a
    com.adhoc.io.BufferedSource access$600(com.adhoc.http.internal.http.HttpConnection) -> b
    int access$500(com.adhoc.http.internal.http.HttpConnection) -> c
    int access$700(com.adhoc.http.internal.http.HttpConnection) -> d
    int access$702(com.adhoc.http.internal.http.HttpConnection,int) -> b
    com.adhoc.http.ConnectionPool access$800(com.adhoc.http.internal.http.HttpConnection) -> e
    com.adhoc.http.Connection access$900(com.adhoc.http.internal.http.HttpConnection) -> f
com.adhoc.http.internal.http.HttpConnection$1 -> com.adhoc.hd:
com.adhoc.http.internal.http.HttpConnection$AbstractSource -> com.adhoc.he:
    com.adhoc.io.ForwardingTimeout timeout -> a
    boolean closed -> b
    com.adhoc.http.internal.http.HttpConnection this$0 -> c
    void <init>(com.adhoc.http.internal.http.HttpConnection) -> <init>
    com.adhoc.io.Timeout timeout() -> a
    void endOfInput(boolean) -> a
    void unexpectedEndOfInput() -> b
    void <init>(com.adhoc.http.internal.http.HttpConnection,com.adhoc.http.internal.http.HttpConnection$1) -> <init>
com.adhoc.http.internal.http.HttpConnection$ChunkedSink -> com.adhoc.hf:
    com.adhoc.io.ForwardingTimeout timeout -> b
    boolean closed -> c
    com.adhoc.http.internal.http.HttpConnection this$0 -> a
    void <init>(com.adhoc.http.internal.http.HttpConnection) -> <init>
    com.adhoc.io.Timeout timeout() -> a
    void write(com.adhoc.io.Buffer,long) -> a_
    void flush() -> flush
    void close() -> close
    void <init>(com.adhoc.http.internal.http.HttpConnection,com.adhoc.http.internal.http.HttpConnection$1) -> <init>
com.adhoc.http.internal.http.HttpConnection$ChunkedSource -> com.adhoc.hg:
    long bytesRemainingInChunk -> e
    boolean hasMoreChunks -> f
    com.adhoc.http.internal.http.HttpEngine httpEngine -> g
    com.adhoc.http.internal.http.HttpConnection this$0 -> d
    void <init>(com.adhoc.http.internal.http.HttpConnection,com.adhoc.http.internal.http.HttpEngine) -> <init>
    long read(com.adhoc.io.Buffer,long) -> a
    void readChunkSize() -> c
    void close() -> close
com.adhoc.http.internal.http.HttpConnection$FixedLengthSink -> com.adhoc.hh:
    com.adhoc.io.ForwardingTimeout timeout -> b
    boolean closed -> c
    long bytesRemaining -> d
    com.adhoc.http.internal.http.HttpConnection this$0 -> a
    void <init>(com.adhoc.http.internal.http.HttpConnection,long) -> <init>
    com.adhoc.io.Timeout timeout() -> a
    void write(com.adhoc.io.Buffer,long) -> a_
    void flush() -> flush
    void close() -> close
    void <init>(com.adhoc.http.internal.http.HttpConnection,long,com.adhoc.http.internal.http.HttpConnection$1) -> <init>
com.adhoc.http.internal.http.HttpConnection$FixedLengthSource -> com.adhoc.hi:
    long bytesRemaining -> e
    com.adhoc.http.internal.http.HttpConnection this$0 -> d
    void <init>(com.adhoc.http.internal.http.HttpConnection,long) -> <init>
    long read(com.adhoc.io.Buffer,long) -> a
    void close() -> close
com.adhoc.http.internal.http.HttpConnection$UnknownLengthSource -> com.adhoc.hj:
    boolean inputExhausted -> e
    com.adhoc.http.internal.http.HttpConnection this$0 -> d
    void <init>(com.adhoc.http.internal.http.HttpConnection) -> <init>
    long read(com.adhoc.io.Buffer,long) -> a
    void close() -> close
    void <init>(com.adhoc.http.internal.http.HttpConnection,com.adhoc.http.internal.http.HttpConnection$1) -> <init>
com.adhoc.http.internal.http.HttpDate -> com.adhoc.hk:
    java.util.TimeZone GMT -> a
    java.lang.ThreadLocal STANDARD_DATE_FORMAT -> b
    java.lang.String[] BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS -> c
    java.text.DateFormat[] BROWSER_COMPATIBLE_DATE_FORMATS -> d
    java.util.Date parse(java.lang.String) -> a
    java.util.TimeZone access$000() -> a
    void <clinit>() -> <clinit>
com.adhoc.http.internal.http.HttpDate$1 -> com.adhoc.hl:
    void <init>() -> <init>
    java.text.DateFormat initialValue() -> a
    java.lang.Object initialValue() -> initialValue
com.adhoc.http.internal.http.HttpEngine -> com.adhoc.hm:
    com.adhoc.http.ResponseBody EMPTY_BODY -> d
    com.adhoc.http.OkHttpClient client -> a
    com.adhoc.http.Connection connection -> e
    com.adhoc.http.Address address -> f
    com.adhoc.http.internal.http.RouteSelector routeSelector -> g
    com.adhoc.http.Route route -> h
    com.adhoc.http.Response priorResponse -> i
    com.adhoc.http.internal.http.Transport transport -> j
    long sentRequestMillis -> b
    boolean transparentGzip -> k
    boolean bufferRequestBody -> c
    com.adhoc.http.Request userRequest -> l
    com.adhoc.http.Request networkRequest -> m
    com.adhoc.http.Response cacheResponse -> n
    com.adhoc.http.Response userResponse -> o
    com.adhoc.io.Sink requestBodyOut -> p
    com.adhoc.io.BufferedSink bufferedRequestBody -> q
    boolean callerWritesRequestBody -> r
    boolean forWebSocket -> s
    com.adhoc.http.internal.http.CacheRequest storeRequest -> t
    com.adhoc.http.internal.http.CacheStrategy cacheStrategy -> u
    void <init>(com.adhoc.http.OkHttpClient,com.adhoc.http.Request,boolean,boolean,boolean,com.adhoc.http.Connection,com.adhoc.http.internal.http.RouteSelector,com.adhoc.http.internal.http.RetryableSink,com.adhoc.http.Response) -> <init>
    void sendRequest() -> a
    com.adhoc.http.Response stripBody(com.adhoc.http.Response) -> b
    void connect() -> m
    com.adhoc.http.Connection createNextConnection() -> n
    void writingRequestHeaders() -> b
    boolean permitsRequestBody() -> c
    com.adhoc.http.Request getRequest() -> d
    com.adhoc.http.Response getResponse() -> e
    com.adhoc.http.Connection getConnection() -> f
    com.adhoc.http.internal.http.HttpEngine recover(com.adhoc.http.internal.http.RouteException) -> a
    boolean isRecoverable(com.adhoc.http.internal.http.RouteException) -> b
    com.adhoc.http.internal.http.HttpEngine recover(java.io.IOException,com.adhoc.io.Sink) -> a
    void connectFailed(com.adhoc.http.internal.http.RouteSelector,java.io.IOException) -> a
    boolean isRecoverable(java.io.IOException) -> a
    com.adhoc.http.Route getRoute() -> g
    void maybeCache() -> o
    void releaseConnection() -> h
    void disconnect() -> i
    com.adhoc.http.Connection close() -> j
    com.adhoc.http.Response unzip(com.adhoc.http.Response) -> c
    boolean hasBody(com.adhoc.http.Response) -> a
    com.adhoc.http.Request networkRequest(com.adhoc.http.Request) -> a
    void readResponse() -> k
    com.adhoc.http.Response readNetworkResponse() -> p
    com.adhoc.http.Response cacheWritingResponse(com.adhoc.http.internal.http.CacheRequest,com.adhoc.http.Response) -> a
    boolean validate(com.adhoc.http.Response,com.adhoc.http.Response) -> a
    com.adhoc.http.Headers combine(com.adhoc.http.Headers,com.adhoc.http.Headers) -> a
    void receiveHeaders(com.adhoc.http.Headers) -> a
    com.adhoc.http.Request followUpRequest() -> l
    boolean sameConnection(com.adhoc.http.HttpUrl) -> a
    com.adhoc.http.Address createAddress(com.adhoc.http.OkHttpClient,com.adhoc.http.Request) -> a
    com.adhoc.http.Connection access$000(com.adhoc.http.internal.http.HttpEngine) -> a
    com.adhoc.http.internal.http.Transport access$100(com.adhoc.http.internal.http.HttpEngine) -> b
    com.adhoc.http.Request access$202(com.adhoc.http.internal.http.HttpEngine,com.adhoc.http.Request) -> a
    com.adhoc.http.Response access$300(com.adhoc.http.internal.http.HttpEngine) -> c
    void <clinit>() -> <clinit>
com.adhoc.http.internal.http.HttpEngine$1 -> com.adhoc.hn:
    void <init>() -> <init>
    com.adhoc.http.MediaType contentType() -> a
    long contentLength() -> b
    com.adhoc.io.BufferedSource source() -> c
com.adhoc.http.internal.http.HttpEngine$2 -> com.adhoc.ho:
    boolean cacheRequestClosed -> a
    com.adhoc.io.BufferedSource val$source -> b
    com.adhoc.http.internal.http.CacheRequest val$cacheRequest -> c
    com.adhoc.io.BufferedSink val$cacheBody -> d
    com.adhoc.http.internal.http.HttpEngine this$0 -> e
    void <init>(com.adhoc.http.internal.http.HttpEngine,com.adhoc.io.BufferedSource,com.adhoc.http.internal.http.CacheRequest,com.adhoc.io.BufferedSink) -> <init>
    long read(com.adhoc.io.Buffer,long) -> a
    com.adhoc.io.Timeout timeout() -> a
    void close() -> close
com.adhoc.http.internal.http.HttpEngine$NetworkInterceptorChain -> com.adhoc.hp:
    int index -> b
    com.adhoc.http.Request request -> c
    int calls -> d
    com.adhoc.http.internal.http.HttpEngine this$0 -> a
    void <init>(com.adhoc.http.internal.http.HttpEngine,int,com.adhoc.http.Request) -> <init>
    com.adhoc.http.Connection connection() -> a
    com.adhoc.http.Response proceed(com.adhoc.http.Request) -> a
com.adhoc.http.internal.http.HttpMethod -> com.adhoc.hq:
    boolean invalidatesCache(java.lang.String) -> a
    boolean requiresRequestBody(java.lang.String) -> b
    boolean permitsRequestBody(java.lang.String) -> c
com.adhoc.http.internal.http.HttpTransport -> com.adhoc.hr:
    com.adhoc.http.internal.http.HttpEngine httpEngine -> a
    com.adhoc.http.internal.http.HttpConnection httpConnection -> b
    void <init>(com.adhoc.http.internal.http.HttpEngine,com.adhoc.http.internal.http.HttpConnection) -> <init>
    com.adhoc.io.Sink createRequestBody(com.adhoc.http.Request,long) -> a
    void finishRequest() -> a
    void writeRequestBody(com.adhoc.http.internal.http.RetryableSink) -> a
    void writeRequestHeaders(com.adhoc.http.Request) -> a
    com.adhoc.http.Response$Builder readResponseHeaders() -> b
    void releaseConnectionOnIdle() -> c
    boolean canReuseConnection() -> d
    com.adhoc.http.ResponseBody openResponseBody(com.adhoc.http.Response) -> a
    com.adhoc.io.Source getTransferStream(com.adhoc.http.Response) -> b
    void disconnect(com.adhoc.http.internal.http.HttpEngine) -> a
com.adhoc.http.internal.http.OkHeaders -> com.adhoc.hs:
    java.util.Comparator FIELD_NAME_COMPARATOR -> e
    java.lang.String PREFIX -> a
    java.lang.String SENT_MILLIS -> b
    java.lang.String RECEIVED_MILLIS -> c
    java.lang.String SELECTED_PROTOCOL -> d
    long contentLength(com.adhoc.http.Request) -> a
    long contentLength(com.adhoc.http.Response) -> a
    long contentLength(com.adhoc.http.Headers) -> a
    long stringToLong(java.lang.String) -> b
    java.util.Map toMultimap(com.adhoc.http.Headers,java.lang.String) -> a
    void addCookies(com.adhoc.http.Request$Builder,java.util.Map) -> a
    java.lang.String buildCookieHeader(java.util.List) -> a
    boolean varyMatches(com.adhoc.http.Response,com.adhoc.http.Headers,com.adhoc.http.Request) -> a
    boolean hasVaryAll(com.adhoc.http.Response) -> b
    boolean hasVaryAll(com.adhoc.http.Headers) -> b
    java.util.Set varyFields(com.adhoc.http.Response) -> d
    java.util.Set varyFields(com.adhoc.http.Headers) -> c
    com.adhoc.http.Headers varyHeaders(com.adhoc.http.Response) -> c
    com.adhoc.http.Headers varyHeaders(com.adhoc.http.Headers,com.adhoc.http.Headers) -> a
    boolean isEndToEnd(java.lang.String) -> a
    java.util.List parseChallenges(com.adhoc.http.Headers,java.lang.String) -> b
    com.adhoc.http.Request processAuthHeader(com.adhoc.http.Authenticator,com.adhoc.http.Response,java.net.Proxy) -> a
    void <clinit>() -> <clinit>
com.adhoc.http.internal.http.OkHeaders$1 -> com.adhoc.ht:
    void <init>() -> <init>
    int compare(java.lang.String,java.lang.String) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.adhoc.http.internal.http.RealResponseBody -> com.adhoc.hu:
    com.adhoc.http.Headers headers -> a
    com.adhoc.io.BufferedSource source -> b
    void <init>(com.adhoc.http.Headers,com.adhoc.io.BufferedSource) -> <init>
    com.adhoc.http.MediaType contentType() -> a
    long contentLength() -> b
    com.adhoc.io.BufferedSource source() -> c
com.adhoc.http.internal.http.RequestException -> com.adhoc.hv:
    void <init>(java.io.IOException) -> <init>
    java.io.IOException getCause() -> a
    java.lang.Throwable getCause() -> getCause
com.adhoc.http.internal.http.RequestLine -> com.adhoc.hw:
    java.lang.String get(com.adhoc.http.Request,java.net.Proxy$Type,com.adhoc.http.Protocol) -> a
    boolean includeAuthorityInRequestLine(com.adhoc.http.Request,java.net.Proxy$Type) -> a
    java.lang.String requestPath(com.adhoc.http.HttpUrl) -> a
    java.lang.String version(com.adhoc.http.Protocol) -> a
com.adhoc.http.internal.http.RetryableSink -> com.adhoc.hx:
    boolean closed -> a
    int limit -> b
    com.adhoc.io.Buffer content -> c
    void <init>(int) -> <init>
    void <init>() -> <init>
    void close() -> close
    void write(com.adhoc.io.Buffer,long) -> a_
    void flush() -> flush
    com.adhoc.io.Timeout timeout() -> a
    long contentLength() -> b
    void writeToSocket(com.adhoc.io.Sink) -> a
com.adhoc.http.internal.http.RouteException -> com.adhoc.hy:
    java.lang.reflect.Method addSuppressedExceptionMethod -> a
    java.io.IOException lastException -> b
    void <init>(java.io.IOException) -> <init>
    java.io.IOException getLastConnectException() -> a
    void addConnectException(java.io.IOException) -> a
    void addSuppressedIfPossible(java.io.IOException,java.io.IOException) -> a
    void <clinit>() -> <clinit>
com.adhoc.http.internal.http.RouteSelector -> com.adhoc.hz:
    com.adhoc.http.Address address -> a
    com.adhoc.http.HttpUrl url -> b
    com.adhoc.http.internal.Network network -> c
    com.adhoc.http.OkHttpClient client -> d
    com.adhoc.http.internal.RouteDatabase routeDatabase -> e
    java.net.Proxy lastProxy -> f
    java.net.InetSocketAddress lastInetSocketAddress -> g
    java.util.List proxies -> h
    int nextProxyIndex -> i
    java.util.List inetSocketAddresses -> j
    int nextInetSocketAddressIndex -> k
    java.util.List postponedRoutes -> l
    void <init>(com.adhoc.http.Address,com.adhoc.http.HttpUrl,com.adhoc.http.OkHttpClient) -> <init>
    com.adhoc.http.internal.http.RouteSelector get(com.adhoc.http.Address,com.adhoc.http.Request,com.adhoc.http.OkHttpClient) -> a
    boolean hasNext() -> a
    com.adhoc.http.Route next() -> b
    void connectFailed(com.adhoc.http.Route,java.io.IOException) -> a
    void resetNextProxy(com.adhoc.http.HttpUrl,java.net.Proxy) -> a
    boolean hasNextProxy() -> c
    java.net.Proxy nextProxy() -> d
    void resetNextInetSocketAddress(java.net.Proxy) -> a
    java.lang.String getHostString(java.net.InetSocketAddress) -> a
    boolean hasNextInetSocketAddress() -> e
    java.net.InetSocketAddress nextInetSocketAddress() -> f
    boolean hasNextPostponed() -> g
    com.adhoc.http.Route nextPostponed() -> h
com.adhoc.http.internal.http.StatusLine -> com.adhoc.ia:
    com.adhoc.http.Protocol protocol -> a
    int code -> b
    java.lang.String message -> c
    void <init>(com.adhoc.http.Protocol,int,java.lang.String) -> <init>
    com.adhoc.http.internal.http.StatusLine parse(java.lang.String) -> a
    java.lang.String toString() -> toString
com.adhoc.http.internal.http.Transport -> com.adhoc.ib:
    com.adhoc.io.Sink createRequestBody(com.adhoc.http.Request,long) -> a
    void writeRequestHeaders(com.adhoc.http.Request) -> a
    void writeRequestBody(com.adhoc.http.internal.http.RetryableSink) -> a
    void finishRequest() -> a
    com.adhoc.http.Response$Builder readResponseHeaders() -> b
    com.adhoc.http.ResponseBody openResponseBody(com.adhoc.http.Response) -> a
    void releaseConnectionOnIdle() -> c
    void disconnect(com.adhoc.http.internal.http.HttpEngine) -> a
    boolean canReuseConnection() -> d
com.adhoc.http.internal.io.FileSystem -> com.adhoc.ic:
    com.adhoc.http.internal.io.FileSystem SYSTEM -> a
    com.adhoc.io.Source source(java.io.File) -> a
    com.adhoc.io.Sink sink(java.io.File) -> b
    com.adhoc.io.Sink appendingSink(java.io.File) -> c
    void delete(java.io.File) -> d
    boolean exists(java.io.File) -> e
    long size(java.io.File) -> f
    void rename(java.io.File,java.io.File) -> a
    void deleteContents(java.io.File) -> g
    void <clinit>() -> <clinit>
com.adhoc.http.internal.io.FileSystem$1 -> com.adhoc.id:
    void <init>() -> <init>
    com.adhoc.io.Source source(java.io.File) -> a
    com.adhoc.io.Sink sink(java.io.File) -> b
    com.adhoc.io.Sink appendingSink(java.io.File) -> c
    void delete(java.io.File) -> d
    boolean exists(java.io.File) -> e
    long size(java.io.File) -> f
    void rename(java.io.File,java.io.File) -> a
    void deleteContents(java.io.File) -> g
com.adhoc.http.internal.tls.DistinguishedNameParser -> com.adhoc.ie:
    java.lang.String dn -> a
    int length -> b
    int pos -> c
    int beg -> d
    int end -> e
    int cur -> f
    char[] chars -> g
    void <init>(javax.security.auth.x500.X500Principal) -> <init>
    java.lang.String nextAT() -> a
    java.lang.String quotedAV() -> b
    java.lang.String hexAV() -> c
    java.lang.String escapedAV() -> d
    char getEscaped() -> e
    char getUTF8() -> f
    int getByte(int) -> a
    java.lang.String findMostSpecific(java.lang.String) -> a
com.adhoc.http.internal.tls.OkHostnameVerifier -> com.adhoc.if:
    com.adhoc.http.internal.tls.OkHostnameVerifier INSTANCE -> a
    java.util.regex.Pattern VERIFY_AS_IP_ADDRESS -> b
    void <init>() -> <init>
    boolean verify(java.lang.String,javax.net.ssl.SSLSession) -> verify
    boolean verify(java.lang.String,java.security.cert.X509Certificate) -> a
    boolean verifyAsIpAddress(java.lang.String) -> a
    boolean verifyIpAddress(java.lang.String,java.security.cert.X509Certificate) -> b
    boolean verifyHostName(java.lang.String,java.security.cert.X509Certificate) -> c
    java.util.List allSubjectAltNames(java.security.cert.X509Certificate) -> a
    java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int) -> a
    boolean verifyHostName(java.lang.String,java.lang.String) -> a
    void <clinit>() -> <clinit>
com.adhoc.http.internal.ws.RealWebSocket -> com.adhoc.ig:
    com.adhoc.http.internal.ws.WebSocketWriter writer -> a
    com.adhoc.http.internal.ws.WebSocketReader reader -> b
    com.adhoc.http.ws.WebSocketListener listener -> c
    boolean writerSentClose -> d
    boolean readerSentClose -> e
    java.lang.Object closeLock -> f
    void <init>(boolean,com.adhoc.io.BufferedSource,com.adhoc.io.BufferedSink,java.util.Random,java.util.concurrent.Executor,com.adhoc.http.ws.WebSocketListener,java.lang.String) -> <init>
    boolean readMessage() -> a
    void sendMessage(com.adhoc.http.ws.WebSocket$PayloadType,com.adhoc.io.Buffer) -> a
    void close(int,java.lang.String) -> a
    void peerClose(int,java.lang.String,boolean) -> a
    void readerErrorClose(java.io.IOException) -> a
    void closeConnection() -> b
    com.adhoc.http.internal.ws.WebSocketWriter access$000(com.adhoc.http.internal.ws.RealWebSocket) -> a
    java.lang.Object access$100(com.adhoc.http.internal.ws.RealWebSocket) -> b
    boolean access$202(com.adhoc.http.internal.ws.RealWebSocket,boolean) -> a
    boolean access$300(com.adhoc.http.internal.ws.RealWebSocket) -> c
    void access$400(com.adhoc.http.internal.ws.RealWebSocket,int,java.lang.String,boolean) -> a
com.adhoc.http.internal.ws.RealWebSocket$1 -> com.adhoc.ih:
    com.adhoc.http.ws.WebSocketListener val$listener -> a
    java.util.concurrent.Executor val$replyExecutor -> b
    java.lang.String val$url -> c
    com.adhoc.http.internal.ws.RealWebSocket this$0 -> d
    void <init>(com.adhoc.http.internal.ws.RealWebSocket,com.adhoc.http.ws.WebSocketListener,java.util.concurrent.Executor,java.lang.String) -> <init>
    void onMessage(com.adhoc.io.BufferedSource,com.adhoc.http.ws.WebSocket$PayloadType) -> a
    void onPing(com.adhoc.io.Buffer) -> a
    void onPong(com.adhoc.io.Buffer) -> b
    void onClose(int,java.lang.String) -> a
com.adhoc.http.internal.ws.RealWebSocket$1$1 -> com.adhoc.ii:
    com.adhoc.io.Buffer val$buffer -> a
    com.adhoc.http.internal.ws.RealWebSocket$1 this$1 -> c
    void <init>(com.adhoc.http.internal.ws.RealWebSocket$1,java.lang.String,java.lang.Object[],com.adhoc.io.Buffer) -> <init>
    void execute() -> b
com.adhoc.http.internal.ws.RealWebSocket$1$2 -> com.adhoc.ij:
    int val$code -> a
    java.lang.String val$reason -> c
    boolean val$writeCloseResponse -> d
    com.adhoc.http.internal.ws.RealWebSocket$1 this$1 -> e
    void <init>(com.adhoc.http.internal.ws.RealWebSocket$1,java.lang.String,java.lang.Object[],int,java.lang.String,boolean) -> <init>
    void execute() -> b
com.adhoc.http.internal.ws.WebSocketProtocol -> com.adhoc.ik:
    void toggleMask(byte[],long,byte[],long) -> a
com.adhoc.http.internal.ws.WebSocketReader -> com.adhoc.il:
    boolean isClient -> a
    com.adhoc.io.BufferedSource source -> b
    com.adhoc.http.internal.ws.WebSocketReader$FrameCallback frameCallback -> c
    com.adhoc.io.Source framedMessageSource -> d
    boolean closed -> e
    boolean messageClosed -> f
    int opcode -> g
    long frameLength -> h
    long frameBytesRead -> i
    boolean isFinalFrame -> j
    boolean isControlFrame -> k
    boolean isMasked -> l
    byte[] maskKey -> m
    byte[] maskBuffer -> n
    void <init>(boolean,com.adhoc.io.BufferedSource,com.adhoc.http.internal.ws.WebSocketReader$FrameCallback) -> <init>
    void processNextFrame() -> a
    void readHeader() -> b
    void readControlFrame() -> c
    void readMessageFrame() -> d
    void readUntilNonControlFrame() -> e
    boolean access$100(com.adhoc.http.internal.ws.WebSocketReader) -> a
    boolean access$200(com.adhoc.http.internal.ws.WebSocketReader) -> b
    long access$300(com.adhoc.http.internal.ws.WebSocketReader) -> c
    long access$400(com.adhoc.http.internal.ws.WebSocketReader) -> d
    boolean access$500(com.adhoc.http.internal.ws.WebSocketReader) -> e
    void access$600(com.adhoc.http.internal.ws.WebSocketReader) -> f
    int access$700(com.adhoc.http.internal.ws.WebSocketReader) -> g
    boolean access$800(com.adhoc.http.internal.ws.WebSocketReader) -> h
    byte[] access$900(com.adhoc.http.internal.ws.WebSocketReader) -> i
    com.adhoc.io.BufferedSource access$1000(com.adhoc.http.internal.ws.WebSocketReader) -> j
    byte[] access$1100(com.adhoc.http.internal.ws.WebSocketReader) -> k
    long access$314(com.adhoc.http.internal.ws.WebSocketReader,long) -> a
    boolean access$202(com.adhoc.http.internal.ws.WebSocketReader,boolean) -> a
com.adhoc.http.internal.ws.WebSocketReader$1 -> com.adhoc.im:
com.adhoc.http.internal.ws.WebSocketReader$FrameCallback -> com.adhoc.in:
    void onMessage(com.adhoc.io.BufferedSource,com.adhoc.http.ws.WebSocket$PayloadType) -> a
    void onPing(com.adhoc.io.Buffer) -> a
    void onPong(com.adhoc.io.Buffer) -> b
    void onClose(int,java.lang.String) -> a
com.adhoc.http.internal.ws.WebSocketReader$FramedMessageSource -> com.adhoc.io:
    com.adhoc.http.internal.ws.WebSocketReader this$0 -> a
    void <init>(com.adhoc.http.internal.ws.WebSocketReader) -> <init>
    long read(com.adhoc.io.Buffer,long) -> a
    com.adhoc.io.Timeout timeout() -> a
    void close() -> close
    void <init>(com.adhoc.http.internal.ws.WebSocketReader,com.adhoc.http.internal.ws.WebSocketReader$1) -> <init>
com.adhoc.http.internal.ws.WebSocketWriter -> com.adhoc.ip:
    boolean isClient -> a
    com.adhoc.io.BufferedSink sink -> b
    java.util.Random random -> c
    com.adhoc.http.internal.ws.WebSocketWriter$FrameSink frameSink -> d
    boolean closed -> e
    boolean activeWriter -> f
    byte[] maskKey -> g
    byte[] maskBuffer -> h
    void <init>(boolean,com.adhoc.io.BufferedSink,java.util.Random) -> <init>
    void writePong(com.adhoc.io.Buffer) -> a
    void writeClose(int,java.lang.String) -> a
    void writeControlFrame(int,com.adhoc.io.Buffer) -> a
    void sendMessage(com.adhoc.http.ws.WebSocket$PayloadType,com.adhoc.io.Buffer) -> a
    void writeFrame(com.adhoc.http.ws.WebSocket$PayloadType,com.adhoc.io.Buffer,long,boolean,boolean) -> a
    void writeAllMasked(com.adhoc.io.BufferedSource,long) -> a
    void access$300(com.adhoc.http.internal.ws.WebSocketWriter,com.adhoc.http.ws.WebSocket$PayloadType,com.adhoc.io.Buffer,long,boolean,boolean) -> a
    boolean access$400(com.adhoc.http.internal.ws.WebSocketWriter) -> a
    com.adhoc.io.BufferedSink access$500(com.adhoc.http.internal.ws.WebSocketWriter) -> b
    boolean access$600(com.adhoc.http.internal.ws.WebSocketWriter) -> c
    byte[] access$700(com.adhoc.http.internal.ws.WebSocketWriter) -> d
    java.util.Random access$800(com.adhoc.http.internal.ws.WebSocketWriter) -> e
    boolean access$902(com.adhoc.http.internal.ws.WebSocketWriter,boolean) -> a
com.adhoc.http.internal.ws.WebSocketWriter$1 -> com.adhoc.iq:
    int[] $SwitchMap$com$adhoc$http$ws$WebSocket$PayloadType -> a
    void <clinit>() -> <clinit>
com.adhoc.http.internal.ws.WebSocketWriter$FrameSink -> com.adhoc.ir:
    com.adhoc.http.ws.WebSocket$PayloadType payloadType -> b
    boolean isFirstFrame -> c
    com.adhoc.http.internal.ws.WebSocketWriter this$0 -> a
    void <init>(com.adhoc.http.internal.ws.WebSocketWriter) -> <init>
    void write(com.adhoc.io.Buffer,long) -> a_
    void flush() -> flush
    com.adhoc.io.Timeout timeout() -> a
    void close() -> close
    void <init>(com.adhoc.http.internal.ws.WebSocketWriter,com.adhoc.http.internal.ws.WebSocketWriter$1) -> <init>
com.adhoc.http.ws.WebSocket -> com.adhoc.is:
    void sendMessage(com.adhoc.http.ws.WebSocket$PayloadType,com.adhoc.io.Buffer) -> a
    void close(int,java.lang.String) -> a
com.adhoc.http.ws.WebSocket$PayloadType -> com.adhoc.it:
    com.adhoc.http.ws.WebSocket$PayloadType TEXT -> a
    com.adhoc.http.ws.WebSocket$PayloadType BINARY -> b
    com.adhoc.http.ws.WebSocket$PayloadType[] $VALUES -> c
    com.adhoc.http.ws.WebSocket$PayloadType[] values() -> values
    com.adhoc.http.ws.WebSocket$PayloadType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.adhoc.http.ws.WebSocketCall -> com.adhoc.iu:
    com.adhoc.http.Request request -> a
    com.adhoc.http.Call call -> b
    java.util.Random random -> c
    java.lang.String key -> d
    com.adhoc.http.ws.WebSocketCall create(com.adhoc.http.OkHttpClient,com.adhoc.http.Request) -> a
    void <init>(com.adhoc.http.OkHttpClient,com.adhoc.http.Request) -> <init>
    void <init>(com.adhoc.http.OkHttpClient,com.adhoc.http.Request,java.util.Random) -> <init>
    void enqueue(com.adhoc.http.ws.WebSocketListener) -> a
    void cancel() -> a
    void createWebSocket(com.adhoc.http.Response,com.adhoc.http.ws.WebSocketListener) -> a
    void access$000(com.adhoc.http.ws.WebSocketCall,com.adhoc.http.Response,com.adhoc.http.ws.WebSocketListener) -> a
com.adhoc.http.ws.WebSocketCall$1 -> com.adhoc.iv:
    com.adhoc.http.ws.WebSocketListener val$listener -> a
    com.adhoc.http.ws.WebSocketCall this$0 -> b
    void <init>(com.adhoc.http.ws.WebSocketCall,com.adhoc.http.ws.WebSocketListener) -> <init>
    void onResponse(com.adhoc.http.Response) -> a
    void onFailure(com.adhoc.http.Request,java.io.IOException) -> a
com.adhoc.http.ws.WebSocketCall$ConnectionWebSocket -> com.adhoc.iw:
    com.adhoc.http.Connection connection -> a
    com.adhoc.http.internal.ws.RealWebSocket create(com.adhoc.http.Response,com.adhoc.http.Connection,com.adhoc.io.BufferedSource,com.adhoc.io.BufferedSink,java.util.Random,com.adhoc.http.ws.WebSocketListener) -> a
    void <init>(com.adhoc.http.Connection,com.adhoc.io.BufferedSource,com.adhoc.io.BufferedSink,java.util.Random,java.util.concurrent.Executor,com.adhoc.http.ws.WebSocketListener,java.lang.String) -> <init>
    void closeConnection() -> b
com.adhoc.http.ws.WebSocketListener -> com.adhoc.ix:
    void onOpen(com.adhoc.http.ws.WebSocket,com.adhoc.http.Response) -> a
    void onFailure(java.io.IOException,com.adhoc.http.Response) -> a
    void onMessage(com.adhoc.io.BufferedSource,com.adhoc.http.ws.WebSocket$PayloadType) -> a
    void onPong(com.adhoc.io.Buffer) -> a
    void onClose(int,java.lang.String) -> a
com.adhoc.io.AsyncTimeout -> com.adhoc.iy:
    com.adhoc.io.AsyncTimeout head -> a
    boolean inQueue -> c
    com.adhoc.io.AsyncTimeout next -> d
    long timeoutAt -> e
    void <init>() -> <init>
    void enter() -> c
    void scheduleTimeout(com.adhoc.io.AsyncTimeout,long,boolean) -> a
    boolean exit() -> a_
    boolean cancelScheduledTimeout(com.adhoc.io.AsyncTimeout) -> a
    long remainingNanos(long) -> b
    void timedOut() -> a
    com.adhoc.io.Sink sink(com.adhoc.io.Sink) -> a
    com.adhoc.io.Source source(com.adhoc.io.Source) -> a
    void exit(boolean) -> a
    java.io.IOException exit(java.io.IOException) -> b
    com.adhoc.io.AsyncTimeout awaitTimeout() -> h
    com.adhoc.io.AsyncTimeout access$000() -> e
com.adhoc.io.AsyncTimeout$1 -> com.adhoc.iz:
    com.adhoc.io.Sink val$sink -> a
    com.adhoc.io.AsyncTimeout this$0 -> b
    void <init>(com.adhoc.io.AsyncTimeout,com.adhoc.io.Sink) -> <init>
    void write(com.adhoc.io.Buffer,long) -> a_
    void flush() -> flush
    void close() -> close
    com.adhoc.io.Timeout timeout() -> a
    java.lang.String toString() -> toString
com.adhoc.io.AsyncTimeout$2 -> com.adhoc.ja:
    com.adhoc.io.Source val$source -> a
    com.adhoc.io.AsyncTimeout this$0 -> b
    void <init>(com.adhoc.io.AsyncTimeout,com.adhoc.io.Source) -> <init>
    long read(com.adhoc.io.Buffer,long) -> a
    void close() -> close
    com.adhoc.io.Timeout timeout() -> a
    java.lang.String toString() -> toString
com.adhoc.io.AsyncTimeout$Watchdog -> com.adhoc.jb:
    void <init>() -> <init>
    void run() -> run
com.adhoc.io.Base64 -> com.adhoc.jc:
    byte[] MAP -> a
    byte[] URL_MAP -> b
    byte[] decode(java.lang.String) -> a
    java.lang.String encode(byte[]) -> a
    java.lang.String encode(byte[],byte[]) -> a
    void <clinit>() -> <clinit>
com.adhoc.io.Buffer -> com.adhoc.jd:
    byte[] DIGITS -> c
    com.adhoc.io.Segment head -> a
    long size -> b
    void <init>() -> <init>
    long size() -> b
    com.adhoc.io.Buffer buffer() -> c
    com.adhoc.io.Buffer emitCompleteSegments() -> d
    com.adhoc.io.BufferedSink emit() -> e
    boolean exhausted() -> f
    void require(long) -> a
    java.io.InputStream inputStream() -> g
    com.adhoc.io.Buffer copyTo(com.adhoc.io.Buffer,long,long) -> a
    long completeSegmentByteCount() -> h
    byte readByte() -> i
    byte getByte(long) -> b
    short readShort() -> j
    int readInt() -> k
    long readLong() -> l
    short readShortLe() -> m
    int readIntLe() -> n
    long readDecimalLong() -> o
    long readHexadecimalUnsignedLong() -> p
    com.adhoc.io.ByteString readByteString() -> q
    com.adhoc.io.ByteString readByteString(long) -> c
    void readFully(com.adhoc.io.Buffer,long) -> b
    java.lang.String readUtf8() -> r
    java.lang.String readUtf8(long) -> d
    java.lang.String readString(long,java.nio.charset.Charset) -> a
    java.lang.String readUtf8LineStrict() -> s
    java.lang.String readUtf8Line(long) -> e
    byte[] readByteArray() -> t
    byte[] readByteArray(long) -> f
    void readFully(byte[]) -> a
    int read(byte[],int,int) -> a
    void clear() -> u
    void skip(long) -> g
    com.adhoc.io.Buffer write(com.adhoc.io.ByteString) -> a
    com.adhoc.io.Buffer writeUtf8(java.lang.String) -> a
    com.adhoc.io.Buffer writeUtf8(java.lang.String,int,int) -> a
    com.adhoc.io.Buffer writeUtf8CodePoint(int) -> a
    com.adhoc.io.Buffer write(byte[]) -> b
    com.adhoc.io.Buffer write(byte[],int,int) -> b
    long writeAll(com.adhoc.io.Source) -> a
    com.adhoc.io.Buffer writeByte(int) -> b
    com.adhoc.io.Buffer writeShort(int) -> c
    com.adhoc.io.Buffer writeInt(int) -> d
    com.adhoc.io.Buffer writeLong(long) -> h
    com.adhoc.io.Buffer writeDecimalLong(long) -> i
    com.adhoc.io.Buffer writeHexadecimalUnsignedLong(long) -> j
    com.adhoc.io.Segment writableSegment(int) -> e
    void write(com.adhoc.io.Buffer,long) -> a_
    long read(com.adhoc.io.Buffer,long) -> a
    long indexOf(byte) -> a
    long indexOf(byte,long) -> a
    void flush() -> flush
    void close() -> close
    com.adhoc.io.Timeout timeout() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    com.adhoc.io.Buffer clone() -> v
    java.lang.Object clone() -> clone
    com.adhoc.io.BufferedSink emitCompleteSegments() -> w
    com.adhoc.io.BufferedSink writeHexadecimalUnsignedLong(long) -> k
    com.adhoc.io.BufferedSink writeDecimalLong(long) -> l
    com.adhoc.io.BufferedSink writeLong(long) -> m
    com.adhoc.io.BufferedSink writeInt(int) -> f
    com.adhoc.io.BufferedSink writeShort(int) -> g
    com.adhoc.io.BufferedSink writeByte(int) -> h
    com.adhoc.io.BufferedSink writeUtf8(java.lang.String) -> b
    com.adhoc.io.BufferedSink write(byte[],int,int) -> c
    com.adhoc.io.BufferedSink write(byte[]) -> c
    com.adhoc.io.BufferedSink write(com.adhoc.io.ByteString) -> b
    void <clinit>() -> <clinit>
com.adhoc.io.Buffer$2 -> com.adhoc.je:
    com.adhoc.io.Buffer this$0 -> a
    void <init>(com.adhoc.io.Buffer) -> <init>
    int read() -> read
    int read(byte[],int,int) -> read
    int available() -> available
    void close() -> close
    java.lang.String toString() -> toString
com.adhoc.io.BufferedSink -> com.adhoc.jf:
    com.adhoc.io.Buffer buffer() -> c
    com.adhoc.io.BufferedSink write(com.adhoc.io.ByteString) -> b
    com.adhoc.io.BufferedSink write(byte[]) -> c
    com.adhoc.io.BufferedSink write(byte[],int,int) -> c
    long writeAll(com.adhoc.io.Source) -> a
    com.adhoc.io.BufferedSink writeUtf8(java.lang.String) -> b
    com.adhoc.io.BufferedSink writeByte(int) -> h
    com.adhoc.io.BufferedSink writeShort(int) -> g
    com.adhoc.io.BufferedSink writeInt(int) -> f
    com.adhoc.io.BufferedSink writeLong(long) -> m
    com.adhoc.io.BufferedSink writeDecimalLong(long) -> l
    com.adhoc.io.BufferedSink writeHexadecimalUnsignedLong(long) -> k
    com.adhoc.io.BufferedSink emitCompleteSegments() -> w
    com.adhoc.io.BufferedSink emit() -> e
com.adhoc.io.BufferedSource -> com.adhoc.jg:
    com.adhoc.io.Buffer buffer() -> c
    boolean exhausted() -> f
    void require(long) -> a
    byte readByte() -> i
    short readShort() -> j
    short readShortLe() -> m
    int readInt() -> k
    int readIntLe() -> n
    long readLong() -> l
    long readDecimalLong() -> o
    long readHexadecimalUnsignedLong() -> p
    void skip(long) -> g
    com.adhoc.io.ByteString readByteString(long) -> c
    byte[] readByteArray() -> t
    byte[] readByteArray(long) -> f
    void readFully(byte[]) -> a
    int read(byte[],int,int) -> a
    void readFully(com.adhoc.io.Buffer,long) -> b
    java.lang.String readUtf8() -> r
    java.lang.String readUtf8LineStrict() -> s
    long indexOf(byte) -> a
    java.io.InputStream inputStream() -> g
com.adhoc.io.ByteString -> com.adhoc.jh:
    char[] HEX_DIGITS -> a
    com.adhoc.io.ByteString EMPTY -> b
    byte[] data -> c
    int hashCode -> d
    java.lang.String utf8 -> e
    void <init>(byte[]) -> <init>
    com.adhoc.io.ByteString of(byte[]) -> a
    com.adhoc.io.ByteString encodeUtf8(java.lang.String) -> a
    java.lang.String utf8() -> a
    java.lang.String base64() -> b
    com.adhoc.io.ByteString md5() -> c
    com.adhoc.io.ByteString digest(java.lang.String) -> c
    com.adhoc.io.ByteString decodeBase64(java.lang.String) -> b
    java.lang.String hex() -> d
    com.adhoc.io.ByteString toAsciiLowercase() -> e
    byte getByte(int) -> a
    int size() -> f
    byte[] toByteArray() -> g
    void write(com.adhoc.io.Buffer) -> a
    boolean rangeEquals(int,byte[],int,int) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.adhoc.io.DeflaterSink -> com.adhoc.ji:
    com.adhoc.io.BufferedSink sink -> a
    java.util.zip.Deflater deflater -> b
    boolean closed -> c
    void <init>(com.adhoc.io.Sink,java.util.zip.Deflater) -> <init>
    void <init>(com.adhoc.io.BufferedSink,java.util.zip.Deflater) -> <init>
    void write(com.adhoc.io.Buffer,long) -> a_
    void deflate(boolean) -> a
    void flush() -> flush
    void finishDeflate() -> b
    void close() -> close
    com.adhoc.io.Timeout timeout() -> a
    java.lang.String toString() -> toString
com.adhoc.io.ForwardingSink -> com.adhoc.jj:
    com.adhoc.io.Sink delegate -> a
    void <init>(com.adhoc.io.Sink) -> <init>
    void write(com.adhoc.io.Buffer,long) -> a_
    void flush() -> flush
    com.adhoc.io.Timeout timeout() -> a
    void close() -> close
    java.lang.String toString() -> toString
com.adhoc.io.ForwardingSource -> com.adhoc.jk:
    com.adhoc.io.Source delegate -> a
    void <init>(com.adhoc.io.Source) -> <init>
    long read(com.adhoc.io.Buffer,long) -> a
    com.adhoc.io.Timeout timeout() -> a
    void close() -> close
    java.lang.String toString() -> toString
com.adhoc.io.ForwardingTimeout -> com.adhoc.jl:
    com.adhoc.io.Timeout delegate -> a
    void <init>(com.adhoc.io.Timeout) -> <init>
    com.adhoc.io.Timeout delegate() -> a
    com.adhoc.io.ForwardingTimeout setDelegate(com.adhoc.io.Timeout) -> a
    com.adhoc.io.Timeout timeout(long,java.util.concurrent.TimeUnit) -> a
    long timeoutNanos() -> b_
    boolean hasDeadline() -> c_
    long deadlineNanoTime() -> d
    com.adhoc.io.Timeout deadlineNanoTime(long) -> a
    com.adhoc.io.Timeout clearTimeout() -> d_
    com.adhoc.io.Timeout clearDeadline() -> f
    void throwIfReached() -> g
com.adhoc.io.GzipSource -> com.adhoc.jm:
    int section -> a
    com.adhoc.io.BufferedSource source -> b
    java.util.zip.Inflater inflater -> c
    com.adhoc.io.InflaterSource inflaterSource -> d
    java.util.zip.CRC32 crc -> e
    void <init>(com.adhoc.io.Source) -> <init>
    long read(com.adhoc.io.Buffer,long) -> a
    void consumeHeader() -> b
    void consumeTrailer() -> c
    com.adhoc.io.Timeout timeout() -> a
    void close() -> close
    void updateCrc(com.adhoc.io.Buffer,long,long) -> a
    void checkEqual(java.lang.String,int,int) -> a
com.adhoc.io.InflaterSource -> com.adhoc.jn:
    com.adhoc.io.BufferedSource source -> a
    java.util.zip.Inflater inflater -> b
    int bufferBytesHeldByInflater -> c
    boolean closed -> d
    void <init>(com.adhoc.io.Source,java.util.zip.Inflater) -> <init>
    void <init>(com.adhoc.io.BufferedSource,java.util.zip.Inflater) -> <init>
    long read(com.adhoc.io.Buffer,long) -> a
    boolean refill() -> b
    void releaseInflatedBytes() -> c
    com.adhoc.io.Timeout timeout() -> a
    void close() -> close
com.adhoc.io.Okio -> com.adhoc.jo:
    java.util.logging.Logger logger -> a
    void <init>() -> <init>
    com.adhoc.io.BufferedSource buffer(com.adhoc.io.Source) -> a
    com.adhoc.io.BufferedSink buffer(com.adhoc.io.Sink) -> a
    com.adhoc.io.Sink sink(java.io.OutputStream) -> a
    com.adhoc.io.Sink sink(java.io.OutputStream,com.adhoc.io.Timeout) -> a
    com.adhoc.io.Sink sink(java.net.Socket) -> a
    com.adhoc.io.Source source(java.io.InputStream) -> a
    com.adhoc.io.Source source(java.io.InputStream,com.adhoc.io.Timeout) -> a
    com.adhoc.io.Source source(java.io.File) -> a
    com.adhoc.io.Sink sink(java.io.File) -> b
    com.adhoc.io.Sink appendingSink(java.io.File) -> c
    com.adhoc.io.Source source(java.net.Socket) -> b
    com.adhoc.io.AsyncTimeout timeout(java.net.Socket) -> c
    java.util.logging.Logger access$000() -> a
    void <clinit>() -> <clinit>
com.adhoc.io.Okio$1 -> com.adhoc.jp:
    com.adhoc.io.Timeout val$timeout -> a
    java.io.OutputStream val$out -> b
    void <init>(com.adhoc.io.Timeout,java.io.OutputStream) -> <init>
    void write(com.adhoc.io.Buffer,long) -> a_
    void flush() -> flush
    void close() -> close
    com.adhoc.io.Timeout timeout() -> a
    java.lang.String toString() -> toString
com.adhoc.io.Okio$2 -> com.adhoc.jq:
    com.adhoc.io.Timeout val$timeout -> a
    java.io.InputStream val$in -> b
    void <init>(com.adhoc.io.Timeout,java.io.InputStream) -> <init>
    long read(com.adhoc.io.Buffer,long) -> a
    void close() -> close
    com.adhoc.io.Timeout timeout() -> a
    java.lang.String toString() -> toString
com.adhoc.io.Okio$3 -> com.adhoc.jr:
    java.net.Socket val$socket -> a
    void <init>(java.net.Socket) -> <init>
    void timedOut() -> a
com.adhoc.io.RealBufferedSink -> com.adhoc.js:
    com.adhoc.io.Buffer buffer -> a
    com.adhoc.io.Sink sink -> b
    boolean closed -> c
    void <init>(com.adhoc.io.Sink,com.adhoc.io.Buffer) -> <init>
    void <init>(com.adhoc.io.Sink) -> <init>
    com.adhoc.io.Buffer buffer() -> c
    void write(com.adhoc.io.Buffer,long) -> a_
    com.adhoc.io.BufferedSink write(com.adhoc.io.ByteString) -> b
    com.adhoc.io.BufferedSink writeUtf8(java.lang.String) -> b
    com.adhoc.io.BufferedSink write(byte[]) -> c
    com.adhoc.io.BufferedSink write(byte[],int,int) -> c
    long writeAll(com.adhoc.io.Source) -> a
    com.adhoc.io.BufferedSink writeByte(int) -> h
    com.adhoc.io.BufferedSink writeShort(int) -> g
    com.adhoc.io.BufferedSink writeInt(int) -> f
    com.adhoc.io.BufferedSink writeLong(long) -> m
    com.adhoc.io.BufferedSink writeDecimalLong(long) -> l
    com.adhoc.io.BufferedSink writeHexadecimalUnsignedLong(long) -> k
    com.adhoc.io.BufferedSink emitCompleteSegments() -> w
    com.adhoc.io.BufferedSink emit() -> e
    void flush() -> flush
    void close() -> close
    com.adhoc.io.Timeout timeout() -> a
    java.lang.String toString() -> toString
com.adhoc.io.RealBufferedSource -> com.adhoc.jt:
    com.adhoc.io.Buffer buffer -> a
    com.adhoc.io.Source source -> b
    boolean closed -> c
    void <init>(com.adhoc.io.Source,com.adhoc.io.Buffer) -> <init>
    void <init>(com.adhoc.io.Source) -> <init>
    com.adhoc.io.Buffer buffer() -> c
    long read(com.adhoc.io.Buffer,long) -> a
    boolean exhausted() -> f
    void require(long) -> a
    boolean request(long) -> b
    byte readByte() -> i
    com.adhoc.io.ByteString readByteString(long) -> c
    byte[] readByteArray() -> t
    byte[] readByteArray(long) -> f
    void readFully(byte[]) -> a
    int read(byte[],int,int) -> a
    void readFully(com.adhoc.io.Buffer,long) -> b
    java.lang.String readUtf8() -> r
    java.lang.String readUtf8LineStrict() -> s
    short readShort() -> j
    short readShortLe() -> m
    int readInt() -> k
    int readIntLe() -> n
    long readLong() -> l
    long readDecimalLong() -> o
    long readHexadecimalUnsignedLong() -> p
    void skip(long) -> g
    long indexOf(byte) -> a
    long indexOf(byte,long) -> a
    java.io.InputStream inputStream() -> g
    void close() -> close
    com.adhoc.io.Timeout timeout() -> a
    java.lang.String toString() -> toString
    boolean access$000(com.adhoc.io.RealBufferedSource) -> a
com.adhoc.io.RealBufferedSource$1 -> com.adhoc.ju:
    com.adhoc.io.RealBufferedSource this$0 -> a
    void <init>(com.adhoc.io.RealBufferedSource) -> <init>
    int read() -> read
    int read(byte[],int,int) -> read
    int available() -> available
    void close() -> close
    java.lang.String toString() -> toString
com.adhoc.io.Segment -> com.adhoc.jv:
    byte[] data -> a
    int pos -> b
    int limit -> c
    boolean shared -> d
    boolean owner -> e
    com.adhoc.io.Segment next -> f
    com.adhoc.io.Segment prev -> g
    void <init>() -> <init>
    void <init>(com.adhoc.io.Segment) -> <init>
    void <init>(byte[],int,int) -> <init>
    com.adhoc.io.Segment pop() -> a
    com.adhoc.io.Segment push(com.adhoc.io.Segment) -> a
    com.adhoc.io.Segment split(int) -> a
    void compact() -> b
    void writeTo(com.adhoc.io.Segment,int) -> a
com.adhoc.io.SegmentPool -> com.adhoc.jw:
    com.adhoc.io.Segment next -> a
    long byteCount -> b
    void <init>() -> <init>
    com.adhoc.io.Segment take() -> a
    void recycle(com.adhoc.io.Segment) -> a
com.adhoc.io.Sink -> com.adhoc.jx:
    void write(com.adhoc.io.Buffer,long) -> a_
    void flush() -> flush
    com.adhoc.io.Timeout timeout() -> a
    void close() -> close
com.adhoc.io.Source -> com.adhoc.jy:
    long read(com.adhoc.io.Buffer,long) -> a
    com.adhoc.io.Timeout timeout() -> a
    void close() -> close
com.adhoc.io.Timeout -> com.adhoc.jz:
    com.adhoc.io.Timeout NONE -> b
    boolean hasDeadline -> a
    long deadlineNanoTime -> c
    long timeoutNanos -> d
    void <init>() -> <init>
    com.adhoc.io.Timeout timeout(long,java.util.concurrent.TimeUnit) -> a
    long timeoutNanos() -> b_
    boolean hasDeadline() -> c_
    long deadlineNanoTime() -> d
    com.adhoc.io.Timeout deadlineNanoTime(long) -> a
    com.adhoc.io.Timeout clearTimeout() -> d_
    com.adhoc.io.Timeout clearDeadline() -> f
    void throwIfReached() -> g
    void <clinit>() -> <clinit>
com.adhoc.io.Timeout$1 -> com.adhoc.ka:
    void <init>() -> <init>
    com.adhoc.io.Timeout timeout(long,java.util.concurrent.TimeUnit) -> a
    com.adhoc.io.Timeout deadlineNanoTime(long) -> a
    void throwIfReached() -> g
com.adhoc.io.Util -> com.adhoc.kb:
    java.nio.charset.Charset UTF_8 -> a
    void checkOffsetAndCount(long,long,long) -> a
    short reverseBytesShort(short) -> a
    int reverseBytesInt(int) -> a
    void sneakyRethrow(java.lang.Throwable) -> a
    void sneakyThrow2(java.lang.Throwable) -> b
    boolean arrayRangeEquals(byte[],int,byte[],int,int) -> a
    void <clinit>() -> <clinit>
com.adhoc.net.AdhocNet -> com.adhoc.kc:
    com.adhoc.net.AdhocNet ourInstance -> a
    com.adhoc.http.OkHttpClient okHttpClient -> b
    com.adhoc.net.AdhocNet getInstance() -> a
    void <init>() -> <init>
    void enqueue(com.adhoc.http.Request,com.adhoc.http.Callback) -> a
    void <clinit>() -> <clinit>
com.adhoc.ninepatch.BitmapType -> com.adhoc.kd:
    com.adhoc.ninepatch.BitmapType NinePatch -> a
    com.adhoc.ninepatch.BitmapType RawNinePatch -> b
    com.adhoc.ninepatch.BitmapType PlainImage -> c
    com.adhoc.ninepatch.BitmapType NULL -> d
    com.adhoc.ninepatch.BitmapType[] $VALUES -> e
    com.adhoc.ninepatch.BitmapType[] values() -> values
    com.adhoc.ninepatch.BitmapType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.adhoc.ninepatch.NinePatchChunk createChunk(android.graphics.Bitmap) -> a
    android.graphics.Bitmap modifyBitmap(android.content.res.Resources,android.graphics.Bitmap,com.adhoc.ninepatch.NinePatchChunk) -> a
    com.adhoc.ninepatch.BitmapType determineBitmapType(android.graphics.Bitmap) -> b
    android.graphics.drawable.NinePatchDrawable getNinePatchDrawable(android.content.res.Resources,android.graphics.Bitmap,java.lang.String) -> a
    android.graphics.drawable.NinePatchDrawable createNinePatchDrawable(android.content.res.Resources,android.graphics.Bitmap,java.lang.String) -> b
    void <init>(java.lang.String,int,com.adhoc.ninepatch.BitmapType$1) -> <init>
    void <clinit>() -> <clinit>
com.adhoc.ninepatch.BitmapType$1 -> com.adhoc.ke:
    void <init>(java.lang.String,int) -> <init>
    com.adhoc.ninepatch.NinePatchChunk createChunk(android.graphics.Bitmap) -> a
com.adhoc.ninepatch.BitmapType$2 -> com.adhoc.kf:
    void <init>(java.lang.String,int) -> <init>
    com.adhoc.ninepatch.NinePatchChunk createChunk(android.graphics.Bitmap) -> a
    android.graphics.Bitmap modifyBitmap(android.content.res.Resources,android.graphics.Bitmap,com.adhoc.ninepatch.NinePatchChunk) -> a
    void recalculateDivs(float,java.util.ArrayList) -> a
com.adhoc.ninepatch.BitmapType$3 -> com.adhoc.kg:
    void <init>(java.lang.String,int) -> <init>
    com.adhoc.ninepatch.NinePatchChunk createChunk(android.graphics.Bitmap) -> a
com.adhoc.ninepatch.BitmapType$4 -> com.adhoc.kh:
    void <init>(java.lang.String,int) -> <init>
    android.graphics.drawable.NinePatchDrawable createNinePatchDrawable(android.content.res.Resources,android.graphics.Bitmap,java.lang.String) -> b
com.adhoc.ninepatch.ChunkNotSerializedException -> com.adhoc.ki:
    void <init>() -> <init>
com.adhoc.ninepatch.Div -> com.adhoc.kj:
    int start -> a
    int stop -> b
    void <init>() -> <init>
    void <init>(int,int) -> <init>
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
com.adhoc.ninepatch.DivLengthException -> com.adhoc.kk:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
com.adhoc.ninepatch.NinePatchChunk -> com.adhoc.kl:
    boolean wasSerialized -> a
    java.util.ArrayList xDivs -> b
    java.util.ArrayList yDivs -> c
    android.graphics.Rect padding -> d
    int[] colors -> e
    void <init>() -> <init>
    com.adhoc.ninepatch.NinePatchChunk parse(byte[]) -> a
    android.graphics.drawable.NinePatchDrawable create9PatchDrawable(android.content.Context,android.graphics.Bitmap,java.lang.String) -> a
    com.adhoc.ninepatch.NinePatchChunk createEmptyChunk() -> a
    byte[] toBytes() -> b
    boolean isRawNinePatchBitmap(android.graphics.Bitmap) -> a
    boolean hasNinePatchBorder(android.graphics.Bitmap) -> b
    boolean isBorderPixel(int) -> a
    boolean isCornerPixelsAreTrasperent(android.graphics.Bitmap) -> c
    boolean isTransparent(int) -> b
    boolean isBlack(int) -> c
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    com.adhoc.ninepatch.NinePatchChunk createChunkFromRawBitmap(android.graphics.Bitmap,boolean) -> a
    void readDivs(int,java.nio.ByteBuffer,java.util.ArrayList) -> a
    void checkDivCount(byte) -> a
    void setupColors(android.graphics.Bitmap,com.adhoc.ninepatch.NinePatchChunk) -> a
    boolean hasSameColor(android.graphics.Bitmap,int,int,int,int) -> a
    void setupPadding(android.graphics.Bitmap,com.adhoc.ninepatch.NinePatchChunk) -> b
    void setupStretchableRegions(android.graphics.Bitmap,com.adhoc.ninepatch.NinePatchChunk) -> c
    java.util.ArrayList getRegions(java.util.ArrayList,int) -> a
    java.util.ArrayList getYDivs(android.graphics.Bitmap,int) -> a
    java.util.ArrayList getXDivs(android.graphics.Bitmap,int) -> b
    com.adhoc.ninepatch.Div processChunk(int,com.adhoc.ninepatch.Div,int,java.util.ArrayList) -> a
com.adhoc.ninepatch.WrongPaddingException -> com.adhoc.km:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
com.adhoc.nkzawa.backo.Backoff -> com.adhoc.kn:
    long ms -> a
    long max -> b
    int factor -> c
    double jitter -> d
    int attempts -> e
    void <init>() -> <init>
    long duration() -> a
    void reset() -> b
    com.adhoc.nkzawa.backo.Backoff setMin(long) -> a
    com.adhoc.nkzawa.backo.Backoff setMax(long) -> b
    com.adhoc.nkzawa.backo.Backoff setJitter(double) -> a
    int getAttempts() -> c
com.adhoc.nkzawa.emitter.Emitter -> com.adhoc.ko:
    java.util.concurrent.ConcurrentMap callbacks -> a
    void <init>() -> <init>
    com.adhoc.nkzawa.emitter.Emitter on(java.lang.String,com.adhoc.nkzawa.emitter.Emitter$Listener) -> a
    com.adhoc.nkzawa.emitter.Emitter once(java.lang.String,com.adhoc.nkzawa.emitter.Emitter$Listener) -> b
    com.adhoc.nkzawa.emitter.Emitter off() -> a
    com.adhoc.nkzawa.emitter.Emitter off(java.lang.String) -> a
    com.adhoc.nkzawa.emitter.Emitter off(java.lang.String,com.adhoc.nkzawa.emitter.Emitter$Listener) -> c
    boolean sameAs(com.adhoc.nkzawa.emitter.Emitter$Listener,com.adhoc.nkzawa.emitter.Emitter$Listener) -> a
    com.adhoc.nkzawa.emitter.Emitter emit(java.lang.String,java.lang.Object[]) -> a
com.adhoc.nkzawa.emitter.Emitter$Listener -> com.adhoc.kp:
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.emitter.Emitter$OnceListener -> com.adhoc.kq:
    java.lang.String event -> a
    com.adhoc.nkzawa.emitter.Emitter$Listener fn -> b
    com.adhoc.nkzawa.emitter.Emitter this$0 -> c
    void <init>(com.adhoc.nkzawa.emitter.Emitter,java.lang.String,com.adhoc.nkzawa.emitter.Emitter$Listener) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.engineio.client.EngineIOException -> com.adhoc.kr:
    java.lang.String transport -> a
    java.lang.Object code -> b
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(java.lang.Throwable) -> <init>
com.adhoc.nkzawa.engineio.client.HandshakeData -> com.adhoc.ks:
    java.lang.String sid -> a
    java.lang.String[] upgrades -> b
    long pingInterval -> c
    long pingTimeout -> d
    void <init>(java.lang.String) -> <init>
    void <init>(org.json.JSONObject) -> <init>
com.adhoc.nkzawa.engineio.client.Socket -> com.adhoc.kt:
    java.util.logging.Logger logger -> d
    java.lang.Runnable noop -> e
    boolean priorWebsocketSuccess -> f
    javax.net.ssl.SSLContext defaultSSLContext -> g
    javax.net.ssl.HostnameVerifier defaultHostnameVerifier -> h
    boolean secure -> i
    boolean upgrade -> j
    boolean timestampRequests -> k
    boolean upgrading -> l
    boolean rememberUpgrade -> m
    int port -> a
    int policyPort -> n
    int prevBufferLen -> o
    long pingInterval -> p
    long pingTimeout -> q
    java.lang.String id -> r
    java.lang.String hostname -> s
    java.lang.String path -> t
    java.lang.String timestampParam -> u
    java.util.List transports -> v
    java.util.List upgrades -> w
    java.util.Map query -> x
    java.util.LinkedList writeBuffer -> b
    java.util.LinkedList callbackBuffer -> y
    com.adhoc.nkzawa.engineio.client.Transport transport -> c
    java.util.concurrent.Future pingTimeoutTimer -> z
    java.util.concurrent.Future pingIntervalTimer -> A
    javax.net.ssl.SSLContext sslContext -> B
    javax.net.ssl.HostnameVerifier hostnameVerifier -> C
    com.adhoc.nkzawa.engineio.client.Socket$ReadyState readyState -> D
    java.util.concurrent.ScheduledExecutorService heartbeatScheduler -> E
    com.adhoc.nkzawa.emitter.Emitter$Listener onHeartbeatAsListener -> F
    void <init>() -> <init>
    void <init>(java.net.URI,com.adhoc.nkzawa.engineio.client.Socket$Options) -> <init>
    void <init>(com.adhoc.nkzawa.engineio.client.Socket$Options) -> <init>
    com.adhoc.nkzawa.engineio.client.Socket open() -> b
    com.adhoc.nkzawa.engineio.client.Transport createTransport(java.lang.String) -> c
    void setTransport(com.adhoc.nkzawa.engineio.client.Transport) -> a
    void probe(java.lang.String) -> d
    void onOpen() -> h
    void onPacket(com.adhoc.nkzawa.engineio.parser.Packet) -> a
    void onHandshake(com.adhoc.nkzawa.engineio.client.HandshakeData) -> a
    void onHeartbeat(long) -> a
    void setPing() -> i
    void ping() -> c
    void onDrain() -> j
    void flush() -> k
    void write(java.lang.String) -> b
    void write(java.lang.String,java.lang.Runnable) -> a
    void write(byte[]) -> a
    void write(byte[],java.lang.Runnable) -> a
    void send(java.lang.String,java.lang.Runnable) -> b
    void send(byte[],java.lang.Runnable) -> b
    void sendPacket(java.lang.String) -> e
    void sendPacket(java.lang.String,java.lang.String,java.lang.Runnable) -> a
    void sendPacket(java.lang.String,byte[],java.lang.Runnable) -> a
    void sendPacket(com.adhoc.nkzawa.engineio.parser.Packet,java.lang.Runnable) -> a
    com.adhoc.nkzawa.engineio.client.Socket close() -> d
    void onError(java.lang.Exception) -> a
    void onClose(java.lang.String) -> f
    void onClose(java.lang.String,java.lang.Exception) -> a
    java.util.List filterUpgrades(java.util.List) -> a
    java.lang.String id() -> e
    java.util.concurrent.ScheduledExecutorService getHeartbeatScheduler() -> l
    boolean access$100(com.adhoc.nkzawa.engineio.client.Socket) -> a
    boolean access$200() -> f
    java.util.List access$300(com.adhoc.nkzawa.engineio.client.Socket) -> b
    com.adhoc.nkzawa.engineio.client.Socket$ReadyState access$402(com.adhoc.nkzawa.engineio.client.Socket,com.adhoc.nkzawa.engineio.client.Socket$ReadyState) -> a
    com.adhoc.nkzawa.engineio.client.Transport access$500(com.adhoc.nkzawa.engineio.client.Socket,java.lang.String) -> a
    void access$600(com.adhoc.nkzawa.engineio.client.Socket,com.adhoc.nkzawa.engineio.client.Transport) -> a
    void access$700(com.adhoc.nkzawa.engineio.client.Socket,java.lang.String) -> b
    void access$800(com.adhoc.nkzawa.engineio.client.Socket,java.lang.Exception) -> a
    void access$900(com.adhoc.nkzawa.engineio.client.Socket,com.adhoc.nkzawa.engineio.parser.Packet) -> a
    void access$1000(com.adhoc.nkzawa.engineio.client.Socket) -> c
    java.util.logging.Logger access$1100() -> g
    boolean access$1202(com.adhoc.nkzawa.engineio.client.Socket,boolean) -> a
    boolean access$202(boolean) -> a
    com.adhoc.nkzawa.engineio.client.Socket$ReadyState access$400(com.adhoc.nkzawa.engineio.client.Socket) -> d
    void access$1300(com.adhoc.nkzawa.engineio.client.Socket) -> e
    void access$1400(com.adhoc.nkzawa.engineio.client.Socket,long) -> a
    long access$1500(com.adhoc.nkzawa.engineio.client.Socket) -> f
    void access$1600(com.adhoc.nkzawa.engineio.client.Socket,java.lang.String) -> c
    void access$1700(com.adhoc.nkzawa.engineio.client.Socket,java.lang.String,java.lang.String,java.lang.Runnable) -> a
    void access$1800(com.adhoc.nkzawa.engineio.client.Socket,java.lang.String,byte[],java.lang.Runnable) -> a
    boolean access$1200(com.adhoc.nkzawa.engineio.client.Socket) -> g
    java.util.LinkedList access$1900(com.adhoc.nkzawa.engineio.client.Socket) -> h
    int access$2002(com.adhoc.nkzawa.engineio.client.Socket,int) -> a
    void <clinit>() -> <clinit>
com.adhoc.nkzawa.engineio.client.Socket$1 -> com.adhoc.ku:
    void <init>() -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.Socket$10 -> com.adhoc.kv:
    com.adhoc.nkzawa.emitter.Emitter$Listener val$onerror -> a
    com.adhoc.nkzawa.engineio.client.Socket this$0 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.Socket,com.adhoc.nkzawa.emitter.Emitter$Listener) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.engineio.client.Socket$11 -> com.adhoc.kw:
    com.adhoc.nkzawa.emitter.Emitter$Listener val$onerror -> a
    com.adhoc.nkzawa.engineio.client.Socket this$0 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.Socket,com.adhoc.nkzawa.emitter.Emitter$Listener) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.engineio.client.Socket$12 -> com.adhoc.kx:
    com.adhoc.nkzawa.engineio.client.Transport[] val$transport -> a
    com.adhoc.nkzawa.emitter.Emitter$Listener val$freezeTransport -> b
    com.adhoc.nkzawa.engineio.client.Socket this$0 -> c
    void <init>(com.adhoc.nkzawa.engineio.client.Socket,com.adhoc.nkzawa.engineio.client.Transport[],com.adhoc.nkzawa.emitter.Emitter$Listener) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.engineio.client.Socket$13 -> com.adhoc.ky:
    com.adhoc.nkzawa.engineio.client.Transport[] val$transport -> a
    com.adhoc.nkzawa.emitter.Emitter$Listener val$onTransportOpen -> b
    com.adhoc.nkzawa.emitter.Emitter$Listener val$onerror -> c
    com.adhoc.nkzawa.emitter.Emitter$Listener val$onTransportClose -> d
    com.adhoc.nkzawa.engineio.client.Socket val$self -> e
    com.adhoc.nkzawa.emitter.Emitter$Listener val$onclose -> f
    com.adhoc.nkzawa.emitter.Emitter$Listener val$onupgrade -> g
    com.adhoc.nkzawa.engineio.client.Socket this$0 -> h
    void <init>(com.adhoc.nkzawa.engineio.client.Socket,com.adhoc.nkzawa.engineio.client.Transport[],com.adhoc.nkzawa.emitter.Emitter$Listener,com.adhoc.nkzawa.emitter.Emitter$Listener,com.adhoc.nkzawa.emitter.Emitter$Listener,com.adhoc.nkzawa.engineio.client.Socket,com.adhoc.nkzawa.emitter.Emitter$Listener,com.adhoc.nkzawa.emitter.Emitter$Listener) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.Socket$14 -> com.adhoc.kz:
    com.adhoc.nkzawa.engineio.client.Socket this$0 -> a
    void <init>(com.adhoc.nkzawa.engineio.client.Socket) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.engineio.client.Socket$15 -> com.adhoc.la:
    com.adhoc.nkzawa.engineio.client.Socket val$self -> a
    com.adhoc.nkzawa.engineio.client.Socket this$0 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.Socket,com.adhoc.nkzawa.engineio.client.Socket) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.Socket$15$1 -> com.adhoc.lb:
    com.adhoc.nkzawa.engineio.client.Socket$15 this$1 -> a
    void <init>(com.adhoc.nkzawa.engineio.client.Socket$15) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.Socket$16 -> com.adhoc.lc:
    com.adhoc.nkzawa.engineio.client.Socket val$self -> a
    com.adhoc.nkzawa.engineio.client.Socket this$0 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.Socket,com.adhoc.nkzawa.engineio.client.Socket) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.Socket$16$1 -> com.adhoc.ld:
    com.adhoc.nkzawa.engineio.client.Socket$16 this$1 -> a
    void <init>(com.adhoc.nkzawa.engineio.client.Socket$16) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.Socket$17 -> com.adhoc.le:
    com.adhoc.nkzawa.engineio.client.Socket this$0 -> a
    void <init>(com.adhoc.nkzawa.engineio.client.Socket) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.Socket$18 -> com.adhoc.lf:
    java.lang.String val$msg -> a
    java.lang.Runnable val$fn -> b
    com.adhoc.nkzawa.engineio.client.Socket this$0 -> c
    void <init>(com.adhoc.nkzawa.engineio.client.Socket,java.lang.String,java.lang.Runnable) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.Socket$19 -> com.adhoc.lg:
    byte[] val$msg -> a
    java.lang.Runnable val$fn -> b
    com.adhoc.nkzawa.engineio.client.Socket this$0 -> c
    void <init>(com.adhoc.nkzawa.engineio.client.Socket,byte[],java.lang.Runnable) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.Socket$2 -> com.adhoc.lh:
    com.adhoc.nkzawa.engineio.client.Socket this$0 -> a
    void <init>(com.adhoc.nkzawa.engineio.client.Socket) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.Socket$2$1 -> com.adhoc.li:
    com.adhoc.nkzawa.engineio.client.Socket val$self -> a
    com.adhoc.nkzawa.engineio.client.Socket$2 this$1 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.Socket$2,com.adhoc.nkzawa.engineio.client.Socket) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.Socket$20 -> com.adhoc.lj:
    com.adhoc.nkzawa.engineio.client.Socket this$0 -> a
    void <init>(com.adhoc.nkzawa.engineio.client.Socket) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.Socket$20$1 -> com.adhoc.lk:
    com.adhoc.nkzawa.engineio.client.Socket val$self -> a
    com.adhoc.nkzawa.engineio.client.Socket$20 this$1 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.Socket$20,com.adhoc.nkzawa.engineio.client.Socket) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.Socket$20$2 -> com.adhoc.ll:
    com.adhoc.nkzawa.engineio.client.Socket val$self -> a
    com.adhoc.nkzawa.emitter.Emitter$Listener[] val$cleanupAndClose -> b
    java.lang.Runnable val$close -> c
    com.adhoc.nkzawa.engineio.client.Socket$20 this$1 -> d
    void <init>(com.adhoc.nkzawa.engineio.client.Socket$20,com.adhoc.nkzawa.engineio.client.Socket,com.adhoc.nkzawa.emitter.Emitter$Listener[],java.lang.Runnable) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.engineio.client.Socket$20$3 -> com.adhoc.lm:
    com.adhoc.nkzawa.engineio.client.Socket val$self -> a
    com.adhoc.nkzawa.emitter.Emitter$Listener[] val$cleanupAndClose -> b
    com.adhoc.nkzawa.engineio.client.Socket$20 this$1 -> c
    void <init>(com.adhoc.nkzawa.engineio.client.Socket$20,com.adhoc.nkzawa.engineio.client.Socket,com.adhoc.nkzawa.emitter.Emitter$Listener[]) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.Socket$20$4 -> com.adhoc.ln:
    java.lang.Runnable val$waitForUpgrade -> a
    java.lang.Runnable val$close -> b
    com.adhoc.nkzawa.engineio.client.Socket$20 this$1 -> c
    void <init>(com.adhoc.nkzawa.engineio.client.Socket$20,java.lang.Runnable,java.lang.Runnable) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.engineio.client.Socket$21 -> com.adhoc.lo:
    com.adhoc.nkzawa.engineio.client.Socket val$self -> a
    com.adhoc.nkzawa.engineio.client.Socket this$0 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.Socket,com.adhoc.nkzawa.engineio.client.Socket) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.Socket$3 -> com.adhoc.lp:
    com.adhoc.nkzawa.engineio.client.Socket val$self -> a
    com.adhoc.nkzawa.engineio.client.Socket this$0 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.Socket,com.adhoc.nkzawa.engineio.client.Socket) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.engineio.client.Socket$4 -> com.adhoc.lq:
    com.adhoc.nkzawa.engineio.client.Socket val$self -> a
    com.adhoc.nkzawa.engineio.client.Socket this$0 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.Socket,com.adhoc.nkzawa.engineio.client.Socket) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.engineio.client.Socket$5 -> com.adhoc.lr:
    com.adhoc.nkzawa.engineio.client.Socket val$self -> a
    com.adhoc.nkzawa.engineio.client.Socket this$0 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.Socket,com.adhoc.nkzawa.engineio.client.Socket) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.engineio.client.Socket$6 -> com.adhoc.ls:
    com.adhoc.nkzawa.engineio.client.Socket val$self -> a
    com.adhoc.nkzawa.engineio.client.Socket this$0 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.Socket,com.adhoc.nkzawa.engineio.client.Socket) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.engineio.client.Socket$7 -> com.adhoc.lt:
    boolean[] val$failed -> a
    java.lang.String val$name -> b
    com.adhoc.nkzawa.engineio.client.Transport[] val$transport -> c
    com.adhoc.nkzawa.engineio.client.Socket val$self -> d
    java.lang.Runnable[] val$cleanup -> e
    com.adhoc.nkzawa.engineio.client.Socket this$0 -> f
    void <init>(com.adhoc.nkzawa.engineio.client.Socket,boolean[],java.lang.String,com.adhoc.nkzawa.engineio.client.Transport[],com.adhoc.nkzawa.engineio.client.Socket,java.lang.Runnable[]) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.engineio.client.Socket$7$1 -> com.adhoc.lu:
    com.adhoc.nkzawa.engineio.client.Socket$7 this$1 -> a
    void <init>(com.adhoc.nkzawa.engineio.client.Socket$7) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.engineio.client.Socket$7$1$1 -> com.adhoc.lv:
    com.adhoc.nkzawa.engineio.client.Socket$7$1 this$2 -> a
    void <init>(com.adhoc.nkzawa.engineio.client.Socket$7$1) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.Socket$8 -> com.adhoc.lw:
    boolean[] val$failed -> a
    java.lang.Runnable[] val$cleanup -> b
    com.adhoc.nkzawa.engineio.client.Transport[] val$transport -> c
    com.adhoc.nkzawa.engineio.client.Socket this$0 -> d
    void <init>(com.adhoc.nkzawa.engineio.client.Socket,boolean[],java.lang.Runnable[],com.adhoc.nkzawa.engineio.client.Transport[]) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.engineio.client.Socket$9 -> com.adhoc.lx:
    com.adhoc.nkzawa.engineio.client.Transport[] val$transport -> a
    com.adhoc.nkzawa.emitter.Emitter$Listener val$freezeTransport -> b
    java.lang.String val$name -> c
    com.adhoc.nkzawa.engineio.client.Socket val$self -> d
    com.adhoc.nkzawa.engineio.client.Socket this$0 -> e
    void <init>(com.adhoc.nkzawa.engineio.client.Socket,com.adhoc.nkzawa.engineio.client.Transport[],com.adhoc.nkzawa.emitter.Emitter$Listener,java.lang.String,com.adhoc.nkzawa.engineio.client.Socket) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.engineio.client.Socket$Options -> com.adhoc.ly:
    java.lang.String[] transports -> a
    boolean upgrade -> b
    boolean rememberUpgrade -> c
    java.lang.String host -> d
    java.lang.String query -> e
    void <init>() -> <init>
    com.adhoc.nkzawa.engineio.client.Socket$Options fromURI(java.net.URI,com.adhoc.nkzawa.engineio.client.Socket$Options) -> b
    com.adhoc.nkzawa.engineio.client.Socket$Options access$000(java.net.URI,com.adhoc.nkzawa.engineio.client.Socket$Options) -> a
com.adhoc.nkzawa.engineio.client.Socket$ReadyState -> com.adhoc.lz:
    com.adhoc.nkzawa.engineio.client.Socket$ReadyState OPENING -> a
    com.adhoc.nkzawa.engineio.client.Socket$ReadyState OPEN -> b
    com.adhoc.nkzawa.engineio.client.Socket$ReadyState CLOSING -> c
    com.adhoc.nkzawa.engineio.client.Socket$ReadyState CLOSED -> d
    com.adhoc.nkzawa.engineio.client.Socket$ReadyState[] $VALUES -> e
    com.adhoc.nkzawa.engineio.client.Socket$ReadyState[] values() -> values
    com.adhoc.nkzawa.engineio.client.Socket$ReadyState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.adhoc.nkzawa.engineio.client.Transport -> com.adhoc.ma:
    int timestamps -> a
    boolean writable -> b
    java.lang.String name -> c
    java.util.Map query -> d
    boolean secure -> e
    boolean timestampRequests -> f
    int port -> g
    java.lang.String path -> h
    java.lang.String hostname -> i
    java.lang.String timestampParam -> j
    javax.net.ssl.SSLContext sslContext -> k
    com.adhoc.nkzawa.engineio.client.Socket socket -> l
    javax.net.ssl.HostnameVerifier hostnameVerifier -> m
    com.adhoc.nkzawa.engineio.client.Transport$ReadyState readyState -> n
    void <init>(com.adhoc.nkzawa.engineio.client.Transport$Options) -> <init>
    com.adhoc.nkzawa.engineio.client.Transport onError(java.lang.String,java.lang.Exception) -> a
    com.adhoc.nkzawa.engineio.client.Transport open() -> b
    com.adhoc.nkzawa.engineio.client.Transport close() -> c
    void send(com.adhoc.nkzawa.engineio.parser.Packet[]) -> a
    void onOpen() -> d
    void onData(java.lang.String) -> b
    void onData(byte[]) -> a
    void onPacket(com.adhoc.nkzawa.engineio.parser.Packet) -> a
    void onClose() -> e
    void write(com.adhoc.nkzawa.engineio.parser.Packet[]) -> b
    void doOpen() -> f
    void doClose() -> g
    void <clinit>() -> <clinit>
com.adhoc.nkzawa.engineio.client.Transport$1 -> com.adhoc.mb:
    com.adhoc.nkzawa.engineio.client.Transport this$0 -> a
    void <init>(com.adhoc.nkzawa.engineio.client.Transport) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.Transport$2 -> com.adhoc.mc:
    com.adhoc.nkzawa.engineio.client.Transport this$0 -> a
    void <init>(com.adhoc.nkzawa.engineio.client.Transport) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.Transport$3 -> com.adhoc.md:
    com.adhoc.nkzawa.engineio.parser.Packet[] val$packets -> a
    com.adhoc.nkzawa.engineio.client.Transport this$0 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.Transport,com.adhoc.nkzawa.engineio.parser.Packet[]) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.Transport$Options -> com.adhoc.me:
    java.lang.String hostname -> f
    java.lang.String path -> g
    java.lang.String timestampParam -> h
    boolean secure -> i
    boolean timestampRequests -> j
    int port -> k
    int policyPort -> l
    java.util.Map query -> m
    javax.net.ssl.SSLContext sslContext -> n
    javax.net.ssl.HostnameVerifier hostnameVerifier -> o
    com.adhoc.nkzawa.engineio.client.Socket socket -> p
    void <init>() -> <init>
com.adhoc.nkzawa.engineio.client.Transport$ReadyState -> com.adhoc.mf:
    com.adhoc.nkzawa.engineio.client.Transport$ReadyState OPENING -> a
    com.adhoc.nkzawa.engineio.client.Transport$ReadyState OPEN -> b
    com.adhoc.nkzawa.engineio.client.Transport$ReadyState CLOSED -> c
    com.adhoc.nkzawa.engineio.client.Transport$ReadyState PAUSED -> d
    com.adhoc.nkzawa.engineio.client.Transport$ReadyState[] $VALUES -> e
    com.adhoc.nkzawa.engineio.client.Transport$ReadyState[] values() -> values
    com.adhoc.nkzawa.engineio.client.Transport$ReadyState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.adhoc.nkzawa.engineio.client.transports.Polling -> com.adhoc.mg:
    java.util.logging.Logger logger -> o
    boolean polling -> p
    void <init>(com.adhoc.nkzawa.engineio.client.Transport$Options) -> <init>
    void doOpen() -> f
    void pause(java.lang.Runnable) -> a
    void poll() -> k
    void onData(java.lang.String) -> b
    void onData(byte[]) -> a
    void _onData(java.lang.Object) -> a
    void doClose() -> g
    void write(com.adhoc.nkzawa.engineio.parser.Packet[]) -> b
    java.lang.String uri() -> h
    void doWrite(byte[],java.lang.Runnable) -> a
    void doPoll() -> i
    com.adhoc.nkzawa.engineio.client.Transport$ReadyState access$002(com.adhoc.nkzawa.engineio.client.transports.Polling,com.adhoc.nkzawa.engineio.client.Transport$ReadyState) -> a
    java.util.logging.Logger access$100() -> j
    com.adhoc.nkzawa.engineio.client.Transport$ReadyState access$202(com.adhoc.nkzawa.engineio.client.transports.Polling,com.adhoc.nkzawa.engineio.client.Transport$ReadyState) -> b
    boolean access$300(com.adhoc.nkzawa.engineio.client.transports.Polling) -> a
    com.adhoc.nkzawa.engineio.client.Transport$ReadyState access$400(com.adhoc.nkzawa.engineio.client.transports.Polling) -> b
    void access$500(com.adhoc.nkzawa.engineio.client.transports.Polling) -> c
    void access$600(com.adhoc.nkzawa.engineio.client.transports.Polling) -> d
    void access$700(com.adhoc.nkzawa.engineio.client.transports.Polling,com.adhoc.nkzawa.engineio.parser.Packet) -> a
    void <clinit>() -> <clinit>
com.adhoc.nkzawa.engineio.client.transports.Polling$1 -> com.adhoc.mh:
    java.lang.Runnable val$onPause -> a
    com.adhoc.nkzawa.engineio.client.transports.Polling this$0 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.transports.Polling,java.lang.Runnable) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.transports.Polling$1$1 -> com.adhoc.mi:
    com.adhoc.nkzawa.engineio.client.transports.Polling val$self -> a
    com.adhoc.nkzawa.engineio.client.transports.Polling$1 this$1 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.transports.Polling$1,com.adhoc.nkzawa.engineio.client.transports.Polling) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.transports.Polling$1$2 -> com.adhoc.mj:
    int[] val$total -> a
    java.lang.Runnable val$pause -> b
    com.adhoc.nkzawa.engineio.client.transports.Polling$1 this$1 -> c
    void <init>(com.adhoc.nkzawa.engineio.client.transports.Polling$1,int[],java.lang.Runnable) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.engineio.client.transports.Polling$1$3 -> com.adhoc.mk:
    int[] val$total -> a
    java.lang.Runnable val$pause -> b
    com.adhoc.nkzawa.engineio.client.transports.Polling$1 this$1 -> c
    void <init>(com.adhoc.nkzawa.engineio.client.transports.Polling$1,int[],java.lang.Runnable) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.engineio.client.transports.Polling$2 -> com.adhoc.ml:
    com.adhoc.nkzawa.engineio.client.transports.Polling val$self -> a
    com.adhoc.nkzawa.engineio.client.transports.Polling this$0 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.transports.Polling,com.adhoc.nkzawa.engineio.client.transports.Polling) -> <init>
    boolean call(com.adhoc.nkzawa.engineio.parser.Packet,int,int) -> a
com.adhoc.nkzawa.engineio.client.transports.Polling$3 -> com.adhoc.mm:
    com.adhoc.nkzawa.engineio.client.transports.Polling val$self -> a
    com.adhoc.nkzawa.engineio.client.transports.Polling this$0 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.transports.Polling,com.adhoc.nkzawa.engineio.client.transports.Polling) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.engineio.client.transports.Polling$4 -> com.adhoc.mn:
    com.adhoc.nkzawa.engineio.client.transports.Polling val$self -> a
    com.adhoc.nkzawa.engineio.client.transports.Polling this$0 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.transports.Polling,com.adhoc.nkzawa.engineio.client.transports.Polling) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.transports.Polling$5 -> com.adhoc.mo:
    com.adhoc.nkzawa.engineio.client.transports.Polling val$self -> a
    java.lang.Runnable val$callbackfn -> b
    com.adhoc.nkzawa.engineio.client.transports.Polling this$0 -> c
    void <init>(com.adhoc.nkzawa.engineio.client.transports.Polling,com.adhoc.nkzawa.engineio.client.transports.Polling,java.lang.Runnable) -> <init>
    void call(byte[]) -> a
    void call(java.lang.Object) -> a
com.adhoc.nkzawa.engineio.client.transports.PollingXHR -> com.adhoc.mp:
    java.util.logging.Logger logger -> o
    com.adhoc.nkzawa.engineio.client.transports.PollingXHR$Request sendXhr -> p
    com.adhoc.nkzawa.engineio.client.transports.PollingXHR$Request pollXhr -> q
    void <init>(com.adhoc.nkzawa.engineio.client.Transport$Options) -> <init>
    com.adhoc.nkzawa.engineio.client.transports.PollingXHR$Request request() -> k
    com.adhoc.nkzawa.engineio.client.transports.PollingXHR$Request request(com.adhoc.nkzawa.engineio.client.transports.PollingXHR$Request$Options) -> a
    void doWrite(byte[],java.lang.Runnable) -> a
    void doPoll() -> i
    com.adhoc.nkzawa.engineio.client.Transport access$000(com.adhoc.nkzawa.engineio.client.transports.PollingXHR,java.lang.String,java.lang.Exception) -> a
    com.adhoc.nkzawa.engineio.client.Transport access$100(com.adhoc.nkzawa.engineio.client.transports.PollingXHR,java.lang.String,java.lang.Exception) -> b
    java.util.logging.Logger access$200() -> l
    void <clinit>() -> <clinit>
com.adhoc.nkzawa.engineio.client.transports.PollingXHR$1 -> com.adhoc.mq:
    com.adhoc.nkzawa.engineio.client.transports.PollingXHR val$self -> a
    com.adhoc.nkzawa.engineio.client.transports.PollingXHR this$0 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.transports.PollingXHR,com.adhoc.nkzawa.engineio.client.transports.PollingXHR) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.engineio.client.transports.PollingXHR$1$1 -> com.adhoc.mr:
    java.lang.Object[] val$args -> a
    com.adhoc.nkzawa.engineio.client.transports.PollingXHR$1 this$1 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.transports.PollingXHR$1,java.lang.Object[]) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.transports.PollingXHR$2 -> com.adhoc.ms:
    com.adhoc.nkzawa.engineio.client.transports.PollingXHR val$self -> a
    com.adhoc.nkzawa.engineio.client.transports.PollingXHR this$0 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.transports.PollingXHR,com.adhoc.nkzawa.engineio.client.transports.PollingXHR) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.engineio.client.transports.PollingXHR$3 -> com.adhoc.mt:
    java.lang.Runnable val$fn -> a
    com.adhoc.nkzawa.engineio.client.transports.PollingXHR this$0 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.transports.PollingXHR,java.lang.Runnable) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.engineio.client.transports.PollingXHR$3$1 -> com.adhoc.mu:
    com.adhoc.nkzawa.engineio.client.transports.PollingXHR$3 this$1 -> a
    void <init>(com.adhoc.nkzawa.engineio.client.transports.PollingXHR$3) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.transports.PollingXHR$4 -> com.adhoc.mv:
    com.adhoc.nkzawa.engineio.client.transports.PollingXHR val$self -> a
    com.adhoc.nkzawa.engineio.client.transports.PollingXHR this$0 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.transports.PollingXHR,com.adhoc.nkzawa.engineio.client.transports.PollingXHR) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.engineio.client.transports.PollingXHR$4$1 -> com.adhoc.mw:
    java.lang.Object[] val$args -> a
    com.adhoc.nkzawa.engineio.client.transports.PollingXHR$4 this$1 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.transports.PollingXHR$4,java.lang.Object[]) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.transports.PollingXHR$5 -> com.adhoc.mx:
    com.adhoc.nkzawa.engineio.client.transports.PollingXHR val$self -> a
    com.adhoc.nkzawa.engineio.client.transports.PollingXHR this$0 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.transports.PollingXHR,com.adhoc.nkzawa.engineio.client.transports.PollingXHR) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.engineio.client.transports.PollingXHR$5$1 -> com.adhoc.my:
    java.lang.Object[] val$args -> a
    com.adhoc.nkzawa.engineio.client.transports.PollingXHR$5 this$1 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.transports.PollingXHR$5,java.lang.Object[]) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.transports.PollingXHR$6 -> com.adhoc.mz:
    com.adhoc.nkzawa.engineio.client.transports.PollingXHR val$self -> a
    com.adhoc.nkzawa.engineio.client.transports.PollingXHR this$0 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.transports.PollingXHR,com.adhoc.nkzawa.engineio.client.transports.PollingXHR) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.engineio.client.transports.PollingXHR$6$1 -> com.adhoc.na:
    java.lang.Object[] val$args -> a
    com.adhoc.nkzawa.engineio.client.transports.PollingXHR$6 this$1 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.transports.PollingXHR$6,java.lang.Object[]) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.transports.PollingXHR$Request -> com.adhoc.nb:
    java.lang.String method -> a
    java.lang.String uri -> b
    byte[] data -> c
    javax.net.ssl.SSLContext sslContext -> d
    java.net.HttpURLConnection xhr -> e
    javax.net.ssl.HostnameVerifier hostnameVerifier -> f
    void <init>(com.adhoc.nkzawa.engineio.client.transports.PollingXHR$Request$Options) -> <init>
    void create() -> b
    void onSuccess() -> c
    void onData(java.lang.String) -> b
    void onData(byte[]) -> a
    void onError(java.lang.Exception) -> a
    void onRequestHeaders(java.util.Map) -> a
    void onResponseHeaders(java.util.Map) -> b
    void cleanup() -> d
    void onLoad() -> e
    byte[] access$300(com.adhoc.nkzawa.engineio.client.transports.PollingXHR$Request) -> a
    java.net.HttpURLConnection access$400(com.adhoc.nkzawa.engineio.client.transports.PollingXHR$Request) -> b
    void access$500(com.adhoc.nkzawa.engineio.client.transports.PollingXHR$Request,java.util.Map) -> a
    void access$600(com.adhoc.nkzawa.engineio.client.transports.PollingXHR$Request) -> c
    void access$700(com.adhoc.nkzawa.engineio.client.transports.PollingXHR$Request,java.lang.Exception) -> a
com.adhoc.nkzawa.engineio.client.transports.PollingXHR$Request$1 -> com.adhoc.nc:
    com.adhoc.nkzawa.engineio.client.transports.PollingXHR$Request val$self -> a
    com.adhoc.nkzawa.engineio.client.transports.PollingXHR$Request this$0 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.transports.PollingXHR$Request,com.adhoc.nkzawa.engineio.client.transports.PollingXHR$Request) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.transports.PollingXHR$Request$Options -> com.adhoc.nd:
    java.lang.String uri -> a
    java.lang.String method -> b
    byte[] data -> c
    javax.net.ssl.SSLContext sslContext -> d
    javax.net.ssl.HostnameVerifier hostnameVerifier -> e
    void <init>() -> <init>
com.adhoc.nkzawa.engineio.client.transports.WebSocket -> com.adhoc.ne:
    java.util.logging.Logger logger -> o
    com.adhoc.http.ws.WebSocket ws -> p
    com.adhoc.http.ws.WebSocketCall wsCall -> q
    void <init>(com.adhoc.nkzawa.engineio.client.Transport$Options) -> <init>
    void doOpen() -> f
    void write(com.adhoc.nkzawa.engineio.parser.Packet[]) -> b
    void onClose() -> e
    void doClose() -> g
    java.lang.String uri() -> h
    com.adhoc.http.ws.WebSocket access$002(com.adhoc.nkzawa.engineio.client.transports.WebSocket,com.adhoc.http.ws.WebSocket) -> a
    void access$100(com.adhoc.nkzawa.engineio.client.transports.WebSocket) -> a
    com.adhoc.nkzawa.engineio.client.Transport access$200(com.adhoc.nkzawa.engineio.client.transports.WebSocket,java.lang.String,java.lang.Exception) -> a
    void access$300(com.adhoc.nkzawa.engineio.client.transports.WebSocket,java.lang.String) -> a
    void access$400(com.adhoc.nkzawa.engineio.client.transports.WebSocket,byte[]) -> a
    com.adhoc.nkzawa.engineio.client.Transport access$500(com.adhoc.nkzawa.engineio.client.transports.WebSocket,java.lang.String,java.lang.Exception) -> b
    com.adhoc.http.ws.WebSocket access$000(com.adhoc.nkzawa.engineio.client.transports.WebSocket) -> b
    java.util.logging.Logger access$600() -> i
    void <clinit>() -> <clinit>
com.adhoc.nkzawa.engineio.client.transports.WebSocket$1 -> com.adhoc.nf:
    com.adhoc.nkzawa.engineio.client.transports.WebSocket val$self -> a
    com.adhoc.nkzawa.engineio.client.transports.WebSocket this$0 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.transports.WebSocket,com.adhoc.nkzawa.engineio.client.transports.WebSocket) -> <init>
    void onOpen(com.adhoc.http.ws.WebSocket,com.adhoc.http.Response) -> a
    void onMessage(com.adhoc.io.BufferedSource,com.adhoc.http.ws.WebSocket$PayloadType) -> a
    void onPong(com.adhoc.io.Buffer) -> a
    void onClose(int,java.lang.String) -> a
    void onFailure(java.io.IOException,com.adhoc.http.Response) -> a
com.adhoc.nkzawa.engineio.client.transports.WebSocket$1$1 -> com.adhoc.ng:
    java.util.Map val$headers -> a
    com.adhoc.nkzawa.engineio.client.transports.WebSocket$1 this$1 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.transports.WebSocket$1,java.util.Map) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.transports.WebSocket$1$2 -> com.adhoc.nh:
    com.adhoc.http.ws.WebSocket$PayloadType val$type -> a
    com.adhoc.nkzawa.engineio.client.transports.WebSocket$1 this$1 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.transports.WebSocket$1,com.adhoc.http.ws.WebSocket$PayloadType) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.transports.WebSocket$1$3 -> com.adhoc.ni:
    java.lang.Object val$finalData -> a
    com.adhoc.nkzawa.engineio.client.transports.WebSocket$1 this$1 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.transports.WebSocket$1,java.lang.Object) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.transports.WebSocket$1$4 -> com.adhoc.nj:
    com.adhoc.nkzawa.engineio.client.transports.WebSocket$1 this$1 -> a
    void <init>(com.adhoc.nkzawa.engineio.client.transports.WebSocket$1) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.transports.WebSocket$1$5 -> com.adhoc.nk:
    java.io.IOException val$e -> a
    com.adhoc.nkzawa.engineio.client.transports.WebSocket$1 this$1 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.transports.WebSocket$1,java.io.IOException) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.transports.WebSocket$2 -> com.adhoc.nl:
    com.adhoc.nkzawa.engineio.client.transports.WebSocket val$self -> a
    com.adhoc.nkzawa.engineio.client.transports.WebSocket this$0 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.transports.WebSocket,com.adhoc.nkzawa.engineio.client.transports.WebSocket) -> <init>
    void call(java.lang.Object) -> a
com.adhoc.nkzawa.engineio.client.transports.WebSocket$3 -> com.adhoc.nm:
    com.adhoc.nkzawa.engineio.client.transports.WebSocket val$self -> a
    com.adhoc.nkzawa.engineio.client.transports.WebSocket this$0 -> b
    void <init>(com.adhoc.nkzawa.engineio.client.transports.WebSocket,com.adhoc.nkzawa.engineio.client.transports.WebSocket) -> <init>
    void run() -> run
com.adhoc.nkzawa.engineio.client.transports.WebSocket$4 -> com.adhoc.nn:
    int[] $SwitchMap$com$adhoc$http$ws$WebSocket$PayloadType -> a
    void <clinit>() -> <clinit>
com.adhoc.nkzawa.engineio.parser.Buffer -> com.adhoc.no:
    byte[] concat(byte[][]) -> a
    byte[] concat(byte[][],int) -> a
com.adhoc.nkzawa.engineio.parser.Packet -> com.adhoc.np:
    java.lang.String type -> a
    java.lang.Object data -> b
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Object) -> <init>
com.adhoc.nkzawa.engineio.parser.Parser -> com.adhoc.nq:
    int MAX_INT_CHAR_LENGTH -> a
    java.util.Map packets -> b
    java.util.Map packetslist -> c
    com.adhoc.nkzawa.engineio.parser.Packet err -> d
    void encodePacket(com.adhoc.nkzawa.engineio.parser.Packet,com.adhoc.nkzawa.engineio.parser.Parser$EncodeCallback) -> a
    void encodePacket(com.adhoc.nkzawa.engineio.parser.Packet,boolean,com.adhoc.nkzawa.engineio.parser.Parser$EncodeCallback) -> a
    void encodeByteArray(com.adhoc.nkzawa.engineio.parser.Packet,com.adhoc.nkzawa.engineio.parser.Parser$EncodeCallback) -> b
    com.adhoc.nkzawa.engineio.parser.Packet decodePacket(java.lang.String) -> a
    com.adhoc.nkzawa.engineio.parser.Packet decodePacket(java.lang.String,boolean) -> a
    com.adhoc.nkzawa.engineio.parser.Packet decodePacket(byte[]) -> a
    void encodePayload(com.adhoc.nkzawa.engineio.parser.Packet[],com.adhoc.nkzawa.engineio.parser.Parser$EncodeCallback) -> a
    void decodePayload(java.lang.String,com.adhoc.nkzawa.engineio.parser.Parser$DecodePayloadCallback) -> a
    void decodePayload(byte[],com.adhoc.nkzawa.engineio.parser.Parser$DecodePayloadCallback) -> a
    java.lang.String byteArrayToString(byte[]) -> b
    byte[] stringToByteArray(java.lang.String) -> c
    byte[] access$000(java.lang.String) -> b
    void <clinit>() -> <clinit>
com.adhoc.nkzawa.engineio.parser.Parser$1 -> com.adhoc.nr:
    void <init>() -> <init>
com.adhoc.nkzawa.engineio.parser.Parser$2 -> com.adhoc.ns:
    java.util.ArrayList val$results -> a
    void <init>(java.util.ArrayList) -> <init>
    void call(java.lang.Object) -> a
com.adhoc.nkzawa.engineio.parser.Parser$DecodePayloadCallback -> com.adhoc.nt:
    boolean call(com.adhoc.nkzawa.engineio.parser.Packet,int,int) -> a
com.adhoc.nkzawa.engineio.parser.Parser$EncodeCallback -> com.adhoc.nu:
    void call(java.lang.Object) -> a
com.adhoc.nkzawa.global.Global -> com.adhoc.nv:
    java.lang.String encodeURIComponent(java.lang.String) -> a
    java.lang.String decodeURIComponent(java.lang.String) -> b
com.adhoc.nkzawa.hasbinary.HasBinary -> com.adhoc.nw:
    boolean hasBinary(java.lang.Object) -> a
    boolean _hasBinary(java.lang.Object) -> b
com.adhoc.nkzawa.parseqs.ParseQS -> com.adhoc.nx:
    java.lang.String encode(java.util.Map) -> a
    java.util.Map decode(java.lang.String) -> a
com.adhoc.nkzawa.socketio.client.Ack -> com.adhoc.ny:
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.socketio.client.IO -> com.adhoc.nz:
    java.util.logging.Logger logger -> b
    java.util.concurrent.ConcurrentHashMap managers -> c
    int protocol -> a
    void <init>() -> <init>
    com.adhoc.nkzawa.socketio.client.Socket socket(java.lang.String,com.adhoc.nkzawa.socketio.client.IO$Options) -> a
    com.adhoc.nkzawa.socketio.client.Socket socket(java.net.URI,com.adhoc.nkzawa.socketio.client.IO$Options) -> a
    void <clinit>() -> <clinit>
com.adhoc.nkzawa.socketio.client.IO$Options -> com.adhoc.oa:
    boolean forceNew -> q
    boolean multiplex -> r
    void <init>() -> <init>
com.adhoc.nkzawa.socketio.client.Manager -> com.adhoc.ob:
    java.util.logging.Logger logger -> e
    javax.net.ssl.SSLContext defaultSSLContext -> a
    javax.net.ssl.HostnameVerifier defaultHostnameVerifier -> b
    com.adhoc.nkzawa.socketio.client.Manager$ReadyState readyState -> c
    boolean _reconnection -> f
    boolean skipReconnect -> g
    boolean reconnecting -> h
    boolean encoding -> i
    int _reconnectionAttempts -> j
    long _reconnectionDelay -> k
    long _reconnectionDelayMax -> l
    double _randomizationFactor -> m
    com.adhoc.nkzawa.backo.Backoff backoff -> n
    long _timeout -> o
    java.util.Set connected -> p
    java.net.URI uri -> q
    java.util.List packetBuffer -> r
    java.util.Queue subs -> s
    com.adhoc.nkzawa.socketio.client.Manager$Options opts -> t
    com.adhoc.nkzawa.engineio.client.Socket engine -> d
    com.adhoc.nkzawa.socketio.parser.Parser$Encoder encoder -> u
    com.adhoc.nkzawa.socketio.parser.Parser$Decoder decoder -> v
    java.util.concurrent.ConcurrentHashMap nsps -> w
    void <init>() -> <init>
    void <init>(java.net.URI,com.adhoc.nkzawa.socketio.client.Manager$Options) -> <init>
    void emitAll(java.lang.String,java.lang.Object[]) -> b
    void updateSocketIds() -> h
    com.adhoc.nkzawa.socketio.client.Manager reconnection(boolean) -> a
    com.adhoc.nkzawa.socketio.client.Manager reconnectionAttempts(int) -> a
    long reconnectionDelay() -> b
    com.adhoc.nkzawa.socketio.client.Manager reconnectionDelay(long) -> a
    double randomizationFactor() -> c
    com.adhoc.nkzawa.socketio.client.Manager randomizationFactor(double) -> a
    long reconnectionDelayMax() -> d
    com.adhoc.nkzawa.socketio.client.Manager reconnectionDelayMax(long) -> b
    com.adhoc.nkzawa.socketio.client.Manager timeout(long) -> c
    void maybeReconnectOnOpen() -> i
    com.adhoc.nkzawa.socketio.client.Manager open() -> e
    com.adhoc.nkzawa.socketio.client.Manager open(com.adhoc.nkzawa.socketio.client.Manager$OpenCallback) -> a
    void onopen() -> j
    void ondata(java.lang.String) -> c
    void ondata(byte[]) -> a
    void ondecoded(com.adhoc.nkzawa.socketio.parser.Packet) -> b
    void onerror(java.lang.Exception) -> a
    com.adhoc.nkzawa.socketio.client.Socket socket(java.lang.String) -> b
    void destroy(com.adhoc.nkzawa.socketio.client.Socket) -> a
    void packet(com.adhoc.nkzawa.socketio.parser.Packet) -> a
    void processPacketQueue() -> k
    void cleanup() -> l
    void close() -> f
    void onclose(java.lang.String) -> d
    void reconnect() -> m
    void onreconnect() -> n
    java.util.logging.Logger access$000() -> g
    java.net.URI access$100(com.adhoc.nkzawa.socketio.client.Manager) -> a
    com.adhoc.nkzawa.socketio.client.Manager$Options access$200(com.adhoc.nkzawa.socketio.client.Manager) -> b
    boolean access$302(com.adhoc.nkzawa.socketio.client.Manager,boolean) -> a
    void access$400(com.adhoc.nkzawa.socketio.client.Manager) -> c
    void access$500(com.adhoc.nkzawa.socketio.client.Manager) -> d
    void access$600(com.adhoc.nkzawa.socketio.client.Manager,java.lang.String,java.lang.Object[]) -> a
    void access$700(com.adhoc.nkzawa.socketio.client.Manager) -> e
    long access$800(com.adhoc.nkzawa.socketio.client.Manager) -> f
    java.util.Queue access$900(com.adhoc.nkzawa.socketio.client.Manager) -> g
    void access$1000(com.adhoc.nkzawa.socketio.client.Manager,java.lang.String) -> a
    void access$1100(com.adhoc.nkzawa.socketio.client.Manager,byte[]) -> a
    void access$1200(com.adhoc.nkzawa.socketio.client.Manager,com.adhoc.nkzawa.socketio.parser.Packet) -> a
    void access$1300(com.adhoc.nkzawa.socketio.client.Manager,java.lang.Exception) -> a
    void access$1400(com.adhoc.nkzawa.socketio.client.Manager,java.lang.String) -> b
    java.util.Set access$1500(com.adhoc.nkzawa.socketio.client.Manager) -> h
    boolean access$1602(com.adhoc.nkzawa.socketio.client.Manager,boolean) -> b
    void access$1700(com.adhoc.nkzawa.socketio.client.Manager) -> i
    boolean access$300(com.adhoc.nkzawa.socketio.client.Manager) -> j
    com.adhoc.nkzawa.backo.Backoff access$1800(com.adhoc.nkzawa.socketio.client.Manager) -> k
    boolean access$1902(com.adhoc.nkzawa.socketio.client.Manager,boolean) -> c
    void access$2000(com.adhoc.nkzawa.socketio.client.Manager) -> l
    void access$2100(com.adhoc.nkzawa.socketio.client.Manager) -> m
    void <clinit>() -> <clinit>
com.adhoc.nkzawa.socketio.client.Manager$1 -> com.adhoc.oc:
    com.adhoc.nkzawa.socketio.client.Manager$OpenCallback val$fn -> a
    com.adhoc.nkzawa.socketio.client.Manager this$0 -> b
    void <init>(com.adhoc.nkzawa.socketio.client.Manager,com.adhoc.nkzawa.socketio.client.Manager$OpenCallback) -> <init>
    void run() -> run
com.adhoc.nkzawa.socketio.client.Manager$1$1 -> com.adhoc.od:
    com.adhoc.nkzawa.socketio.client.Manager val$self -> a
    com.adhoc.nkzawa.socketio.client.Manager$1 this$1 -> b
    void <init>(com.adhoc.nkzawa.socketio.client.Manager$1,com.adhoc.nkzawa.socketio.client.Manager) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.socketio.client.Manager$1$2 -> com.adhoc.oe:
    com.adhoc.nkzawa.socketio.client.Manager val$self -> a
    com.adhoc.nkzawa.socketio.client.Manager$1 this$1 -> b
    void <init>(com.adhoc.nkzawa.socketio.client.Manager$1,com.adhoc.nkzawa.socketio.client.Manager) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.socketio.client.Manager$1$3 -> com.adhoc.of:
    com.adhoc.nkzawa.socketio.client.Manager val$self -> a
    com.adhoc.nkzawa.socketio.client.Manager$1 this$1 -> b
    void <init>(com.adhoc.nkzawa.socketio.client.Manager$1,com.adhoc.nkzawa.socketio.client.Manager) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.socketio.client.Manager$1$4 -> com.adhoc.og:
    long val$timeout -> a
    com.adhoc.nkzawa.socketio.client.On$Handle val$openSub -> b
    com.adhoc.nkzawa.engineio.client.Socket val$socket -> c
    com.adhoc.nkzawa.socketio.client.Manager val$self -> d
    com.adhoc.nkzawa.socketio.client.Manager$1 this$1 -> e
    void <init>(com.adhoc.nkzawa.socketio.client.Manager$1,long,com.adhoc.nkzawa.socketio.client.On$Handle,com.adhoc.nkzawa.engineio.client.Socket,com.adhoc.nkzawa.socketio.client.Manager) -> <init>
    void run() -> run
com.adhoc.nkzawa.socketio.client.Manager$1$4$1 -> com.adhoc.oh:
    com.adhoc.nkzawa.socketio.client.Manager$1$4 this$2 -> a
    void <init>(com.adhoc.nkzawa.socketio.client.Manager$1$4) -> <init>
    void run() -> run
com.adhoc.nkzawa.socketio.client.Manager$1$5 -> com.adhoc.oi:
    java.util.Timer val$timer -> a
    com.adhoc.nkzawa.socketio.client.Manager$1 this$1 -> b
    void <init>(com.adhoc.nkzawa.socketio.client.Manager$1,java.util.Timer) -> <init>
    void destroy() -> a
com.adhoc.nkzawa.socketio.client.Manager$2 -> com.adhoc.oj:
    com.adhoc.nkzawa.socketio.client.Manager this$0 -> a
    void <init>(com.adhoc.nkzawa.socketio.client.Manager) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.socketio.client.Manager$3 -> com.adhoc.ok:
    com.adhoc.nkzawa.socketio.client.Manager this$0 -> a
    void <init>(com.adhoc.nkzawa.socketio.client.Manager) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.socketio.client.Manager$4 -> com.adhoc.ol:
    com.adhoc.nkzawa.socketio.client.Manager this$0 -> a
    void <init>(com.adhoc.nkzawa.socketio.client.Manager) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.socketio.client.Manager$5 -> com.adhoc.om:
    com.adhoc.nkzawa.socketio.client.Manager this$0 -> a
    void <init>(com.adhoc.nkzawa.socketio.client.Manager) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.socketio.client.Manager$6 -> com.adhoc.on:
    com.adhoc.nkzawa.socketio.client.Socket val$s -> a
    com.adhoc.nkzawa.socketio.client.Manager val$self -> b
    com.adhoc.nkzawa.socketio.client.Manager this$0 -> c
    void <init>(com.adhoc.nkzawa.socketio.client.Manager,com.adhoc.nkzawa.socketio.client.Socket,com.adhoc.nkzawa.socketio.client.Manager) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.socketio.client.Manager$7 -> com.adhoc.oo:
    com.adhoc.nkzawa.socketio.client.Manager val$self -> a
    com.adhoc.nkzawa.socketio.client.Manager this$0 -> b
    void <init>(com.adhoc.nkzawa.socketio.client.Manager,com.adhoc.nkzawa.socketio.client.Manager) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.socketio.client.Manager$8 -> com.adhoc.op:
    com.adhoc.nkzawa.socketio.client.Manager val$self -> a
    com.adhoc.nkzawa.socketio.client.Manager this$0 -> b
    void <init>(com.adhoc.nkzawa.socketio.client.Manager,com.adhoc.nkzawa.socketio.client.Manager) -> <init>
    void run() -> run
com.adhoc.nkzawa.socketio.client.Manager$8$1 -> com.adhoc.oq:
    com.adhoc.nkzawa.socketio.client.Manager$8 this$1 -> a
    void <init>(com.adhoc.nkzawa.socketio.client.Manager$8) -> <init>
    void run() -> run
com.adhoc.nkzawa.socketio.client.Manager$8$1$1 -> com.adhoc.or:
    com.adhoc.nkzawa.socketio.client.Manager$8$1 this$2 -> a
    void <init>(com.adhoc.nkzawa.socketio.client.Manager$8$1) -> <init>
    void call(java.lang.Exception) -> a
com.adhoc.nkzawa.socketio.client.Manager$9 -> com.adhoc.os:
    java.util.Timer val$timer -> a
    com.adhoc.nkzawa.socketio.client.Manager this$0 -> b
    void <init>(com.adhoc.nkzawa.socketio.client.Manager,java.util.Timer) -> <init>
    void destroy() -> a
com.adhoc.nkzawa.socketio.client.Manager$Engine -> com.adhoc.ot:
    void <init>(java.net.URI,com.adhoc.nkzawa.engineio.client.Socket$Options) -> <init>
com.adhoc.nkzawa.socketio.client.Manager$OpenCallback -> com.adhoc.ou:
    void call(java.lang.Exception) -> a
com.adhoc.nkzawa.socketio.client.Manager$Options -> com.adhoc.ov:
    boolean reconnection -> s
    int reconnectionAttempts -> t
    long reconnectionDelay -> u
    long reconnectionDelayMax -> v
    double randomizationFactor -> w
    long timeout -> x
    void <init>() -> <init>
com.adhoc.nkzawa.socketio.client.Manager$ReadyState -> com.adhoc.ow:
    com.adhoc.nkzawa.socketio.client.Manager$ReadyState CLOSED -> a
    com.adhoc.nkzawa.socketio.client.Manager$ReadyState OPENING -> b
    com.adhoc.nkzawa.socketio.client.Manager$ReadyState OPEN -> c
    com.adhoc.nkzawa.socketio.client.Manager$ReadyState[] $VALUES -> d
    com.adhoc.nkzawa.socketio.client.Manager$ReadyState[] values() -> values
    com.adhoc.nkzawa.socketio.client.Manager$ReadyState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.adhoc.nkzawa.socketio.client.On -> com.adhoc.ox:
    com.adhoc.nkzawa.socketio.client.On$Handle on(com.adhoc.nkzawa.emitter.Emitter,java.lang.String,com.adhoc.nkzawa.emitter.Emitter$Listener) -> a
com.adhoc.nkzawa.socketio.client.On$1 -> com.adhoc.oy:
    com.adhoc.nkzawa.emitter.Emitter val$obj -> a
    java.lang.String val$ev -> b
    com.adhoc.nkzawa.emitter.Emitter$Listener val$fn -> c
    void <init>(com.adhoc.nkzawa.emitter.Emitter,java.lang.String,com.adhoc.nkzawa.emitter.Emitter$Listener) -> <init>
    void destroy() -> a
com.adhoc.nkzawa.socketio.client.On$Handle -> com.adhoc.oz:
    void destroy() -> a
com.adhoc.nkzawa.socketio.client.Socket -> com.adhoc.pa:
    java.util.logging.Logger logger -> c
    java.util.Map events -> a
    java.lang.String id -> b
    boolean connected -> d
    int ids -> e
    java.lang.String nsp -> f
    com.adhoc.nkzawa.socketio.client.Manager io -> g
    java.util.Map acks -> h
    java.util.Queue subs -> i
    java.util.Queue receiveBuffer -> j
    java.util.Queue sendBuffer -> k
    void <init>(com.adhoc.nkzawa.socketio.client.Manager,java.lang.String) -> <init>
    void subEvents() -> g
    com.adhoc.nkzawa.socketio.client.Socket open() -> b
    com.adhoc.nkzawa.socketio.client.Socket connect() -> c
    com.adhoc.nkzawa.emitter.Emitter emit(java.lang.String,java.lang.Object[]) -> a
    org.json.JSONArray remove(org.json.JSONArray,int) -> b
    void packet(com.adhoc.nkzawa.socketio.parser.Packet) -> a
    void onopen() -> h
    void onclose(java.lang.String) -> b
    void onpacket(com.adhoc.nkzawa.socketio.parser.Packet) -> b
    void onevent(com.adhoc.nkzawa.socketio.parser.Packet) -> c
    com.adhoc.nkzawa.socketio.client.Ack ack(int) -> a
    void onack(com.adhoc.nkzawa.socketio.parser.Packet) -> d
    void onconnect() -> i
    void emitBuffered() -> j
    void ondisconnect() -> k
    void destroy() -> l
    com.adhoc.nkzawa.socketio.client.Socket close() -> d
    com.adhoc.nkzawa.socketio.client.Socket disconnect() -> e
    java.lang.Object[] toArray(org.json.JSONArray) -> a
    void access$000(com.adhoc.nkzawa.socketio.client.Socket) -> a
    void access$100(com.adhoc.nkzawa.socketio.client.Socket,com.adhoc.nkzawa.socketio.parser.Packet) -> a
    void access$200(com.adhoc.nkzawa.socketio.client.Socket,java.lang.String) -> a
    boolean access$300(com.adhoc.nkzawa.socketio.client.Socket) -> b
    void access$400(com.adhoc.nkzawa.socketio.client.Socket) -> c
    com.adhoc.nkzawa.socketio.client.Manager access$500(com.adhoc.nkzawa.socketio.client.Socket) -> d
    com.adhoc.nkzawa.emitter.Emitter access$601(com.adhoc.nkzawa.socketio.client.Socket,java.lang.String,java.lang.Object[]) -> a
    int access$700(com.adhoc.nkzawa.socketio.client.Socket) -> e
    java.util.logging.Logger access$800() -> f
    java.util.Map access$900(com.adhoc.nkzawa.socketio.client.Socket) -> f
    org.json.JSONArray access$1000(org.json.JSONArray,int) -> a
    int access$708(com.adhoc.nkzawa.socketio.client.Socket) -> g
    void access$1100(com.adhoc.nkzawa.socketio.client.Socket,com.adhoc.nkzawa.socketio.parser.Packet) -> b
    java.util.Queue access$1200(com.adhoc.nkzawa.socketio.client.Socket) -> h
    java.lang.String access$1300(com.adhoc.nkzawa.socketio.client.Socket) -> i
    void access$1400(com.adhoc.nkzawa.socketio.client.Socket) -> j
    void <clinit>() -> <clinit>
com.adhoc.nkzawa.socketio.client.Socket$1 -> com.adhoc.pb:
    void <init>() -> <init>
com.adhoc.nkzawa.socketio.client.Socket$2 -> com.adhoc.pc:
    com.adhoc.nkzawa.socketio.client.Manager val$io -> a
    com.adhoc.nkzawa.socketio.client.Socket this$0 -> b
    void <init>(com.adhoc.nkzawa.socketio.client.Socket,com.adhoc.nkzawa.socketio.client.Manager) -> <init>
com.adhoc.nkzawa.socketio.client.Socket$2$1 -> com.adhoc.pd:
    com.adhoc.nkzawa.socketio.client.Socket$2 this$1 -> a
    void <init>(com.adhoc.nkzawa.socketio.client.Socket$2) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.socketio.client.Socket$2$2 -> com.adhoc.pe:
    com.adhoc.nkzawa.socketio.client.Socket$2 this$1 -> a
    void <init>(com.adhoc.nkzawa.socketio.client.Socket$2) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.socketio.client.Socket$2$3 -> com.adhoc.pf:
    com.adhoc.nkzawa.socketio.client.Socket$2 this$1 -> a
    void <init>(com.adhoc.nkzawa.socketio.client.Socket$2) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.socketio.client.Socket$3 -> com.adhoc.pg:
    com.adhoc.nkzawa.socketio.client.Socket this$0 -> a
    void <init>(com.adhoc.nkzawa.socketio.client.Socket) -> <init>
    void run() -> run
com.adhoc.nkzawa.socketio.client.Socket$5 -> com.adhoc.ph:
    java.lang.String val$event -> a
    java.lang.Object[] val$args -> b
    com.adhoc.nkzawa.socketio.client.Socket this$0 -> c
    void <init>(com.adhoc.nkzawa.socketio.client.Socket,java.lang.String,java.lang.Object[]) -> <init>
    void run() -> run
com.adhoc.nkzawa.socketio.client.Socket$7 -> com.adhoc.pi:
    boolean[] val$sent -> a
    int val$id -> b
    com.adhoc.nkzawa.socketio.client.Socket val$self -> c
    com.adhoc.nkzawa.socketio.client.Socket this$0 -> d
    void <init>(com.adhoc.nkzawa.socketio.client.Socket,boolean[],int,com.adhoc.nkzawa.socketio.client.Socket) -> <init>
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.socketio.client.Socket$7$1 -> com.adhoc.pj:
    java.lang.Object[] val$args -> a
    com.adhoc.nkzawa.socketio.client.Socket$7 this$1 -> b
    void <init>(com.adhoc.nkzawa.socketio.client.Socket$7,java.lang.Object[]) -> <init>
    void run() -> run
com.adhoc.nkzawa.socketio.client.Socket$8 -> com.adhoc.pk:
    com.adhoc.nkzawa.socketio.client.Socket this$0 -> a
    void <init>(com.adhoc.nkzawa.socketio.client.Socket) -> <init>
    void run() -> run
com.adhoc.nkzawa.socketio.client.SocketIOException -> com.adhoc.pl:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
com.adhoc.nkzawa.socketio.client.Url -> com.adhoc.pm:
    java.util.regex.Pattern PATTERN_HTTP -> a
    java.util.regex.Pattern PATTERN_HTTPS -> b
    java.net.URL parse(java.net.URI) -> a
    java.lang.String extractId(java.net.URL) -> a
    void <clinit>() -> <clinit>
com.adhoc.nkzawa.socketio.parser.Binary -> com.adhoc.pn:
    com.adhoc.nkzawa.socketio.parser.Binary$DeconstructedPacket deconstructPacket(com.adhoc.nkzawa.socketio.parser.Packet) -> a
    java.lang.Object _deconstructPacket(java.lang.Object,java.util.List) -> a
    com.adhoc.nkzawa.socketio.parser.Packet reconstructPacket(com.adhoc.nkzawa.socketio.parser.Packet,byte[][]) -> a
    java.lang.Object _reconstructPacket(java.lang.Object,byte[][]) -> a
com.adhoc.nkzawa.socketio.parser.Binary$DeconstructedPacket -> com.adhoc.po:
    com.adhoc.nkzawa.socketio.parser.Packet packet -> a
    byte[][] buffers -> b
    void <init>() -> <init>
com.adhoc.nkzawa.socketio.parser.Packet -> com.adhoc.pp:
    int type -> a
    int id -> b
    java.lang.String nsp -> c
    java.lang.Object data -> d
    int attachments -> e
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,java.lang.Object) -> <init>
com.adhoc.nkzawa.socketio.parser.Parser -> com.adhoc.pq:
    java.util.logging.Logger logger -> c
    int protocol -> a
    java.lang.String[] types -> b
    void <init>() -> <init>
    com.adhoc.nkzawa.socketio.parser.Packet error() -> c
    java.util.logging.Logger access$000() -> a
    com.adhoc.nkzawa.socketio.parser.Packet access$100() -> b
    void <clinit>() -> <clinit>
com.adhoc.nkzawa.socketio.parser.Parser$BinaryReconstructor -> com.adhoc.pr:
    com.adhoc.nkzawa.socketio.parser.Packet reconPack -> a
    java.util.List buffers -> b
    void <init>(com.adhoc.nkzawa.socketio.parser.Packet) -> <init>
    com.adhoc.nkzawa.socketio.parser.Packet takeBinaryData(byte[]) -> a
    void finishReconstruction() -> a
com.adhoc.nkzawa.socketio.parser.Parser$Decoder -> com.adhoc.ps:
    java.lang.String EVENT_DECODED -> a
    com.adhoc.nkzawa.socketio.parser.Parser$BinaryReconstructor reconstructor -> b
    void <init>() -> <init>
    void add(java.lang.String) -> b
    void add(byte[]) -> a
    com.adhoc.nkzawa.socketio.parser.Packet decodeString(java.lang.String) -> c
    void <clinit>() -> <clinit>
com.adhoc.nkzawa.socketio.parser.Parser$Encoder -> com.adhoc.pt:
    void <init>() -> <init>
    void encode(com.adhoc.nkzawa.socketio.parser.Packet,com.adhoc.nkzawa.socketio.parser.Parser$Encoder$Callback) -> a
    java.lang.String encodeAsString(com.adhoc.nkzawa.socketio.parser.Packet) -> a
    void encodeAsBinary(com.adhoc.nkzawa.socketio.parser.Packet,com.adhoc.nkzawa.socketio.parser.Parser$Encoder$Callback) -> b
com.adhoc.nkzawa.socketio.parser.Parser$Encoder$Callback -> com.adhoc.pu:
    void call(java.lang.Object[]) -> a
com.adhoc.nkzawa.thread.EventThread -> com.adhoc.pv:
    java.util.concurrent.ThreadFactory THREAD_FACTORY -> a
    com.adhoc.nkzawa.thread.EventThread thread -> b
    java.util.concurrent.ExecutorService service -> c
    int counter -> d
    void <init>(java.lang.Runnable) -> <init>
    boolean isCurrent() -> a
    void exec(java.lang.Runnable) -> a
    void nextTick(java.lang.Runnable) -> b
    com.adhoc.nkzawa.thread.EventThread access$002(com.adhoc.nkzawa.thread.EventThread) -> a
    void <init>(java.lang.Runnable,com.adhoc.nkzawa.thread.EventThread$1) -> <init>
    com.adhoc.nkzawa.thread.EventThread access$000() -> b
    int access$210() -> c
    int access$200() -> d
    java.util.concurrent.ExecutorService access$300() -> e
    java.util.concurrent.ExecutorService access$302(java.util.concurrent.ExecutorService) -> a
    void <clinit>() -> <clinit>
com.adhoc.nkzawa.thread.EventThread$1 -> com.adhoc.pw:
    void <init>() -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.adhoc.nkzawa.thread.EventThread$2 -> com.adhoc.px:
    java.lang.Runnable val$task -> a
    void <init>(java.lang.Runnable) -> <init>
    void run() -> run
com.adhoc.nkzawa.utf8.UTF8 -> com.adhoc.py:
    int[] byteArray -> a
    int byteCount -> b
    int byteIndex -> c
    java.lang.String encode(java.lang.String) -> a
    java.lang.String decode(java.lang.String) -> b
    int[] ucs2decode(java.lang.String) -> c
    java.lang.String encodeCodePoint(int) -> a
    char[] createByte(int,int) -> a
    int decodeSymbol() -> a
    int readContinuationByte() -> b
    java.lang.String ucs2encode(int[]) -> a
    void checkScalarValue(int) -> b
    int[] listToArray(java.util.List) -> a
com.adhoc.nkzawa.utf8.UTF8Exception -> com.adhoc.pz:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
com.adhoc.pic.Action -> com.adhoc.qa:
    com.adhoc.pic.Picasso picasso -> a
    com.adhoc.pic.Request request -> b
    java.lang.ref.SoftReference target -> c
    boolean noFade -> d
    int memoryPolicy -> e
    int networkPolicy -> f
    int errorResId -> g
    android.graphics.drawable.Drawable errorDrawable -> h
    java.lang.String key -> i
    java.lang.Object tag -> j
    boolean willReplay -> k
    boolean cancelled -> l
    void <init>(com.adhoc.pic.Picasso,java.lang.Object,com.adhoc.pic.Request,int,int,int,android.graphics.drawable.Drawable,java.lang.String,java.lang.Object,boolean) -> <init>
    void complete(android.graphics.Bitmap,com.adhoc.pic.Picasso$LoadedFrom) -> a
    void error() -> a
    void cancel() -> b
    com.adhoc.pic.Request getRequest() -> c
    java.lang.Object getTarget() -> d
    java.lang.String getKey() -> e
    boolean isCancelled() -> f
    boolean willReplay() -> g
    int getMemoryPolicy() -> h
    int getNetworkPolicy() -> i
    com.adhoc.pic.Picasso getPicasso() -> j
    com.adhoc.pic.Picasso$Priority getPriority() -> k
    java.lang.Object getTag() -> l
com.adhoc.pic.Action$RequestWeakReference -> com.adhoc.qb:
    com.adhoc.pic.Action action -> a
    void <init>(com.adhoc.pic.Action,java.lang.Object,java.lang.ref.ReferenceQueue) -> <init>
com.adhoc.pic.AssetRequestHandler -> com.adhoc.qc:
    int ASSET_PREFIX_LENGTH -> a
    android.content.res.AssetManager assetManager -> b
    void <init>(android.content.Context) -> <init>
    boolean canHandleRequest(com.adhoc.pic.Request) -> a
    com.adhoc.pic.RequestHandler$Result load(com.adhoc.pic.Request,int) -> a
    java.lang.String getFilePath(com.adhoc.pic.Request) -> b
    void <clinit>() -> <clinit>
com.adhoc.pic.BitmapHunter -> com.adhoc.qd:
    java.lang.Object DECODE_LOCK -> t
    java.lang.ThreadLocal NAME_BUILDER -> u
    java.util.concurrent.atomic.AtomicInteger SEQUENCE_GENERATOR -> v
    com.adhoc.pic.RequestHandler ERRORING_HANDLER -> w
    int sequence -> a
    com.adhoc.pic.Picasso picasso -> b
    com.adhoc.pic.Dispatcher dispatcher -> c
    com.adhoc.pic.Cache cache -> d
    com.adhoc.pic.Stats stats -> e
    java.lang.String key -> f
    com.adhoc.pic.Request data -> g
    int memoryPolicy -> h
    int networkPolicy -> i
    com.adhoc.pic.RequestHandler requestHandler -> j
    com.adhoc.pic.Action action -> k
    java.util.List actions -> l
    android.graphics.Bitmap result -> m
    java.util.concurrent.Future future -> n
    com.adhoc.pic.Picasso$LoadedFrom loadedFrom -> o
    java.lang.Exception exception -> p
    int exifOrientation -> q
    int retryCount -> r
    com.adhoc.pic.Picasso$Priority priority -> s
    void <init>(com.adhoc.pic.Picasso,com.adhoc.pic.Dispatcher,com.adhoc.pic.Cache,com.adhoc.pic.Stats,com.adhoc.pic.Action,com.adhoc.pic.RequestHandler) -> <init>
    android.graphics.Bitmap decodeStream(java.io.InputStream,com.adhoc.pic.Request) -> a
    void run() -> run
    android.graphics.Bitmap hunt() -> a
    void attach(com.adhoc.pic.Action) -> a
    void detach(com.adhoc.pic.Action) -> b
    com.adhoc.pic.Picasso$Priority computeNewPriority() -> o
    boolean cancel() -> b
    boolean isCancelled() -> c
    boolean shouldRetry(boolean,android.net.NetworkInfo) -> a
    boolean supportsReplay() -> d
    android.graphics.Bitmap getResult() -> e
    java.lang.String getKey() -> f
    int getMemoryPolicy() -> g
    com.adhoc.pic.Request getData() -> h
    com.adhoc.pic.Action getAction() -> i
    com.adhoc.pic.Picasso getPicasso() -> j
    java.util.List getActions() -> k
    java.lang.Exception getException() -> l
    com.adhoc.pic.Picasso$LoadedFrom getLoadedFrom() -> m
    com.adhoc.pic.Picasso$Priority getPriority() -> n
    void updateThreadName(com.adhoc.pic.Request) -> a
    com.adhoc.pic.BitmapHunter forRequest(com.adhoc.pic.Picasso,com.adhoc.pic.Dispatcher,com.adhoc.pic.Cache,com.adhoc.pic.Stats,com.adhoc.pic.Action) -> a
    android.graphics.Bitmap applyCustomTransformations(java.util.List,android.graphics.Bitmap) -> a
    android.graphics.Bitmap transformResult(com.adhoc.pic.Request,android.graphics.Bitmap,int) -> a
    boolean shouldResize(boolean,int,int,int,int) -> a
    int getExifRotation(int) -> a
    int getExifTranslation(int) -> b
    void <clinit>() -> <clinit>
com.adhoc.pic.BitmapHunter$1 -> com.adhoc.qe:
    void <init>() -> <init>
    java.lang.StringBuilder initialValue() -> a
    java.lang.Object initialValue() -> initialValue
com.adhoc.pic.BitmapHunter$2 -> com.adhoc.qf:
    void <init>() -> <init>
    boolean canHandleRequest(com.adhoc.pic.Request) -> a
    com.adhoc.pic.RequestHandler$Result load(com.adhoc.pic.Request,int) -> a
com.adhoc.pic.BitmapHunter$3 -> com.adhoc.qg:
    com.adhoc.pic.Transformation val$transformation -> a
    java.lang.RuntimeException val$e -> b
    void <init>(com.adhoc.pic.Transformation,java.lang.RuntimeException) -> <init>
    void run() -> run
com.adhoc.pic.BitmapHunter$4 -> com.adhoc.qh:
    java.lang.StringBuilder val$builder -> a
    void <init>(java.lang.StringBuilder) -> <init>
    void run() -> run
com.adhoc.pic.BitmapHunter$5 -> com.adhoc.qi:
    com.adhoc.pic.Transformation val$transformation -> a
    void <init>(com.adhoc.pic.Transformation) -> <init>
    void run() -> run
com.adhoc.pic.BitmapHunter$6 -> com.adhoc.qj:
    com.adhoc.pic.Transformation val$transformation -> a
    void <init>(com.adhoc.pic.Transformation) -> <init>
    void run() -> run
com.adhoc.pic.Cache -> com.adhoc.qk:
    com.adhoc.pic.Cache NONE -> a
    android.graphics.Bitmap get(java.lang.String) -> a
    void set(java.lang.String,android.graphics.Bitmap) -> a
    int size() -> a
    int maxSize() -> b
    void <clinit>() -> <clinit>
com.adhoc.pic.Cache$1 -> com.adhoc.ql:
    void <init>() -> <init>
    android.graphics.Bitmap get(java.lang.String) -> a
    void set(java.lang.String,android.graphics.Bitmap) -> a
    int size() -> a
    int maxSize() -> b
com.adhoc.pic.Callback -> com.adhoc.qm:
    void onSuccess() -> a
    void onError() -> b
com.adhoc.pic.ContactsPhotoRequestHandler -> com.adhoc.qn:
    android.content.UriMatcher matcher -> a
    android.content.Context context -> b
    void <init>(android.content.Context) -> <init>
    boolean canHandleRequest(com.adhoc.pic.Request) -> a
    com.adhoc.pic.RequestHandler$Result load(com.adhoc.pic.Request,int) -> a
    java.io.InputStream getInputStream(com.adhoc.pic.Request) -> b
    void <clinit>() -> <clinit>
com.adhoc.pic.ContactsPhotoRequestHandler$ContactPhotoStreamIcs -> com.adhoc.qo:
    java.io.InputStream get(android.content.ContentResolver,android.net.Uri) -> a
com.adhoc.pic.ContentStreamRequestHandler -> com.adhoc.qp:
    android.content.Context context -> a
    void <init>(android.content.Context) -> <init>
    boolean canHandleRequest(com.adhoc.pic.Request) -> a
    com.adhoc.pic.RequestHandler$Result load(com.adhoc.pic.Request,int) -> a
    java.io.InputStream getInputStream(com.adhoc.pic.Request) -> b
com.adhoc.pic.DeferredRequestCreator -> com.adhoc.qq:
    com.adhoc.pic.RequestCreator creator -> a
    java.lang.ref.WeakReference target -> b
    com.adhoc.pic.Callback callback -> c
    void <init>(com.adhoc.pic.RequestCreator,android.widget.ImageView,com.adhoc.pic.Callback) -> <init>
    boolean onPreDraw() -> onPreDraw
    void cancel() -> a
com.adhoc.pic.Dispatcher -> com.adhoc.qr:
    com.adhoc.pic.Dispatcher$DispatcherThread dispatcherThread -> a
    android.content.Context context -> b
    java.util.concurrent.ExecutorService service -> c
    com.adhoc.pic.Downloader downloader -> d
    java.util.Map hunterMap -> e
    java.util.Map failedActions -> f
    java.util.Map pausedActions -> g
    java.util.Set pausedTags -> h
    android.os.Handler handler -> i
    android.os.Handler mainThreadHandler -> j
    com.adhoc.pic.Cache cache -> k
    com.adhoc.pic.Stats stats -> l
    java.util.List batch -> m
    com.adhoc.pic.Dispatcher$NetworkBroadcastReceiver receiver -> n
    boolean scansNetworkChanges -> o
    boolean airplaneMode -> p
    void <init>(android.content.Context,java.util.concurrent.ExecutorService,android.os.Handler,com.adhoc.pic.Downloader,com.adhoc.pic.Cache,com.adhoc.pic.Stats) -> <init>
    void dispatchSubmit(com.adhoc.pic.Action) -> a
    void dispatchCancel(com.adhoc.pic.Action) -> b
    void dispatchComplete(com.adhoc.pic.BitmapHunter) -> a
    void dispatchRetry(com.adhoc.pic.BitmapHunter) -> b
    void dispatchFailed(com.adhoc.pic.BitmapHunter) -> c
    void dispatchNetworkStateChange(android.net.NetworkInfo) -> a
    void dispatchAirplaneModeChange(boolean) -> a
    void performSubmit(com.adhoc.pic.Action) -> c
    void performSubmit(com.adhoc.pic.Action,boolean) -> a
    void performCancel(com.adhoc.pic.Action) -> d
    void performPauseTag(java.lang.Object) -> a
    void performResumeTag(java.lang.Object) -> b
    void performRetry(com.adhoc.pic.BitmapHunter) -> d
    void performComplete(com.adhoc.pic.BitmapHunter) -> e
    void performBatchComplete() -> a
    void performError(com.adhoc.pic.BitmapHunter,boolean) -> a
    void performAirplaneModeChange(boolean) -> b
    void performNetworkStateChange(android.net.NetworkInfo) -> b
    void flushFailedActions() -> b
    void markForReplay(com.adhoc.pic.BitmapHunter) -> f
    void markForReplay(com.adhoc.pic.Action) -> e
    void batch(com.adhoc.pic.BitmapHunter) -> g
    void logBatch(java.util.List) -> a
com.adhoc.pic.Dispatcher$DispatcherHandler -> com.adhoc.qs:
    com.adhoc.pic.Dispatcher dispatcher -> a
    void <init>(android.os.Looper,com.adhoc.pic.Dispatcher) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
com.adhoc.pic.Dispatcher$DispatcherHandler$1 -> com.adhoc.qt:
    android.os.Message val$msg -> a
    com.adhoc.pic.Dispatcher$DispatcherHandler this$0 -> b
    void <init>(com.adhoc.pic.Dispatcher$DispatcherHandler,android.os.Message) -> <init>
    void run() -> run
com.adhoc.pic.Dispatcher$DispatcherThread -> com.adhoc.qu:
    void <init>() -> <init>
com.adhoc.pic.Dispatcher$NetworkBroadcastReceiver -> com.adhoc.qv:
    com.adhoc.pic.Dispatcher dispatcher -> a
    void <init>(com.adhoc.pic.Dispatcher) -> <init>
    void register() -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.adhoc.pic.Downloader -> com.adhoc.qw:
    com.adhoc.pic.Downloader$Response load(android.net.Uri,int) -> a
com.adhoc.pic.Downloader$Response -> com.adhoc.qx:
    java.io.InputStream stream -> a
    android.graphics.Bitmap bitmap -> b
    boolean cached -> c
    long contentLength -> d
    void <init>(java.io.InputStream,boolean,long) -> <init>
    java.io.InputStream getInputStream() -> a
    android.graphics.Bitmap getBitmap() -> b
    long getContentLength() -> c
com.adhoc.pic.Downloader$ResponseException -> com.adhoc.qy:
    boolean localCacheOnly -> a
    int responseCode -> b
    void <init>(java.lang.String,int,int) -> <init>
com.adhoc.pic.FileRequestHandler -> com.adhoc.qz:
    void <init>(android.content.Context) -> <init>
    boolean canHandleRequest(com.adhoc.pic.Request) -> a
    com.adhoc.pic.RequestHandler$Result load(com.adhoc.pic.Request,int) -> a
    int getFileExifRotation(android.net.Uri) -> a
com.adhoc.pic.ImageViewAction -> com.adhoc.ra:
    com.adhoc.pic.Callback callback -> m
    void <init>(com.adhoc.pic.Picasso,android.widget.ImageView,com.adhoc.pic.Request,int,int,int,android.graphics.drawable.Drawable,java.lang.String,java.lang.Object,com.adhoc.pic.Callback,boolean) -> <init>
    void complete(android.graphics.Bitmap,com.adhoc.pic.Picasso$LoadedFrom) -> a
    void error() -> a
    void cancel() -> b
com.adhoc.pic.LruCache -> com.adhoc.rb:
    java.util.LinkedHashMap map -> b
    int maxSize -> c
    int size -> d
    int putCount -> e
    int evictionCount -> f
    int hitCount -> g
    int missCount -> h
    void <init>(android.content.Context) -> <init>
    void <init>(int) -> <init>
    android.graphics.Bitmap get(java.lang.String) -> a
    void set(java.lang.String,android.graphics.Bitmap) -> a
    void trimToSize(int) -> a
    int size() -> a
    int maxSize() -> b
com.adhoc.pic.MarkableInputStream -> com.adhoc.rc:
    java.io.InputStream in -> a
    long offset -> b
    long reset -> c
    long limit -> d
    long defaultMark -> e
    void <init>(java.io.InputStream) -> <init>
    void <init>(java.io.InputStream,int) -> <init>
    void mark(int) -> mark
    long savePosition(int) -> a
    void setLimit(long) -> b
    void reset() -> reset
    void reset(long) -> a
    void skip(long,long) -> a
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    long skip(long) -> skip
    int available() -> available
    void close() -> close
    boolean markSupported() -> markSupported
com.adhoc.pic.MediaStoreRequestHandler -> com.adhoc.rd:
    java.lang.String[] CONTENT_ORIENTATION -> b
    void <init>(android.content.Context) -> <init>
    boolean canHandleRequest(com.adhoc.pic.Request) -> a
    com.adhoc.pic.RequestHandler$Result load(com.adhoc.pic.Request,int) -> a
    com.adhoc.pic.MediaStoreRequestHandler$PicassoKind getPicassoKind(int,int) -> a
    int getExifOrientation(android.content.ContentResolver,android.net.Uri) -> a
    void <clinit>() -> <clinit>
com.adhoc.pic.MediaStoreRequestHandler$PicassoKind -> com.adhoc.re:
    com.adhoc.pic.MediaStoreRequestHandler$PicassoKind MICRO -> a
    com.adhoc.pic.MediaStoreRequestHandler$PicassoKind MINI -> b
    com.adhoc.pic.MediaStoreRequestHandler$PicassoKind FULL -> c
    int androidKind -> d
    int width -> e
    int height -> f
    com.adhoc.pic.MediaStoreRequestHandler$PicassoKind[] $VALUES -> g
    com.adhoc.pic.MediaStoreRequestHandler$PicassoKind[] values() -> values
    com.adhoc.pic.MediaStoreRequestHandler$PicassoKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,int,int) -> <init>
    void <clinit>() -> <clinit>
com.adhoc.pic.MemoryPolicy -> com.adhoc.rf:
    com.adhoc.pic.MemoryPolicy NO_CACHE -> a
    com.adhoc.pic.MemoryPolicy NO_STORE -> b
    int index -> c
    com.adhoc.pic.MemoryPolicy[] $VALUES -> d
    com.adhoc.pic.MemoryPolicy[] values() -> values
    com.adhoc.pic.MemoryPolicy valueOf(java.lang.String) -> valueOf
    boolean shouldReadFromMemoryCache(int) -> a
    boolean shouldWriteToMemoryCache(int) -> b
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
com.adhoc.pic.NetworkPolicy -> com.adhoc.rg:
    com.adhoc.pic.NetworkPolicy NO_CACHE -> a
    com.adhoc.pic.NetworkPolicy NO_STORE -> b
    com.adhoc.pic.NetworkPolicy OFFLINE -> c
    int index -> d
    com.adhoc.pic.NetworkPolicy[] $VALUES -> e
    com.adhoc.pic.NetworkPolicy[] values() -> values
    com.adhoc.pic.NetworkPolicy valueOf(java.lang.String) -> valueOf
    boolean shouldReadFromDiskCache(int) -> a
    boolean shouldWriteToDiskCache(int) -> b
    boolean isOfflineOnly(int) -> c
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
com.adhoc.pic.NetworkRequestHandler -> com.adhoc.rh:
    com.adhoc.pic.Downloader downloader -> a
    com.adhoc.pic.Stats stats -> b
    void <init>(com.adhoc.pic.Downloader,com.adhoc.pic.Stats) -> <init>
    boolean canHandleRequest(com.adhoc.pic.Request) -> a
    com.adhoc.pic.RequestHandler$Result load(com.adhoc.pic.Request,int) -> a
    int getRetryCount() -> a
    boolean shouldRetry(boolean,android.net.NetworkInfo) -> a
    boolean supportsReplay() -> b
com.adhoc.pic.NetworkRequestHandler$ContentLengthException -> com.adhoc.ri:
    void <init>(java.lang.String) -> <init>
com.adhoc.pic.OkHttpDownloader -> com.adhoc.rj:
    com.adhoc.http.OkHttpClient client -> a
    com.adhoc.http.OkHttpClient defaultOkHttpClient() -> a
    void <init>(android.content.Context) -> <init>
    void <init>(java.io.File) -> <init>
    void <init>(java.io.File,long) -> <init>
    void <init>(com.adhoc.http.OkHttpClient) -> <init>
    com.adhoc.pic.Downloader$Response load(android.net.Uri,int) -> a
com.adhoc.pic.Picasso -> com.adhoc.rk:
    android.os.Handler HANDLER -> a
    com.adhoc.pic.Picasso singleton -> b
    com.adhoc.pic.Picasso$Listener listener -> n
    com.adhoc.pic.Picasso$RequestTransformer requestTransformer -> o
    com.adhoc.pic.Picasso$CleanupThread cleanupThread -> p
    java.util.List requestHandlers -> q
    android.content.Context context -> c
    com.adhoc.pic.Dispatcher dispatcher -> d
    com.adhoc.pic.Cache cache -> e
    com.adhoc.pic.Stats stats -> f
    java.util.Map targetToAction -> g
    java.util.Map targetToDeferredRequestCreator -> h
    java.lang.ref.ReferenceQueue referenceQueue -> i
    android.graphics.Bitmap$Config defaultBitmapConfig -> j
    boolean indicatorsEnabled -> k
    boolean loggingEnabled -> l
    boolean shutdown -> m
    void <init>(android.content.Context,com.adhoc.pic.Dispatcher,com.adhoc.pic.Cache,com.adhoc.pic.Picasso$Listener,com.adhoc.pic.Picasso$RequestTransformer,java.util.List,com.adhoc.pic.Stats,android.graphics.Bitmap$Config,boolean,boolean) -> <init>
    void cancelRequest(android.widget.ImageView) -> a
    void cancelRequest(com.adhoc.pic.Target) -> a
    com.adhoc.pic.RequestCreator load(android.net.Uri) -> a
    com.adhoc.pic.RequestCreator load(java.lang.String) -> a
    java.util.List getRequestHandlers() -> a
    com.adhoc.pic.Request transformRequest(com.adhoc.pic.Request) -> a
    void defer(android.widget.ImageView,com.adhoc.pic.DeferredRequestCreator) -> a
    void enqueueAndSubmit(com.adhoc.pic.Action) -> a
    void submit(com.adhoc.pic.Action) -> b
    android.graphics.Bitmap quickMemoryCacheCheck(java.lang.String) -> b
    void complete(com.adhoc.pic.BitmapHunter) -> a
    void resumeAction(com.adhoc.pic.Action) -> c
    void deliverAction(android.graphics.Bitmap,com.adhoc.pic.Picasso$LoadedFrom,com.adhoc.pic.Action) -> a
    void cancelExistingRequest(java.lang.Object) -> a
    com.adhoc.pic.Picasso with(android.content.Context) -> a
    void access$000(com.adhoc.pic.Picasso,java.lang.Object) -> a
    void <clinit>() -> <clinit>
com.adhoc.pic.Picasso$1 -> com.adhoc.rl:
    void <init>(android.os.Looper) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
com.adhoc.pic.Picasso$Builder -> com.adhoc.rm:
    android.content.Context context -> a
    com.adhoc.pic.Downloader downloader -> b
    java.util.concurrent.ExecutorService service -> c
    com.adhoc.pic.Cache cache -> d
    com.adhoc.pic.Picasso$Listener listener -> e
    com.adhoc.pic.Picasso$RequestTransformer transformer -> f
    java.util.List requestHandlers -> g
    android.graphics.Bitmap$Config defaultBitmapConfig -> h
    boolean indicatorsEnabled -> i
    boolean loggingEnabled -> j
    void <init>(android.content.Context) -> <init>
    com.adhoc.pic.Picasso build() -> a
com.adhoc.pic.Picasso$CleanupThread -> com.adhoc.rn:
    java.lang.ref.ReferenceQueue referenceQueue -> a
    android.os.Handler handler -> b
    void <init>(java.lang.ref.ReferenceQueue,android.os.Handler) -> <init>
    void run() -> run
com.adhoc.pic.Picasso$CleanupThread$1 -> com.adhoc.ro:
    java.lang.Exception val$e -> a
    com.adhoc.pic.Picasso$CleanupThread this$0 -> b
    void <init>(com.adhoc.pic.Picasso$CleanupThread,java.lang.Exception) -> <init>
    void run() -> run
com.adhoc.pic.Picasso$Listener -> com.adhoc.rp:
    void onImageLoadFailed(com.adhoc.pic.Picasso,android.net.Uri,java.lang.Exception) -> a
com.adhoc.pic.Picasso$LoadedFrom -> com.adhoc.rq:
    com.adhoc.pic.Picasso$LoadedFrom MEMORY -> a
    com.adhoc.pic.Picasso$LoadedFrom DISK -> b
    com.adhoc.pic.Picasso$LoadedFrom NETWORK -> c
    int debugColor -> d
    com.adhoc.pic.Picasso$LoadedFrom[] $VALUES -> e
    com.adhoc.pic.Picasso$LoadedFrom[] values() -> values
    com.adhoc.pic.Picasso$LoadedFrom valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
com.adhoc.pic.Picasso$Priority -> com.adhoc.rr:
    com.adhoc.pic.Picasso$Priority LOW -> a
    com.adhoc.pic.Picasso$Priority NORMAL -> b
    com.adhoc.pic.Picasso$Priority HIGH -> c
    com.adhoc.pic.Picasso$Priority[] $VALUES -> d
    com.adhoc.pic.Picasso$Priority[] values() -> values
    com.adhoc.pic.Picasso$Priority valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.adhoc.pic.Picasso$RequestTransformer -> com.adhoc.rs:
    com.adhoc.pic.Picasso$RequestTransformer IDENTITY -> a
    com.adhoc.pic.Request transformRequest(com.adhoc.pic.Request) -> a
    void <clinit>() -> <clinit>
com.adhoc.pic.Picasso$RequestTransformer$1 -> com.adhoc.rt:
    void <init>() -> <init>
    com.adhoc.pic.Request transformRequest(com.adhoc.pic.Request) -> a
com.adhoc.pic.PicassoDrawable -> com.adhoc.ru:
    android.graphics.Paint DEBUG_PAINT -> e
    boolean debugging -> f
    float density -> g
    com.adhoc.pic.Picasso$LoadedFrom loadedFrom -> h
    android.graphics.drawable.Drawable placeholder -> a
    long startTimeMillis -> b
    boolean animating -> c
    int alpha -> d
    void setBitmap(android.widget.ImageView,android.content.Context,android.graphics.Bitmap,com.adhoc.pic.Picasso$LoadedFrom,boolean,boolean) -> a
    void setPlaceholder(android.widget.ImageView,android.graphics.drawable.Drawable) -> a
    void <init>(android.content.Context,android.graphics.Bitmap,android.graphics.drawable.Drawable,com.adhoc.pic.Picasso$LoadedFrom,boolean,boolean) -> <init>
    void draw(android.graphics.Canvas) -> draw
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    void drawDebugIndicator(android.graphics.Canvas) -> a
    android.graphics.Path getTrianglePath(android.graphics.Point,int) -> a
    void <clinit>() -> <clinit>
com.adhoc.pic.PicassoExecutorService -> com.adhoc.rv:
    void <init>() -> <init>
    void adjustThreadCount(android.net.NetworkInfo) -> a
    void setThreadCount(int) -> a
    java.util.concurrent.Future submit(java.lang.Runnable) -> submit
com.adhoc.pic.PicassoExecutorService$PicassoFutureTask -> com.adhoc.rw:
    com.adhoc.pic.BitmapHunter hunter -> a
    void <init>(com.adhoc.pic.BitmapHunter) -> <init>
    int compareTo(com.adhoc.pic.PicassoExecutorService$PicassoFutureTask) -> a
    int compareTo(java.lang.Object) -> compareTo
com.adhoc.pic.Request -> com.adhoc.rx:
    long TOO_LONG_LOG -> t
    int id -> a
    long started -> b
    int networkPolicy -> c
    android.net.Uri uri -> d
    int resourceId -> e
    java.lang.String stableKey -> f
    java.util.List transformations -> g
    int targetWidth -> h
    int targetHeight -> i
    boolean centerCrop -> j
    boolean centerInside -> k
    boolean onlyScaleDown -> l
    float rotationDegrees -> m
    float rotationPivotX -> n
    float rotationPivotY -> o
    boolean hasRotationPivot -> p
    boolean purgeable -> q
    android.graphics.Bitmap$Config config -> r
    com.adhoc.pic.Picasso$Priority priority -> s
    void <init>(android.net.Uri,int,java.lang.String,java.util.List,int,int,boolean,boolean,boolean,float,float,float,boolean,boolean,android.graphics.Bitmap$Config,com.adhoc.pic.Picasso$Priority) -> <init>
    java.lang.String toString() -> toString
    java.lang.String logId() -> a
    java.lang.String plainId() -> b
    java.lang.String getName() -> c
    boolean hasSize() -> d
    boolean needsTransformation() -> e
    boolean needsMatrixTransform() -> f
    boolean hasCustomTransformations() -> g
    void <init>(android.net.Uri,int,java.lang.String,java.util.List,int,int,boolean,boolean,boolean,float,float,float,boolean,boolean,android.graphics.Bitmap$Config,com.adhoc.pic.Picasso$Priority,com.adhoc.pic.Request$1) -> <init>
    void <clinit>() -> <clinit>
com.adhoc.pic.Request$1 -> com.adhoc.ry:
com.adhoc.pic.Request$Builder -> com.adhoc.rz:
    android.net.Uri uri -> a
    int resourceId -> b
    java.lang.String stableKey -> c
    int targetWidth -> d
    int targetHeight -> e
    boolean centerCrop -> f
    boolean centerInside -> g
    boolean onlyScaleDown -> h
    float rotationDegrees -> i
    float rotationPivotX -> j
    float rotationPivotY -> k
    boolean hasRotationPivot -> l
    boolean purgeable -> m
    java.util.List transformations -> n
    android.graphics.Bitmap$Config config -> o
    com.adhoc.pic.Picasso$Priority priority -> p
    void <init>(android.net.Uri,int,android.graphics.Bitmap$Config) -> <init>
    boolean hasImage() -> a
    boolean hasSize() -> b
    com.adhoc.pic.Request$Builder resize(int,int) -> a
    com.adhoc.pic.Request build() -> c
com.adhoc.pic.RequestCreator -> com.adhoc.sa:
    java.util.concurrent.atomic.AtomicInteger nextId -> a
    com.adhoc.pic.Picasso picasso -> b
    com.adhoc.pic.Request$Builder data -> c
    boolean noFade -> d
    boolean deferred -> e
    boolean setPlaceholder -> f
    int placeholderResId -> g
    int errorResId -> h
    int memoryPolicy -> i
    int networkPolicy -> j
    android.graphics.drawable.Drawable placeholderDrawable -> k
    android.graphics.drawable.Drawable errorDrawable -> l
    java.lang.Object tag -> m
    void <init>(com.adhoc.pic.Picasso,android.net.Uri,int) -> <init>
    com.adhoc.pic.RequestCreator unfit() -> a
    com.adhoc.pic.RequestCreator clearTag() -> b
    com.adhoc.pic.RequestCreator resize(int,int) -> a
    void into(com.adhoc.pic.Target) -> a
    void into(android.widget.ImageView) -> a
    void into(android.widget.ImageView,com.adhoc.pic.Callback) -> a
    android.graphics.drawable.Drawable getPlaceholderDrawable() -> c
    com.adhoc.pic.Request createRequest(long) -> a
    void <clinit>() -> <clinit>
com.adhoc.pic.RequestHandler -> com.adhoc.sb:
    void <init>() -> <init>
    boolean canHandleRequest(com.adhoc.pic.Request) -> a
    com.adhoc.pic.RequestHandler$Result load(com.adhoc.pic.Request,int) -> a
    int getRetryCount() -> a
    boolean shouldRetry(boolean,android.net.NetworkInfo) -> a
    boolean supportsReplay() -> b
    android.graphics.BitmapFactory$Options createBitmapOptions(com.adhoc.pic.Request) -> c
    boolean requiresInSampleSize(android.graphics.BitmapFactory$Options) -> a
    void calculateInSampleSize(int,int,android.graphics.BitmapFactory$Options,com.adhoc.pic.Request) -> a
    void calculateInSampleSize(int,int,int,int,android.graphics.BitmapFactory$Options,com.adhoc.pic.Request) -> a
com.adhoc.pic.RequestHandler$Result -> com.adhoc.sc:
    com.adhoc.pic.Picasso$LoadedFrom loadedFrom -> a
    android.graphics.Bitmap bitmap -> b
    java.io.InputStream stream -> c
    int exifOrientation -> d
    void <init>(android.graphics.Bitmap,com.adhoc.pic.Picasso$LoadedFrom) -> <init>
    void <init>(java.io.InputStream,com.adhoc.pic.Picasso$LoadedFrom) -> <init>
    void <init>(android.graphics.Bitmap,java.io.InputStream,com.adhoc.pic.Picasso$LoadedFrom,int) -> <init>
    android.graphics.Bitmap getBitmap() -> a
    java.io.InputStream getStream() -> b
    com.adhoc.pic.Picasso$LoadedFrom getLoadedFrom() -> c
    int getExifOrientation() -> d
com.adhoc.pic.ResourceRequestHandler -> com.adhoc.sd:
    android.content.Context context -> a
    void <init>(android.content.Context) -> <init>
    boolean canHandleRequest(com.adhoc.pic.Request) -> a
    com.adhoc.pic.RequestHandler$Result load(com.adhoc.pic.Request,int) -> a
    android.graphics.Bitmap decodeResource(android.content.res.Resources,int,com.adhoc.pic.Request) -> a
com.adhoc.pic.Stats -> com.adhoc.se:
    android.os.HandlerThread statsThread -> a
    com.adhoc.pic.Cache cache -> b
    android.os.Handler handler -> c
    long cacheHits -> d
    long cacheMisses -> e
    long totalDownloadSize -> f
    long totalOriginalBitmapSize -> g
    long totalTransformedBitmapSize -> h
    long averageDownloadSize -> i
    long averageOriginalBitmapSize -> j
    long averageTransformedBitmapSize -> k
    int downloadCount -> l
    int originalBitmapCount -> m
    int transformedBitmapCount -> n
    void <init>(com.adhoc.pic.Cache) -> <init>
    void dispatchBitmapDecoded(android.graphics.Bitmap) -> a
    void dispatchBitmapTransformed(android.graphics.Bitmap) -> b
    void dispatchDownloadFinished(long) -> a
    void dispatchCacheHit() -> a
    void dispatchCacheMiss() -> b
    void performCacheHit() -> c
    void performCacheMiss() -> d
    void performDownloadFinished(java.lang.Long) -> a
    void performBitmapDecoded(long) -> b
    void performBitmapTransformed(long) -> c
    com.adhoc.pic.StatsSnapshot createSnapshot() -> e
    void processBitmap(android.graphics.Bitmap,int) -> a
    long getAverage(int,long) -> a
com.adhoc.pic.Stats$StatsHandler -> com.adhoc.sf:
    com.adhoc.pic.Stats stats -> a
    void <init>(android.os.Looper,com.adhoc.pic.Stats) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
com.adhoc.pic.Stats$StatsHandler$1 -> com.adhoc.sg:
    android.os.Message val$msg -> a
    com.adhoc.pic.Stats$StatsHandler this$0 -> b
    void <init>(com.adhoc.pic.Stats$StatsHandler,android.os.Message) -> <init>
    void run() -> run
com.adhoc.pic.StatsSnapshot -> com.adhoc.sh:
    int maxSize -> a
    int size -> b
    long cacheHits -> c
    long cacheMisses -> d
    long totalDownloadSize -> e
    long totalOriginalBitmapSize -> f
    long totalTransformedBitmapSize -> g
    long averageDownloadSize -> h
    long averageOriginalBitmapSize -> i
    long averageTransformedBitmapSize -> j
    int downloadCount -> k
    int originalBitmapCount -> l
    int transformedBitmapCount -> m
    long timeStamp -> n
    void <init>(int,int,long,long,long,long,long,long,long,long,int,int,int,long) -> <init>
    void dump(java.io.PrintWriter) -> a
    java.lang.String toString() -> toString
com.adhoc.pic.Target -> com.adhoc.si:
    void onBitmapLoaded(android.graphics.Bitmap,com.adhoc.pic.Picasso$LoadedFrom) -> a
    void onBitmapFailed(android.graphics.drawable.Drawable) -> a
    void onPrepareLoad(android.graphics.drawable.Drawable) -> b
com.adhoc.pic.TargetAction -> com.adhoc.sj:
    void <init>(com.adhoc.pic.Picasso,com.adhoc.pic.Target,com.adhoc.pic.Request,int,int,android.graphics.drawable.Drawable,java.lang.String,java.lang.Object,int) -> <init>
    void complete(android.graphics.Bitmap,com.adhoc.pic.Picasso$LoadedFrom) -> a
    void error() -> a
com.adhoc.pic.Transformation -> com.adhoc.sk:
    android.graphics.Bitmap transform(android.graphics.Bitmap) -> a
    java.lang.String key() -> a
com.adhoc.pic.UrlConnectionDownloader -> com.adhoc.sl:
    java.lang.Object cache -> a
    java.lang.Object lock -> b
    java.lang.ThreadLocal CACHE_HEADER_BUILDER -> c
    android.content.Context context -> d
    void <init>(android.content.Context) -> <init>
    java.net.HttpURLConnection openConnection(android.net.Uri) -> a
    com.adhoc.pic.Downloader$Response load(android.net.Uri,int) -> a
    void installCacheIfNeeded(android.content.Context) -> a
    void <clinit>() -> <clinit>
com.adhoc.pic.UrlConnectionDownloader$1 -> com.adhoc.sm:
    void <init>() -> <init>
    java.lang.StringBuilder initialValue() -> a
    java.lang.Object initialValue() -> initialValue
com.adhoc.pic.UrlConnectionDownloader$ResponseCacheIcs -> com.adhoc.sn:
    java.lang.Object install(android.content.Context) -> a
com.adhoc.pic.Utils -> com.adhoc.so:
    java.lang.StringBuilder MAIN_THREAD_KEY_BUILDER -> a
    int getBitmapBytes(android.graphics.Bitmap) -> a
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String) -> a
    void checkMain() -> a
    boolean isMain() -> b
    java.lang.String getLogIdsForHunter(com.adhoc.pic.BitmapHunter) -> a
    java.lang.String getLogIdsForHunter(com.adhoc.pic.BitmapHunter,java.lang.String) -> a
    void log(java.lang.String,java.lang.String,java.lang.String) -> a
    void log(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String createKey(com.adhoc.pic.Request) -> a
    java.lang.String createKey(com.adhoc.pic.Request,java.lang.StringBuilder) -> a
    void closeQuietly(java.io.InputStream) -> a
    boolean parseResponseSourceHeader(java.lang.String) -> a
    com.adhoc.pic.Downloader createDefaultDownloader(android.content.Context) -> a
    java.io.File createDefaultCacheDir(android.content.Context) -> b
    long calculateDiskCacheSize(java.io.File) -> a
    int calculateMemoryCacheSize(android.content.Context) -> c
    boolean isAirplaneModeOn(android.content.Context) -> d
    java.lang.Object getService(android.content.Context,java.lang.String) -> a
    boolean hasPermission(android.content.Context,java.lang.String) -> b
    byte[] toByteArray(java.io.InputStream) -> b
    boolean isWebPFile(java.io.InputStream) -> c
    int getResourceId(android.content.res.Resources,com.adhoc.pic.Request) -> a
    android.content.res.Resources getResources(android.content.Context,com.adhoc.pic.Request) -> a
    void flushStackLocalLeaks(android.os.Looper) -> a
    void <clinit>() -> <clinit>
com.adhoc.pic.Utils$1 -> com.adhoc.sp:
    void <init>(android.os.Looper) -> <init>
    void handleMessage(android.os.Message) -> handleMessage
com.adhoc.pic.Utils$ActivityManagerHoneycomb -> com.adhoc.sq:
    int getLargeMemoryClass(android.app.ActivityManager) -> a
com.adhoc.pic.Utils$BitmapHoneycombMR1 -> com.adhoc.sr:
    int getByteCount(android.graphics.Bitmap) -> a
com.adhoc.pic.Utils$OkHttpLoaderCreator -> com.adhoc.ss:
    com.adhoc.pic.Downloader create(android.content.Context) -> a
com.adhoc.pic.Utils$PicassoThread -> com.adhoc.st:
    void <init>(java.lang.Runnable) -> <init>
    void run() -> run
com.adhoc.pic.Utils$PicassoThreadFactory -> com.adhoc.su:
    void <init>() -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.adhoc.property.Properties -> com.adhoc.sv:
    com.adhoc.property.Properties background -> a
    com.adhoc.property.Properties alpha -> b
    com.adhoc.property.Properties visibilily -> c
    com.adhoc.property.Properties top -> d
    com.adhoc.property.Properties bottom -> e
    com.adhoc.property.Properties left -> f
    com.adhoc.property.Properties right -> g
    com.adhoc.property.Properties padding -> h
    com.adhoc.property.Properties gravity -> i
    com.adhoc.property.Properties visibility -> j
    com.adhoc.property.Properties text -> k
    com.adhoc.property.Properties text_color -> l
    com.adhoc.property.Properties text_size -> m
    com.adhoc.property.Properties text_style -> n
    com.adhoc.property.Properties ellipsize -> o
    com.adhoc.property.Properties maxlines -> p
    com.adhoc.property.Properties width -> q
    com.adhoc.property.Properties height -> r
    com.adhoc.property.Properties text_gravity -> s
    com.adhoc.property.Properties image -> t
    com.adhoc.property.Properties orientation -> u
    com.adhoc.property.Properties hint -> v
    com.adhoc.property.Properties numpicker_max -> w
    com.adhoc.property.Properties numpicker_min -> x
    com.adhoc.property.Properties checked -> y
    com.adhoc.property.Properties indeterminate -> z
    com.adhoc.property.Properties progress -> A
    com.adhoc.property.Properties progress_max -> B
    com.adhoc.property.Properties numberstars -> C
    com.adhoc.property.Properties rating -> D
    com.adhoc.property.Properties stepsize -> E
    com.adhoc.property.Properties[] $VALUES -> F
    com.adhoc.property.Properties[] values() -> values
    com.adhoc.property.Properties valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.adhoc.property.Types -> com.adhoc.sw:
    com.adhoc.property.Types text -> a
    com.adhoc.property.Types integer -> b
    com.adhoc.property.Types floattp -> c
    com.adhoc.property.Types image -> d
    com.adhoc.property.Types color -> e
    com.adhoc.property.Types none_bg -> f
    com.adhoc.property.Types bold -> g
    com.adhoc.property.Types[] $VALUES -> h
    com.adhoc.property.Types[] values() -> values
    com.adhoc.property.Types valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.adhoc.property.ViewToolProperty -> com.adhoc.sx:
    com.adhoc.property.ViewToolProperty instance -> a
    void <init>() -> <init>
    com.adhoc.property.ViewToolProperty getInstance() -> a
    void getJsonView(android.view.View,org.json.JSONObject) -> a
    void getJsonTextView(android.widget.TextView,org.json.JSONObject) -> a
    void getJsonImageView(android.view.View,org.json.JSONObject) -> b
    int[] getLocations(android.view.View) -> a
    void getJsonLinearLayout(android.view.View,org.json.JSONObject) -> c
    void getEditJson(android.view.View,org.json.JSONObject) -> d
    void getViewPagerJson(android.view.View,org.json.JSONObject) -> e
    void getCheckedTextView(android.view.View,org.json.JSONObject) -> f
    void getSpinnerJson(android.view.View,org.json.JSONObject) -> g
    void getJsonProgressBar(android.view.View,org.json.JSONObject) -> h
    void getJsonRatingBar(android.view.View,org.json.JSONObject) -> i
    void getZoomButton(android.view.View,org.json.JSONObject) -> j
    void getRadioGroup(android.view.View,org.json.JSONObject) -> k
    void getCompundButton(android.view.View,org.json.JSONObject) -> l
    void getNumberPicker(android.view.View,org.json.JSONObject) -> m
    void getQuickContractBadge(android.view.View,org.json.JSONObject) -> n
    void getStackView(android.view.View,org.json.JSONObject) -> o
    void getAdapterViewFliper(android.view.View,org.json.JSONObject) -> p
    void getAnalogclock(android.view.View,org.json.JSONObject) -> q
    void getChonometer(android.view.View,org.json.JSONObject) -> r
    void getRadioButton(android.view.View,org.json.JSONObject) -> s
    void getSwitch(android.view.View,org.json.JSONObject) -> t
    void getToggleButton(android.view.View,org.json.JSONObject) -> u
    void getCheckBox(android.view.View,org.json.JSONObject) -> v
    void getSeekBar(android.view.View,org.json.JSONObject) -> w
    void getScrollview(android.view.View,org.json.JSONObject) -> x
    void getDialerFilter(android.view.View,org.json.JSONObject) -> y
    void getTabhost(android.view.View,org.json.JSONObject) -> z
    void getVideoView(android.view.View,org.json.JSONObject) -> A
    void getSurfaceView(android.view.View,org.json.JSONObject) -> B
    void getAbsListView(android.view.View,com.adhoc.adhocsdk.ScrollAbslistview,java.util.ArrayList) -> a
    int getId(java.util.ArrayList,int) -> a
    void <clinit>() -> <clinit>
com.adhoc.utils.T -> com.adhoc.sy:
    java.lang.String AppName -> a
    java.lang.Boolean DEBUG -> b
    void i(java.lang.String) -> a
    void i(java.lang.String,java.lang.String) -> a
    void w(java.lang.String) -> b
    void e(java.lang.Exception) -> a
    void e(java.lang.Throwable) -> a
    void d(java.lang.String) -> c
    void <clinit>() -> <clinit>
com.adhoc.utils.Toaster -> com.adhoc.sz:
    void toast(android.content.Context,java.lang.String) -> a
com.adhoc.utils.Utils -> com.adhoc.ta:
    boolean checkInteger(java.lang.String) -> a
    boolean checkColor(java.lang.String) -> b
    boolean checkBoolean(java.lang.String) -> c
    boolean checkFloat(java.lang.String) -> d
    boolean checkIsTesterDevice(android.content.Context,java.lang.String) -> a
    boolean isCanConnectionNetWork(android.content.Context) -> a
    com.adhoc.utils.Utils$NetWorkState getNetworkInfo(android.content.Context) -> b
    android.content.SharedPreferences getSharePreference(android.content.Context) -> c
    void saveStringShareData(android.content.SharedPreferences,java.lang.String,java.lang.String) -> a
    java.lang.String getStringShareData(android.content.SharedPreferences,java.lang.String) -> a
    java.lang.String getOSVerison() -> a
    int dip2px(android.content.Context,float) -> a
    boolean isAppOnForeground(android.content.Context) -> d
com.adhoc.utils.Utils$NetWorkState -> com.adhoc.tb:
    com.adhoc.utils.Utils$NetWorkState unknow -> a
    com.adhoc.utils.Utils$NetWorkState wifi -> b
    com.adhoc.utils.Utils$NetWorkState mobileType -> c
    com.adhoc.utils.Utils$NetWorkState[] $VALUES -> d
    com.adhoc.utils.Utils$NetWorkState[] values() -> values
    com.adhoc.utils.Utils$NetWorkState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.adhoc.viewtool.ReflectView -> com.adhoc.tc:
    android.view.View$OnClickListener invokeListener(android.content.Context,android.view.View,java.lang.String) -> a
    com.adhoc.adhocsdk.AdhocWindowCallback setAdhocWindowCallback(android.view.Window,android.app.Activity) -> a
    java.lang.Object getPagerView(java.lang.Object,int) -> a
    void invokeListViewOnscrollListener(android.widget.AbsListView,com.adhoc.adhocsdk.ScrollAbslistview) -> a
    int getViewPagerCurrentItemPos(android.view.View) -> a
    void getViewParents(java.lang.Class,java.util.ArrayList) -> a
    android.view.View[] getRootView(android.view.WindowManager) -> a
com.adhoc.viewtool.ReflectView$1 -> com.adhoc.td:
    android.content.Context val$context -> a
    java.lang.String val$key -> b
    android.view.View val$view -> c
    android.view.View$OnClickListener val$finalListener_src -> d
    void <init>(android.content.Context,java.lang.String,android.view.View,android.view.View$OnClickListener) -> <init>
    void onClick(android.view.View) -> onClick
com.adhoc.viewtool.ReflectionUtil -> com.adhoc.te:
    java.lang.reflect.Field getField(java.lang.Class,java.lang.String) -> a
    void makeAccessible(java.lang.reflect.Field) -> a
    java.lang.Object getFieldValue(java.lang.reflect.Field,java.lang.Object) -> a
    void setFieldValue(java.lang.reflect.Field,java.lang.Object,java.lang.Object) -> a
    java.lang.reflect.Field getFieldByClassName(java.lang.Class,java.lang.String,java.lang.String) -> a
    java.lang.reflect.Field getFieldByName(java.lang.Class,java.lang.String,java.lang.String) -> b
    java.lang.reflect.Method getMethodByClassName(java.lang.Class,java.lang.String,java.lang.String) -> c
    java.lang.Class getTargetClazz(java.lang.Class,java.lang.String) -> b
    java.lang.Class getTargetClazzByClassName(java.lang.Class,java.lang.String) -> c
com.adhoc.viewtool.ViewTool -> com.adhoc.tf:
    com.adhoc.viewtool.ViewTool instance -> a
    java.util.ArrayList keylist -> b
    java.util.ArrayList parents -> c
    com.adhoc.viewtool.ViewTool getInstance() -> a
    void <init>() -> <init>
    org.json.JSONObject getViewJson(org.json.JSONObject,int,android.view.View,android.app.Activity) -> a
    int getInvisiableCountViews(int,android.view.View) -> a
    org.json.JSONArray getChildren(android.view.View,android.app.Activity) -> a
    void <clinit>() -> <clinit>
