com.adhoc.adhocsdk.AdhocTracker
com.adhoc.adhocsdk.AdhocTracker: java.lang.String msg
com.adhoc.adhocsdk.AdhocTracker: java.lang.String client_id
com.adhoc.adhocsdk.AdhocTracker: int current_api_level
com.adhoc.adhocsdk.AdhocTracker: java.lang.String APPKEY
com.adhoc.adhocsdk.AdhocTracker: AdhocTracker()
com.adhoc.adhocsdk.AdhocTracker: com.adhoc.adhocsdk.ExperimentFlags getExperimentFlags(android.content.Context)
com.adhoc.adhocsdk.AdhocTracker: com.adhoc.adhocsdk.ExperimentFlags getNullExperimentflag()
com.adhoc.adhocsdk.AdhocTracker: void setCustomStatParameter(android.content.Context,java.util.HashMap)
com.adhoc.adhocsdk.AdhocTracker: void getExperimentFlags(android.content.Context,com.adhoc.adhocsdk.OnAdHocReceivedData)
com.adhoc.adhocsdk.AdhocTracker: void getExperimentFlagsTimeOut(android.content.Context,int)
com.adhoc.adhocsdk.AdhocTracker: void getExperimentFlagsTimeOut(android.content.Context,int,com.adhoc.adhocsdk.OnAdHocReceivedData)
com.adhoc.adhocsdk.AdhocTracker: void incrementStat(android.content.Context,java.lang.String,double)
com.adhoc.adhocsdk.AdhocTracker: void incrementStat(android.content.Context,java.lang.String,int)
com.adhoc.adhocsdk.AdhocTracker: void incrementStat(android.content.Context,java.lang.String,long)
com.adhoc.adhocsdk.AdhocTracker: void incrementStat(android.content.Context,java.lang.String,float)
com.adhoc.adhocsdk.AdhocTracker: void autoTracking(android.content.Context,android.view.MotionEvent)
com.adhoc.adhocsdk.AdhocTracker: void init(android.content.Context,java.lang.String)
com.adhoc.adhocsdk.AdhocTracker: org.json.JSONArray getCurrentExperiments()
com.adhoc.adhocsdk.AdhocTracker: void onFragmentCreate(android.app.Activity,java.lang.Object)
com.adhoc.adhocsdk.AdhocTracker: void onFragmentDestory(android.app.Activity,java.lang.Object)
com.adhoc.adhocsdk.AdhocTracker: void onResume(android.app.Activity)
com.adhoc.adhocsdk.AdhocTracker: void onPause(android.app.Activity)
com.adhoc.adhocsdk.AdhocTracker: void reportCrashEnable(boolean)
com.adhoc.adhocsdk.AdhocTracker: void setOnlyWifiReport(boolean)
com.adhoc.adhocsdk.AdhocTracker: void setGapTimeGetFlag(android.content.Context,int)
com.adhoc.adhocsdk.AdhocTracker: void setGapTimeSendCacheData(long)
com.adhoc.adhocsdk.AdhocTracker: java.lang.String getClientId(android.content.Context)
com.adhoc.adhocsdk.AdhocTracker: void setClientId(java.lang.String,android.content.Context)
com.adhoc.adhocsdk.AdhocTracker: void initWithClientId(android.content.Context,java.lang.String,java.lang.String)
com.adhoc.adhocsdk.AdhocTracker: void <clinit>()
com.adhoc.adhocsdk.EventType: com.adhoc.adhocsdk.EventType[] values()
com.adhoc.adhocsdk.EventType: com.adhoc.adhocsdk.EventType valueOf(java.lang.String)
com.adhoc.adhocsdk.ExperimentFlags
com.adhoc.adhocsdk.ExperimentFlags: org.json.JSONObject mFlags
com.adhoc.adhocsdk.ExperimentFlags: java.lang.String flagState
com.adhoc.adhocsdk.ExperimentFlags: org.json.JSONObject getRawFlags()
com.adhoc.adhocsdk.ExperimentFlags: ExperimentFlags(org.json.JSONObject)
com.adhoc.adhocsdk.ExperimentFlags: boolean has(java.lang.String)
com.adhoc.adhocsdk.ExperimentFlags: boolean getBooleanFlag(java.lang.String,boolean)
com.adhoc.adhocsdk.ExperimentFlags: int getIntegerFlag(java.lang.String,int)
com.adhoc.adhocsdk.ExperimentFlags: double getDoubleFlag(java.lang.String,double)
com.adhoc.adhocsdk.ExperimentFlags: double getFloatFlag(java.lang.String,float)
com.adhoc.adhocsdk.ExperimentFlags: long getLongFlag(java.lang.String,long)
com.adhoc.adhocsdk.ExperimentFlags: java.lang.String getStringFlag(java.lang.String,java.lang.String)
com.adhoc.adhocsdk.ExperimentFlags: java.lang.String getFlagState()
com.adhoc.adhocsdk.ExperimentFlags: void setFlagState(java.lang.String)
com.adhoc.adhocsdk.ExperimentFlags: java.lang.String toString()
com.adhoc.adhocsdk.ExperimentFlags$ExperimentFlagsState: com.adhoc.adhocsdk.ExperimentFlags$ExperimentFlagsState[] values()
com.adhoc.adhocsdk.ExperimentFlags$ExperimentFlagsState: com.adhoc.adhocsdk.ExperimentFlags$ExperimentFlagsState valueOf(java.lang.String)
com.adhoc.adhocsdk.IncrementStat$Type: com.adhoc.adhocsdk.IncrementStat$Type[] values()
com.adhoc.adhocsdk.IncrementStat$Type: com.adhoc.adhocsdk.IncrementStat$Type valueOf(java.lang.String)
com.adhoc.adhocsdk.OnAdHocReceivedData
com.adhoc.adhocsdk.OnAdHocReceivedData: void onReceivedData(com.adhoc.adhocsdk.ExperimentFlags)
com.adhoc.adhocsdk.R
com.adhoc.adhocsdk.R$attr
com.adhoc.adhocsdk.R$drawable
com.adhoc.adhocsdk.R$drawable: int ic_launcher
com.adhoc.adhocsdk.R$string
com.adhoc.adhocsdk.R$string: int app_name
com.adhoc.adhocsdk.R$style
com.adhoc.adhocsdk.R$style: int AppBaseTheme
com.adhoc.adhocsdk.R$style: int AppTheme
com.adhoc.http.CipherSuite: com.adhoc.http.CipherSuite[] values()
com.adhoc.http.CipherSuite: com.adhoc.http.CipherSuite valueOf(java.lang.String)
com.adhoc.http.Protocol: com.adhoc.http.Protocol[] values()
com.adhoc.http.Protocol: com.adhoc.http.Protocol valueOf(java.lang.String)
com.adhoc.http.TlsVersion: com.adhoc.http.TlsVersion[] values()
com.adhoc.http.TlsVersion: com.adhoc.http.TlsVersion valueOf(java.lang.String)
com.adhoc.http.internal.framed.ErrorCode: com.adhoc.http.internal.framed.ErrorCode[] values()
com.adhoc.http.internal.framed.ErrorCode: com.adhoc.http.internal.framed.ErrorCode valueOf(java.lang.String)
com.adhoc.http.internal.framed.HeadersMode: com.adhoc.http.internal.framed.HeadersMode[] values()
com.adhoc.http.internal.framed.HeadersMode: com.adhoc.http.internal.framed.HeadersMode valueOf(java.lang.String)
com.adhoc.http.ws.WebSocket$PayloadType: com.adhoc.http.ws.WebSocket$PayloadType[] values()
com.adhoc.http.ws.WebSocket$PayloadType: com.adhoc.http.ws.WebSocket$PayloadType valueOf(java.lang.String)
com.adhoc.ninepatch.BitmapType: com.adhoc.ninepatch.BitmapType[] values()
com.adhoc.ninepatch.BitmapType: com.adhoc.ninepatch.BitmapType valueOf(java.lang.String)
com.adhoc.nkzawa.engineio.client.Socket$ReadyState: com.adhoc.nkzawa.engineio.client.Socket$ReadyState[] values()
com.adhoc.nkzawa.engineio.client.Socket$ReadyState: com.adhoc.nkzawa.engineio.client.Socket$ReadyState valueOf(java.lang.String)
com.adhoc.nkzawa.engineio.client.Transport$ReadyState: com.adhoc.nkzawa.engineio.client.Transport$ReadyState[] values()
com.adhoc.nkzawa.engineio.client.Transport$ReadyState: com.adhoc.nkzawa.engineio.client.Transport$ReadyState valueOf(java.lang.String)
com.adhoc.nkzawa.socketio.client.Manager$ReadyState: com.adhoc.nkzawa.socketio.client.Manager$ReadyState[] values()
com.adhoc.nkzawa.socketio.client.Manager$ReadyState: com.adhoc.nkzawa.socketio.client.Manager$ReadyState valueOf(java.lang.String)
com.adhoc.pic.MediaStoreRequestHandler$PicassoKind: com.adhoc.pic.MediaStoreRequestHandler$PicassoKind[] values()
com.adhoc.pic.MediaStoreRequestHandler$PicassoKind: com.adhoc.pic.MediaStoreRequestHandler$PicassoKind valueOf(java.lang.String)
com.adhoc.pic.MemoryPolicy: com.adhoc.pic.MemoryPolicy[] values()
com.adhoc.pic.MemoryPolicy: com.adhoc.pic.MemoryPolicy valueOf(java.lang.String)
com.adhoc.pic.NetworkPolicy: com.adhoc.pic.NetworkPolicy[] values()
com.adhoc.pic.NetworkPolicy: com.adhoc.pic.NetworkPolicy valueOf(java.lang.String)
com.adhoc.pic.Picasso$LoadedFrom: com.adhoc.pic.Picasso$LoadedFrom[] values()
com.adhoc.pic.Picasso$LoadedFrom: com.adhoc.pic.Picasso$LoadedFrom valueOf(java.lang.String)
com.adhoc.pic.Picasso$Priority: com.adhoc.pic.Picasso$Priority[] values()
com.adhoc.pic.Picasso$Priority: com.adhoc.pic.Picasso$Priority valueOf(java.lang.String)
com.adhoc.property.Properties: com.adhoc.property.Properties[] values()
com.adhoc.property.Properties: com.adhoc.property.Properties valueOf(java.lang.String)
com.adhoc.property.Types: com.adhoc.property.Types[] values()
com.adhoc.property.Types: com.adhoc.property.Types valueOf(java.lang.String)
com.adhoc.utils.Utils$NetWorkState: com.adhoc.utils.Utils$NetWorkState[] values()
com.adhoc.utils.Utils$NetWorkState: com.adhoc.utils.Utils$NetWorkState valueOf(java.lang.String)
